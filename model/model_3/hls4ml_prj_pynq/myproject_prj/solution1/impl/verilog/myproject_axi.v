// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_axi,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.535020,HLS_SYN_LAT=93,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=9,HLS_SYN_FF=20642,HLS_SYN_LUT=39514,HLS_VERSION=2019_1}" *)

module myproject_axi (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 58'd1;
parameter    ap_ST_fsm_pp0_stage0 = 58'd2;
parameter    ap_ST_fsm_state11 = 58'd4;
parameter    ap_ST_fsm_state12 = 58'd8;
parameter    ap_ST_fsm_state13 = 58'd16;
parameter    ap_ST_fsm_state14 = 58'd32;
parameter    ap_ST_fsm_state15 = 58'd64;
parameter    ap_ST_fsm_state16 = 58'd128;
parameter    ap_ST_fsm_state17 = 58'd256;
parameter    ap_ST_fsm_state18 = 58'd512;
parameter    ap_ST_fsm_state19 = 58'd1024;
parameter    ap_ST_fsm_state20 = 58'd2048;
parameter    ap_ST_fsm_state21 = 58'd4096;
parameter    ap_ST_fsm_state22 = 58'd8192;
parameter    ap_ST_fsm_state23 = 58'd16384;
parameter    ap_ST_fsm_state24 = 58'd32768;
parameter    ap_ST_fsm_state25 = 58'd65536;
parameter    ap_ST_fsm_state26 = 58'd131072;
parameter    ap_ST_fsm_state27 = 58'd262144;
parameter    ap_ST_fsm_state28 = 58'd524288;
parameter    ap_ST_fsm_state29 = 58'd1048576;
parameter    ap_ST_fsm_state30 = 58'd2097152;
parameter    ap_ST_fsm_state31 = 58'd4194304;
parameter    ap_ST_fsm_state32 = 58'd8388608;
parameter    ap_ST_fsm_state33 = 58'd16777216;
parameter    ap_ST_fsm_state34 = 58'd33554432;
parameter    ap_ST_fsm_state35 = 58'd67108864;
parameter    ap_ST_fsm_state36 = 58'd134217728;
parameter    ap_ST_fsm_state37 = 58'd268435456;
parameter    ap_ST_fsm_state38 = 58'd536870912;
parameter    ap_ST_fsm_state39 = 58'd1073741824;
parameter    ap_ST_fsm_state40 = 58'd2147483648;
parameter    ap_ST_fsm_state41 = 58'd4294967296;
parameter    ap_ST_fsm_state42 = 58'd8589934592;
parameter    ap_ST_fsm_state43 = 58'd17179869184;
parameter    ap_ST_fsm_state44 = 58'd34359738368;
parameter    ap_ST_fsm_state45 = 58'd68719476736;
parameter    ap_ST_fsm_state46 = 58'd137438953472;
parameter    ap_ST_fsm_state47 = 58'd274877906944;
parameter    ap_ST_fsm_state48 = 58'd549755813888;
parameter    ap_ST_fsm_state49 = 58'd1099511627776;
parameter    ap_ST_fsm_state50 = 58'd2199023255552;
parameter    ap_ST_fsm_state51 = 58'd4398046511104;
parameter    ap_ST_fsm_state52 = 58'd8796093022208;
parameter    ap_ST_fsm_state53 = 58'd17592186044416;
parameter    ap_ST_fsm_state54 = 58'd35184372088832;
parameter    ap_ST_fsm_state55 = 58'd70368744177664;
parameter    ap_ST_fsm_state56 = 58'd140737488355328;
parameter    ap_ST_fsm_state57 = 58'd281474976710656;
parameter    ap_ST_fsm_state58 = 58'd562949953421312;
parameter    ap_ST_fsm_state59 = 58'd1125899906842624;
parameter    ap_ST_fsm_state60 = 58'd2251799813685248;
parameter    ap_ST_fsm_state61 = 58'd4503599627370496;
parameter    ap_ST_fsm_state62 = 58'd9007199254740992;
parameter    ap_ST_fsm_state63 = 58'd18014398509481984;
parameter    ap_ST_fsm_state64 = 58'd36028797018963968;
parameter    ap_ST_fsm_pp1_stage0 = 58'd72057594037927936;
parameter    ap_ST_fsm_state75 = 58'd144115188075855872;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [0:0] in_r_TLAST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] in_data_0_data_out;
wire    in_data_0_vld_in;
wire    in_data_0_vld_out;
wire    in_data_0_ack_in;
reg    in_data_0_ack_out;
reg   [31:0] in_data_0_payload_A;
reg   [31:0] in_data_0_payload_B;
reg    in_data_0_sel_rd;
reg    in_data_0_sel_wr;
wire    in_data_0_sel;
wire    in_data_0_load_A;
wire    in_data_0_load_B;
reg   [1:0] in_data_0_state;
wire    in_data_0_state_cmp_full;
reg   [0:0] in_last_V_0_data_out;
wire    in_last_V_0_vld_in;
wire    in_last_V_0_vld_out;
wire    in_last_V_0_ack_in;
reg    in_last_V_0_ack_out;
reg   [0:0] in_last_V_0_payload_A;
reg   [0:0] in_last_V_0_payload_B;
reg    in_last_V_0_sel_rd;
reg    in_last_V_0_sel_wr;
wire    in_last_V_0_sel;
wire    in_last_V_0_load_A;
wire    in_last_V_0_load_B;
reg   [1:0] in_last_V_0_state;
wire    in_last_V_0_state_cmp_full;
reg   [31:0] out_data_1_data_out;
reg    out_data_1_vld_in;
wire    out_data_1_vld_out;
wire    out_data_1_ack_in;
wire    out_data_1_ack_out;
reg   [31:0] out_data_1_payload_A;
reg   [31:0] out_data_1_payload_B;
reg    out_data_1_sel_rd;
reg    out_data_1_sel_wr;
wire    out_data_1_sel;
wire    out_data_1_load_A;
wire    out_data_1_load_B;
reg   [1:0] out_data_1_state;
wire    out_data_1_state_cmp_full;
reg   [0:0] out_last_V_1_data_out;
reg    out_last_V_1_vld_in;
wire    out_last_V_1_vld_out;
wire    out_last_V_1_ack_in;
wire    out_last_V_1_ack_out;
reg   [0:0] out_last_V_1_payload_A;
reg   [0:0] out_last_V_1_payload_B;
reg    out_last_V_1_sel_rd;
reg    out_last_V_1_sel_wr;
wire    out_last_V_1_sel;
wire    out_last_V_1_load_A;
wire    out_last_V_1_load_B;
reg   [1:0] out_last_V_1_state;
wire    out_last_V_1_state_cmp_full;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [57:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln13_fu_246_p2;
reg    out_r_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter8;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln21_reg_1225;
reg   [0:0] icmp_ln21_reg_1225_pp1_iter7_reg;
reg    ap_enable_reg_pp1_iter9;
reg   [0:0] icmp_ln21_reg_1225_pp1_iter8_reg;
reg   [0:0] is_last_0_reg_200;
reg   [4:0] i_0_reg_212;
reg   [2:0] i2_0_reg_223;
reg   [0:0] icmp_ln13_reg_1039;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln13_reg_1039_pp0_iter1_reg;
reg   [0:0] icmp_ln13_reg_1039_pp0_iter2_reg;
reg   [0:0] icmp_ln13_reg_1039_pp0_iter3_reg;
reg   [0:0] icmp_ln13_reg_1039_pp0_iter4_reg;
reg   [0:0] icmp_ln13_reg_1039_pp0_iter5_reg;
reg   [0:0] icmp_ln13_reg_1039_pp0_iter6_reg;
reg   [0:0] icmp_ln13_reg_1039_pp0_iter7_reg;
wire   [4:0] i_fu_252_p2;
reg   [31:0] in_data_tmp_reg_1048;
reg   [31:0] in_data_tmp_reg_1048_pp0_iter1_reg;
reg   [31:0] in_data_tmp_reg_1048_pp0_iter2_reg;
reg   [31:0] in_data_tmp_reg_1048_pp0_iter3_reg;
wire   [3:0] trunc_ln203_fu_267_p1;
reg   [3:0] trunc_ln203_reg_1054;
reg   [3:0] trunc_ln203_reg_1054_pp0_iter1_reg;
reg   [3:0] trunc_ln203_reg_1054_pp0_iter2_reg;
reg   [3:0] trunc_ln203_reg_1054_pp0_iter3_reg;
reg   [3:0] trunc_ln203_reg_1054_pp0_iter4_reg;
reg   [3:0] trunc_ln203_reg_1054_pp0_iter5_reg;
wire   [0:0] is_last_fu_271_p2;
reg   [0:0] is_last_reg_1059;
wire   [62:0] trunc_ln556_fu_281_p1;
reg   [62:0] trunc_ln556_reg_1064;
reg   [0:0] p_Result_12_reg_1069;
reg   [10:0] exp_tmp_V_reg_1074;
wire   [51:0] trunc_ln565_fu_303_p1;
reg   [51:0] trunc_ln565_reg_1079;
wire   [53:0] man_V_2_fu_327_p3;
reg   [53:0] man_V_2_reg_1084;
wire   [0:0] icmp_ln571_fu_334_p2;
reg   [0:0] icmp_ln571_reg_1089;
reg   [0:0] icmp_ln571_reg_1089_pp0_iter4_reg;
wire   [0:0] icmp_ln581_fu_345_p2;
reg   [0:0] icmp_ln581_reg_1095;
wire  signed [11:0] sh_amt_fu_363_p3;
reg  signed [11:0] sh_amt_reg_1101;
wire   [0:0] icmp_ln582_fu_371_p2;
reg   [0:0] icmp_ln582_reg_1107;
reg   [0:0] icmp_ln582_reg_1107_pp0_iter4_reg;
wire   [15:0] trunc_ln583_fu_377_p1;
reg   [15:0] trunc_ln583_reg_1113;
reg   [15:0] trunc_ln583_reg_1113_pp0_iter4_reg;
reg   [15:0] trunc_ln583_reg_1113_pp0_iter5_reg;
reg   [7:0] tmp_465_reg_1119;
wire  signed [31:0] sext_ln581_fu_391_p1;
reg  signed [31:0] sext_ln581_reg_1124;
reg  signed [31:0] sext_ln581_reg_1124_pp0_iter5_reg;
wire   [0:0] and_ln585_fu_453_p2;
reg   [0:0] and_ln585_reg_1134;
wire   [0:0] and_ln603_fu_476_p2;
reg   [0:0] and_ln603_reg_1139;
reg   [0:0] and_ln603_reg_1139_pp0_iter5_reg;
wire   [0:0] or_ln603_fu_482_p2;
reg   [0:0] or_ln603_reg_1144;
reg   [0:0] or_ln603_reg_1144_pp0_iter5_reg;
wire   [15:0] select_ln603_1_fu_488_p3;
reg   [15:0] select_ln603_1_reg_1150;
reg   [15:0] select_ln603_1_reg_1150_pp0_iter5_reg;
wire   [53:0] grp_fu_408_p2;
reg   [53:0] ashr_ln586_reg_1155;
wire   [0:0] or_ln603_2_fu_510_p2;
reg   [0:0] or_ln603_2_reg_1160;
reg   [0:0] or_ln603_2_reg_1160_pp0_iter6_reg;
wire   [15:0] select_ln603_2_fu_533_p3;
reg   [15:0] select_ln603_2_reg_1165;
wire   [7:0] shl_ln_fu_539_p3;
reg   [7:0] shl_ln_reg_1170;
wire   [7:0] empty_42_fu_546_p2;
reg   [7:0] empty_42_reg_1175;
wire   [0:0] icmp_ln203_fu_552_p2;
reg   [0:0] icmp_ln203_reg_1180;
reg   [0:0] icmp_ln203_reg_1180_pp0_iter7_reg;
wire   [255:0] shl_ln203_fu_619_p2;
reg   [255:0] shl_ln203_reg_1188;
wire   [255:0] and_ln203_fu_637_p2;
reg   [255:0] and_ln203_reg_1194;
reg   [15:0] out_local_reg_1200;
wire    ap_CS_fsm_state64;
reg   [15:0] out_local_1_reg_1205;
reg   [15:0] out_local_2_reg_1210;
reg   [15:0] out_local_3_reg_1215;
reg   [15:0] out_local_4_reg_1220;
wire   [0:0] icmp_ln21_fu_708_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state65_pp1_stage0_iter0;
wire    ap_block_state66_pp1_stage0_iter1;
wire    ap_block_state67_pp1_stage0_iter2;
wire    ap_block_state68_pp1_stage0_iter3;
wire    ap_block_state69_pp1_stage0_iter4;
wire    ap_block_state70_pp1_stage0_iter5;
wire    ap_block_state71_pp1_stage0_iter6;
wire    ap_block_state72_pp1_stage0_iter7;
wire    ap_block_state73_pp1_stage0_iter8;
reg    ap_block_state73_io;
wire    ap_block_state74_pp1_stage0_iter9;
reg    ap_block_state74_io;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln21_reg_1225_pp1_iter1_reg;
reg   [0:0] icmp_ln21_reg_1225_pp1_iter2_reg;
reg   [0:0] icmp_ln21_reg_1225_pp1_iter3_reg;
reg   [0:0] icmp_ln21_reg_1225_pp1_iter4_reg;
reg   [0:0] icmp_ln21_reg_1225_pp1_iter5_reg;
reg   [0:0] icmp_ln21_reg_1225_pp1_iter6_reg;
wire   [2:0] i_1_fu_714_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [15:0] tmp_V_3_fu_720_p7;
reg   [15:0] tmp_V_3_reg_1234;
reg   [0:0] p_Result_14_reg_1240;
reg   [0:0] p_Result_14_reg_1240_pp1_iter1_reg;
reg   [0:0] p_Result_14_reg_1240_pp1_iter2_reg;
reg   [0:0] p_Result_14_reg_1240_pp1_iter3_reg;
reg   [0:0] p_Result_14_reg_1240_pp1_iter4_reg;
reg   [0:0] p_Result_14_reg_1240_pp1_iter5_reg;
reg   [0:0] p_Result_14_reg_1240_pp1_iter6_reg;
reg   [0:0] p_Result_14_reg_1240_pp1_iter7_reg;
wire   [15:0] tmp_V_fu_739_p2;
reg   [15:0] tmp_V_reg_1246;
wire   [0:0] and_ln24_fu_751_p2;
reg   [0:0] and_ln24_reg_1251;
reg   [0:0] and_ln24_reg_1251_pp1_iter1_reg;
reg   [0:0] and_ln24_reg_1251_pp1_iter2_reg;
reg   [0:0] and_ln24_reg_1251_pp1_iter3_reg;
reg   [0:0] and_ln24_reg_1251_pp1_iter4_reg;
reg   [0:0] and_ln24_reg_1251_pp1_iter5_reg;
reg   [0:0] and_ln24_reg_1251_pp1_iter6_reg;
reg   [0:0] and_ln24_reg_1251_pp1_iter7_reg;
wire   [0:0] icmp_ln935_fu_757_p2;
reg   [0:0] icmp_ln935_reg_1256;
reg   [0:0] icmp_ln935_reg_1256_pp1_iter2_reg;
reg   [0:0] icmp_ln935_reg_1256_pp1_iter3_reg;
reg   [0:0] icmp_ln935_reg_1256_pp1_iter4_reg;
reg   [0:0] icmp_ln935_reg_1256_pp1_iter5_reg;
reg   [0:0] icmp_ln935_reg_1256_pp1_iter6_reg;
reg   [0:0] icmp_ln935_reg_1256_pp1_iter7_reg;
wire   [15:0] tmp_V_4_fu_762_p3;
reg   [15:0] tmp_V_4_reg_1261;
reg   [15:0] tmp_V_4_reg_1261_pp1_iter2_reg;
reg   [15:0] tmp_V_4_reg_1261_pp1_iter3_reg;
reg   [31:0] l_fu_785_p3;
reg   [31:0] l_reg_1269;
wire   [7:0] trunc_ln943_fu_793_p1;
reg   [7:0] trunc_ln943_reg_1274;
reg   [7:0] trunc_ln943_reg_1274_pp1_iter2_reg;
reg   [7:0] trunc_ln943_reg_1274_pp1_iter3_reg;
reg   [7:0] trunc_ln943_reg_1274_pp1_iter4_reg;
reg   [7:0] trunc_ln943_reg_1274_pp1_iter5_reg;
reg   [7:0] trunc_ln943_reg_1274_pp1_iter6_reg;
reg   [7:0] trunc_ln943_reg_1274_pp1_iter7_reg;
wire   [31:0] sub_ln944_fu_797_p2;
reg   [31:0] sub_ln944_reg_1279;
wire   [15:0] trunc_ln944_fu_802_p1;
reg   [15:0] trunc_ln944_reg_1286;
reg   [15:0] trunc_ln944_reg_1286_pp1_iter3_reg;
wire   [4:0] sub_ln947_fu_810_p2;
reg   [4:0] sub_ln947_reg_1291;
wire   [31:0] lsb_index_fu_816_p2;
reg   [31:0] lsb_index_reg_1296;
reg   [30:0] tmp_469_reg_1302;
wire   [0:0] icmp_ln947_1_fu_845_p2;
reg   [0:0] icmp_ln947_1_reg_1307;
wire   [31:0] add_ln958_fu_851_p2;
reg   [31:0] add_ln958_reg_1312;
wire   [31:0] sub_ln958_fu_856_p2;
reg   [31:0] sub_ln958_reg_1317;
wire   [31:0] or_ln_fu_908_p3;
reg   [31:0] or_ln_reg_1322;
reg   [31:0] or_ln_reg_1322_pp1_iter5_reg;
wire   [0:0] icmp_ln958_fu_922_p2;
reg   [0:0] icmp_ln958_reg_1337;
reg   [0:0] icmp_ln958_reg_1337_pp1_iter5_reg;
wire   [31:0] grp_fu_927_p2;
reg   [31:0] lshr_ln958_reg_1347;
wire   [63:0] grp_fu_935_p2;
reg   [63:0] shl_ln958_reg_1352;
reg   [62:0] m_5_reg_1357;
reg   [62:0] m_5_reg_1357_pp1_iter7_reg;
reg   [0:0] tmp_471_reg_1362;
wire   [7:0] select_ln964_fu_977_p3;
reg   [7:0] select_ln964_reg_1367;
wire   [31:0] select_ln935_fu_1024_p3;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state65;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
wire    grp_myproject_fu_234_ap_start;
wire    grp_myproject_fu_234_ap_done;
wire    grp_myproject_fu_234_ap_idle;
wire    grp_myproject_fu_234_ap_ready;
wire   [15:0] grp_myproject_fu_234_ap_return_0;
wire   [15:0] grp_myproject_fu_234_ap_return_1;
wire   [15:0] grp_myproject_fu_234_ap_return_2;
wire   [15:0] grp_myproject_fu_234_ap_return_3;
wire   [15:0] grp_myproject_fu_234_ap_return_4;
wire    grp_myproject_fu_234_fc1_input_V_blk_n;
reg   [0:0] ap_phi_mux_is_last_0_phi_fu_204_p4;
reg    grp_myproject_fu_234_ap_start_reg;
reg   [57:0] ap_NS_fsm;
wire    ap_NS_fsm_state11;
reg   [255:0] in_local_V_fu_178;
wire    ap_CS_fsm_state11;
wire   [255:0] in_local_V_1_fu_677_p2;
wire    ap_block_pp1_stage0_01001;
wire   [63:0] grp_fu_243_p1;
wire   [63:0] ireg_V_fu_277_p1;
wire   [52:0] tmp_s_fu_310_p3;
wire   [53:0] p_Result_13_fu_317_p1;
wire   [53:0] man_V_1_fu_321_p2;
wire   [11:0] zext_ln461_fu_307_p1;
wire   [11:0] F2_fu_339_p2;
wire   [11:0] add_ln581_fu_351_p2;
wire   [11:0] sub_ln581_fu_357_p2;
wire   [53:0] grp_fu_408_p1;
wire   [31:0] bitcast_ln696_fu_413_p1;
wire   [0:0] tmp_466_fu_416_p3;
wire   [0:0] or_ln582_fu_432_p2;
wire   [0:0] xor_ln582_fu_436_p2;
wire   [0:0] icmp_ln585_fu_394_p2;
wire   [0:0] and_ln581_fu_442_p2;
wire   [0:0] xor_ln585_fu_447_p2;
wire   [0:0] or_ln581_fu_465_p2;
wire   [0:0] icmp_ln603_fu_399_p2;
wire   [0:0] xor_ln581_fu_470_p2;
wire   [0:0] and_ln585_1_fu_459_p2;
wire   [15:0] select_ln588_fu_424_p3;
wire   [0:0] xor_ln571_fu_495_p2;
wire   [0:0] and_ln582_fu_500_p2;
wire   [0:0] or_ln603_1_fu_505_p2;
wire   [15:0] sext_ln581cast_fu_518_p1;
wire   [15:0] shl_ln604_fu_521_p2;
wire   [15:0] trunc_ln586_fu_515_p1;
wire   [15:0] select_ln603_fu_526_p3;
wire   [15:0] select_ln603_3_fu_558_p3;
wire   [8:0] zext_ln203_fu_564_p1;
wire   [8:0] zext_ln203_1_fu_567_p1;
wire   [8:0] xor_ln203_fu_574_p2;
wire   [8:0] select_ln203_fu_580_p3;
wire   [8:0] select_ln203_2_fu_594_p3;
wire   [8:0] select_ln203_1_fu_587_p3;
wire   [8:0] xor_ln203_1_fu_601_p2;
wire   [255:0] zext_ln203_2_fu_570_p1;
wire   [255:0] zext_ln203_3_fu_607_p1;
wire   [255:0] zext_ln203_4_fu_611_p1;
wire   [255:0] zext_ln203_5_fu_615_p1;
wire   [255:0] shl_ln203_1_fu_625_p2;
wire   [255:0] lshr_ln203_fu_631_p2;
reg   [255:0] tmp_467_fu_646_p4;
wire   [255:0] xor_ln203_2_fu_661_p2;
wire   [255:0] select_ln203_3_fu_655_p3;
wire   [255:0] and_ln203_1_fu_666_p2;
wire   [255:0] and_ln203_2_fu_672_p2;
wire   [0:0] icmp_ln24_fu_745_p2;
reg   [15:0] p_Result_s_fu_767_p4;
wire   [31:0] p_Result_15_fu_777_p3;
wire   [4:0] trunc_ln947_fu_806_p1;
wire   [15:0] zext_ln947_fu_831_p1;
wire   [15:0] lshr_ln947_fu_834_p2;
wire   [15:0] p_Result_10_fu_840_p2;
wire   [0:0] icmp_ln947_fu_861_p2;
wire   [0:0] tmp_470_fu_871_p3;
wire   [15:0] add_ln949_fu_884_p2;
wire   [0:0] p_Result_4_fu_889_p3;
wire   [0:0] xor_ln949_fu_878_p2;
wire   [0:0] and_ln949_fu_896_p2;
wire   [0:0] a_fu_866_p2;
wire   [0:0] or_ln949_fu_902_p2;
wire   [31:0] grp_fu_927_p0;
wire   [63:0] grp_fu_935_p0;
wire   [63:0] grp_fu_935_p1;
wire   [63:0] zext_ln958_fu_941_p1;
wire   [63:0] m_1_fu_944_p3;
wire   [63:0] zext_ln961_fu_950_p1;
wire   [63:0] m_2_fu_953_p2;
wire   [7:0] sub_ln964_fu_987_p2;
wire   [7:0] add_ln964_fu_992_p2;
wire   [63:0] m_6_fu_984_p1;
wire   [8:0] tmp_3_fu_997_p3;
wire   [63:0] p_Result_16_fu_1004_p5;
wire   [31:0] trunc_ln738_fu_1016_p1;
wire   [31:0] bitcast_ln739_fu_1020_p1;
reg    grp_fu_243_ce;
reg    grp_fu_408_ce;
reg    grp_fu_927_ce;
reg    grp_fu_935_ce;
wire    ap_CS_fsm_state75;
reg    ap_block_state75;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 in_data_0_sel_rd = 1'b0;
#0 in_data_0_sel_wr = 1'b0;
#0 in_data_0_state = 2'd0;
#0 in_last_V_0_sel_rd = 1'b0;
#0 in_last_V_0_sel_wr = 1'b0;
#0 in_last_V_0_state = 2'd0;
#0 out_data_1_sel_rd = 1'b0;
#0 out_data_1_sel_wr = 1'b0;
#0 out_data_1_state = 2'd0;
#0 out_last_V_1_sel_rd = 1'b0;
#0 out_last_V_1_sel_wr = 1'b0;
#0 out_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 58'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 grp_myproject_fu_234_ap_start_reg = 1'b0;
end

myproject grp_myproject_fu_234(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_myproject_fu_234_ap_start),
    .ap_done(grp_myproject_fu_234_ap_done),
    .ap_idle(grp_myproject_fu_234_ap_idle),
    .ap_ready(grp_myproject_fu_234_ap_ready),
    .fc1_input_V(in_local_V_fu_178),
    .fc1_input_V_ap_vld(1'b1),
    .ap_return_0(grp_myproject_fu_234_ap_return_0),
    .ap_return_1(grp_myproject_fu_234_ap_return_1),
    .ap_return_2(grp_myproject_fu_234_ap_return_2),
    .ap_return_3(grp_myproject_fu_234_ap_return_3),
    .ap_return_4(grp_myproject_fu_234_ap_return_4),
    .fc1_input_V_blk_n(grp_myproject_fu_234_fc1_input_V_blk_n)
);

myproject_axi_fpext_32ns_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_fpext_32ns_64_3_1_U248(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_data_0_data_out),
    .ce(grp_fu_243_ce),
    .dout(grp_fu_243_p1)
);

myproject_axi_ashr_54ns_32ns_54_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 2 ),
    .din0_WIDTH( 54 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 54 ))
myproject_axi_ashr_54ns_32ns_54_2_1_U249(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(man_V_2_reg_1084),
    .din1(grp_fu_408_p1),
    .ce(grp_fu_408_ce),
    .dout(grp_fu_408_p2)
);

myproject_axi_mux_53_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_53_16_1_1_U250(
    .din0(out_local_reg_1200),
    .din1(out_local_1_reg_1205),
    .din2(out_local_2_reg_1210),
    .din3(out_local_3_reg_1215),
    .din4(out_local_4_reg_1220),
    .din5(i2_0_reg_223),
    .dout(tmp_V_3_fu_720_p7)
);

myproject_axi_lshr_32ns_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myproject_axi_lshr_32ns_32ns_32_2_1_U251(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_927_p0),
    .din1(add_ln958_reg_1312),
    .ce(grp_fu_927_ce),
    .dout(grp_fu_927_p2)
);

myproject_axi_shl_64ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
myproject_axi_shl_64ns_32ns_64_2_1_U252(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_935_p0),
    .din1(grp_fu_935_p1),
    .ce(grp_fu_935_ce),
    .dout(grp_fu_935_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state65) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state65)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state65);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            ap_enable_reg_pp1_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_myproject_fu_234_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state11) & (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))))) begin
            grp_myproject_fu_234_ap_start_reg <= 1'b1;
        end else if ((grp_myproject_fu_234_ap_ready == 1'b1)) begin
            grp_myproject_fu_234_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_0_ack_out == 1'b1) & (in_data_0_vld_out == 1'b1))) begin
            in_data_0_sel_rd <= ~in_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_0_ack_in == 1'b1) & (in_data_0_vld_in == 1'b1))) begin
            in_data_0_sel_wr <= ~in_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_0_state <= 2'd0;
    end else begin
        if ((((in_data_0_state == 2'd3) & (in_data_0_vld_in == 1'b0) & (in_data_0_ack_out == 1'b1)) | ((in_data_0_state == 2'd2) & (in_data_0_vld_in == 1'b0)))) begin
            in_data_0_state <= 2'd2;
        end else if ((((in_data_0_state == 2'd1) & (in_data_0_ack_out == 1'b0)) | ((in_data_0_state == 2'd3) & (in_data_0_ack_out == 1'b0) & (in_data_0_vld_in == 1'b1)))) begin
            in_data_0_state <= 2'd1;
        end else if ((((in_data_0_state == 2'd1) & (in_data_0_ack_out == 1'b1)) | ((in_data_0_state == 2'd2) & (in_data_0_vld_in == 1'b1)) | (~((in_data_0_vld_in == 1'b0) & (in_data_0_ack_out == 1'b1)) & ~((in_data_0_ack_out == 1'b0) & (in_data_0_vld_in == 1'b1)) & (in_data_0_state == 2'd3)))) begin
            in_data_0_state <= 2'd3;
        end else begin
            in_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_out == 1'b1) & (in_last_V_0_vld_out == 1'b1))) begin
            in_last_V_0_sel_rd <= ~in_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_last_V_0_ack_in == 1'b1) & (in_last_V_0_vld_in == 1'b1))) begin
            in_last_V_0_sel_wr <= ~in_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)))) begin
            in_last_V_0_state <= 2'd2;
        end else if ((((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b0)) | ((in_last_V_0_state == 2'd3) & (in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd1;
        end else if (((~((in_last_V_0_vld_in == 1'b0) & (in_last_V_0_ack_out == 1'b1)) & ~((in_last_V_0_ack_out == 1'b0) & (in_last_V_0_vld_in == 1'b1)) & (in_last_V_0_state == 2'd3)) | ((in_last_V_0_state == 2'd1) & (in_last_V_0_ack_out == 1'b1)) | ((in_last_V_0_state == 2'd2) & (in_last_V_0_vld_in == 1'b1)))) begin
            in_last_V_0_state <= 2'd3;
        end else begin
            in_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_1_ack_out == 1'b1) & (out_data_1_vld_out == 1'b1))) begin
            out_data_1_sel_rd <= ~out_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_1_ack_in == 1'b1) & (out_data_1_vld_in == 1'b1))) begin
            out_data_1_sel_wr <= ~out_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_1_state <= 2'd0;
    end else begin
        if ((((out_data_1_state == 2'd2) & (out_data_1_vld_in == 1'b0)) | ((out_data_1_state == 2'd3) & (out_data_1_vld_in == 1'b0) & (out_data_1_ack_out == 1'b1)))) begin
            out_data_1_state <= 2'd2;
        end else if ((((out_data_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_data_1_vld_in == 1'b1)))) begin
            out_data_1_state <= 2'd1;
        end else if (((~((out_data_1_vld_in == 1'b0) & (out_data_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_data_1_vld_in == 1'b1)) & (out_data_1_state == 2'd3)) | ((out_data_1_state == 2'd1) & (out_data_1_ack_out == 1'b1)) | ((out_data_1_state == 2'd2) & (out_data_1_vld_in == 1'b1)))) begin
            out_data_1_state <= 2'd3;
        end else begin
            out_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_out == 1'b1) & (out_last_V_1_vld_out == 1'b1))) begin
            out_last_V_1_sel_rd <= ~out_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_last_V_1_ack_in == 1'b1) & (out_last_V_1_vld_in == 1'b1))) begin
            out_last_V_1_sel_wr <= ~out_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)))) begin
            out_last_V_1_state <= 2'd2;
        end else if ((((out_last_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd1;
        end else if (((~((out_last_V_1_vld_in == 1'b0) & (out_last_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_last_V_1_vld_in == 1'b1)) & (out_last_V_1_state == 2'd3)) | ((out_last_V_1_state == 2'd1) & (out_last_V_1_ack_out == 1'b1)) | ((out_last_V_1_state == 2'd2) & (out_last_V_1_vld_in == 1'b1)))) begin
            out_last_V_1_state <= 2'd3;
        end else begin
            out_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_708_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i2_0_reg_223 <= i_1_fu_714_p2;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        i2_0_reg_223 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_212 <= 5'd0;
    end else if (((icmp_ln13_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_212 <= i_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        is_last_0_reg_200 <= 1'd0;
    end else if (((icmp_ln13_reg_1039 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        is_last_0_reg_200 <= is_last_reg_1059;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1256_pp1_iter2_reg == 1'd0) & (icmp_ln21_reg_1225_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln958_reg_1312 <= add_ln958_fu_851_p2;
        icmp_ln947_1_reg_1307 <= icmp_ln947_1_fu_845_p2;
        lsb_index_reg_1296 <= lsb_index_fu_816_p2;
        sub_ln958_reg_1317 <= sub_ln958_fu_856_p2;
        tmp_469_reg_1302 <= {{lsb_index_fu_816_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_1039_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln203_reg_1194 <= and_ln203_fu_637_p2;
        shl_ln203_reg_1188 <= shl_ln203_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_708_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln24_reg_1251 <= and_ln24_fu_751_p2;
        p_Result_14_reg_1240 <= tmp_V_3_fu_720_p7[32'd15];
        tmp_V_3_reg_1234 <= tmp_V_3_fu_720_p7;
        tmp_V_reg_1246 <= tmp_V_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln24_reg_1251_pp1_iter1_reg <= and_ln24_reg_1251;
        icmp_ln21_reg_1225 <= icmp_ln21_fu_708_p2;
        icmp_ln21_reg_1225_pp1_iter1_reg <= icmp_ln21_reg_1225;
        p_Result_14_reg_1240_pp1_iter1_reg <= p_Result_14_reg_1240;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln24_reg_1251_pp1_iter2_reg <= and_ln24_reg_1251_pp1_iter1_reg;
        and_ln24_reg_1251_pp1_iter3_reg <= and_ln24_reg_1251_pp1_iter2_reg;
        and_ln24_reg_1251_pp1_iter4_reg <= and_ln24_reg_1251_pp1_iter3_reg;
        and_ln24_reg_1251_pp1_iter5_reg <= and_ln24_reg_1251_pp1_iter4_reg;
        and_ln24_reg_1251_pp1_iter6_reg <= and_ln24_reg_1251_pp1_iter5_reg;
        and_ln24_reg_1251_pp1_iter7_reg <= and_ln24_reg_1251_pp1_iter6_reg;
        icmp_ln21_reg_1225_pp1_iter2_reg <= icmp_ln21_reg_1225_pp1_iter1_reg;
        icmp_ln21_reg_1225_pp1_iter3_reg <= icmp_ln21_reg_1225_pp1_iter2_reg;
        icmp_ln21_reg_1225_pp1_iter4_reg <= icmp_ln21_reg_1225_pp1_iter3_reg;
        icmp_ln21_reg_1225_pp1_iter5_reg <= icmp_ln21_reg_1225_pp1_iter4_reg;
        icmp_ln21_reg_1225_pp1_iter6_reg <= icmp_ln21_reg_1225_pp1_iter5_reg;
        icmp_ln21_reg_1225_pp1_iter7_reg <= icmp_ln21_reg_1225_pp1_iter6_reg;
        icmp_ln21_reg_1225_pp1_iter8_reg <= icmp_ln21_reg_1225_pp1_iter7_reg;
        icmp_ln935_reg_1256_pp1_iter2_reg <= icmp_ln935_reg_1256;
        icmp_ln935_reg_1256_pp1_iter3_reg <= icmp_ln935_reg_1256_pp1_iter2_reg;
        icmp_ln935_reg_1256_pp1_iter4_reg <= icmp_ln935_reg_1256_pp1_iter3_reg;
        icmp_ln935_reg_1256_pp1_iter5_reg <= icmp_ln935_reg_1256_pp1_iter4_reg;
        icmp_ln935_reg_1256_pp1_iter6_reg <= icmp_ln935_reg_1256_pp1_iter5_reg;
        icmp_ln935_reg_1256_pp1_iter7_reg <= icmp_ln935_reg_1256_pp1_iter6_reg;
        icmp_ln958_reg_1337_pp1_iter5_reg <= icmp_ln958_reg_1337;
        m_5_reg_1357_pp1_iter7_reg <= m_5_reg_1357;
        or_ln_reg_1322_pp1_iter5_reg[0] <= or_ln_reg_1322[0];
        p_Result_14_reg_1240_pp1_iter2_reg <= p_Result_14_reg_1240_pp1_iter1_reg;
        p_Result_14_reg_1240_pp1_iter3_reg <= p_Result_14_reg_1240_pp1_iter2_reg;
        p_Result_14_reg_1240_pp1_iter4_reg <= p_Result_14_reg_1240_pp1_iter3_reg;
        p_Result_14_reg_1240_pp1_iter5_reg <= p_Result_14_reg_1240_pp1_iter4_reg;
        p_Result_14_reg_1240_pp1_iter6_reg <= p_Result_14_reg_1240_pp1_iter5_reg;
        p_Result_14_reg_1240_pp1_iter7_reg <= p_Result_14_reg_1240_pp1_iter6_reg;
        tmp_V_4_reg_1261_pp1_iter2_reg <= tmp_V_4_reg_1261;
        tmp_V_4_reg_1261_pp1_iter3_reg <= tmp_V_4_reg_1261_pp1_iter2_reg;
        trunc_ln943_reg_1274_pp1_iter2_reg <= trunc_ln943_reg_1274;
        trunc_ln943_reg_1274_pp1_iter3_reg <= trunc_ln943_reg_1274_pp1_iter2_reg;
        trunc_ln943_reg_1274_pp1_iter4_reg <= trunc_ln943_reg_1274_pp1_iter3_reg;
        trunc_ln943_reg_1274_pp1_iter5_reg <= trunc_ln943_reg_1274_pp1_iter4_reg;
        trunc_ln943_reg_1274_pp1_iter6_reg <= trunc_ln943_reg_1274_pp1_iter5_reg;
        trunc_ln943_reg_1274_pp1_iter7_reg <= trunc_ln943_reg_1274_pp1_iter6_reg;
        trunc_ln944_reg_1286_pp1_iter3_reg <= trunc_ln944_reg_1286;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_1039_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln585_reg_1134 <= and_ln585_fu_453_p2;
        and_ln603_reg_1139 <= and_ln603_fu_476_p2;
        or_ln603_reg_1144 <= or_ln603_fu_482_p2;
        select_ln603_1_reg_1150 <= select_ln603_1_fu_488_p3;
        sext_ln581_reg_1124 <= sext_ln581_fu_391_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln603_reg_1139_pp0_iter5_reg <= and_ln603_reg_1139;
        icmp_ln13_reg_1039_pp0_iter2_reg <= icmp_ln13_reg_1039_pp0_iter1_reg;
        icmp_ln13_reg_1039_pp0_iter3_reg <= icmp_ln13_reg_1039_pp0_iter2_reg;
        icmp_ln13_reg_1039_pp0_iter4_reg <= icmp_ln13_reg_1039_pp0_iter3_reg;
        icmp_ln13_reg_1039_pp0_iter5_reg <= icmp_ln13_reg_1039_pp0_iter4_reg;
        icmp_ln13_reg_1039_pp0_iter6_reg <= icmp_ln13_reg_1039_pp0_iter5_reg;
        icmp_ln13_reg_1039_pp0_iter7_reg <= icmp_ln13_reg_1039_pp0_iter6_reg;
        icmp_ln203_reg_1180_pp0_iter7_reg <= icmp_ln203_reg_1180;
        icmp_ln571_reg_1089_pp0_iter4_reg <= icmp_ln571_reg_1089;
        icmp_ln582_reg_1107_pp0_iter4_reg <= icmp_ln582_reg_1107;
        in_data_tmp_reg_1048_pp0_iter2_reg <= in_data_tmp_reg_1048_pp0_iter1_reg;
        in_data_tmp_reg_1048_pp0_iter3_reg <= in_data_tmp_reg_1048_pp0_iter2_reg;
        or_ln603_2_reg_1160_pp0_iter6_reg <= or_ln603_2_reg_1160;
        or_ln603_reg_1144_pp0_iter5_reg <= or_ln603_reg_1144;
        select_ln603_1_reg_1150_pp0_iter5_reg <= select_ln603_1_reg_1150;
        sext_ln581_reg_1124_pp0_iter5_reg <= sext_ln581_reg_1124;
        trunc_ln203_reg_1054_pp0_iter2_reg <= trunc_ln203_reg_1054_pp0_iter1_reg;
        trunc_ln203_reg_1054_pp0_iter3_reg <= trunc_ln203_reg_1054_pp0_iter2_reg;
        trunc_ln203_reg_1054_pp0_iter4_reg <= trunc_ln203_reg_1054_pp0_iter3_reg;
        trunc_ln203_reg_1054_pp0_iter5_reg <= trunc_ln203_reg_1054_pp0_iter4_reg;
        trunc_ln583_reg_1113_pp0_iter4_reg <= trunc_ln583_reg_1113;
        trunc_ln583_reg_1113_pp0_iter5_reg <= trunc_ln583_reg_1113_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_1039_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ashr_ln586_reg_1155 <= grp_fu_408_p2;
        or_ln603_2_reg_1160 <= or_ln603_2_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_1039_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_42_reg_1175[7 : 4] <= empty_42_fu_546_p2[7 : 4];
        icmp_ln203_reg_1180 <= icmp_ln203_fu_552_p2;
        shl_ln_reg_1170[7 : 4] <= shl_ln_fu_539_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_1039_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_tmp_V_reg_1074 <= {{ireg_V_fu_277_p1[62:52]}};
        p_Result_12_reg_1069 <= ireg_V_fu_277_p1[32'd63];
        trunc_ln556_reg_1064 <= trunc_ln556_fu_281_p1;
        trunc_ln565_reg_1079 <= trunc_ln565_fu_303_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_1039 <= icmp_ln13_fu_246_p2;
        icmp_ln13_reg_1039_pp0_iter1_reg <= icmp_ln13_reg_1039;
        in_data_tmp_reg_1048_pp0_iter1_reg <= in_data_tmp_reg_1048;
        trunc_ln203_reg_1054_pp0_iter1_reg <= trunc_ln203_reg_1054;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_1039_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln571_reg_1089 <= icmp_ln571_fu_334_p2;
        icmp_ln581_reg_1095 <= icmp_ln581_fu_345_p2;
        icmp_ln582_reg_1107 <= icmp_ln582_fu_371_p2;
        man_V_2_reg_1084 <= man_V_2_fu_327_p3;
        sh_amt_reg_1101 <= sh_amt_fu_363_p3;
        tmp_465_reg_1119 <= {{sh_amt_fu_363_p3[11:4]}};
        trunc_ln583_reg_1113 <= trunc_ln583_fu_377_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1225 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln935_reg_1256 <= icmp_ln935_fu_757_p2;
        l_reg_1269 <= l_fu_785_p3;
        tmp_V_4_reg_1261 <= tmp_V_4_fu_762_p3;
        trunc_ln943_reg_1274 <= trunc_ln943_fu_793_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1256_pp1_iter3_reg == 1'd0) & (icmp_ln21_reg_1225_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln958_reg_1337 <= icmp_ln958_fu_922_p2;
        or_ln_reg_1322[0] <= or_ln_fu_908_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_0_load_A == 1'b1)) begin
        in_data_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_0_load_B == 1'b1)) begin
        in_data_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_tmp_reg_1048 <= in_data_0_data_out;
        trunc_ln203_reg_1054 <= trunc_ln203_fu_267_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_A == 1'b1)) begin
        in_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_last_V_0_load_B == 1'b1)) begin
        in_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_1039_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        in_local_V_fu_178 <= in_local_V_1_fu_677_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        is_last_reg_1059 <= is_last_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1256_pp1_iter4_reg == 1'd0) & (icmp_ln21_reg_1225_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        lshr_ln958_reg_1347 <= grp_fu_927_p2;
        shl_ln958_reg_1352 <= grp_fu_935_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1256_pp1_iter5_reg == 1'd0) & (icmp_ln21_reg_1225_pp1_iter5_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        m_5_reg_1357 <= {{m_2_fu_953_p2[63:1]}};
        tmp_471_reg_1362 <= m_2_fu_953_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_1_load_A == 1'b1)) begin
        out_data_1_payload_A <= select_ln935_fu_1024_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_1_load_B == 1'b1)) begin
        out_data_1_payload_B <= select_ln935_fu_1024_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_A == 1'b1)) begin
        out_last_V_1_payload_A <= and_ln24_reg_1251_pp1_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((out_last_V_1_load_B == 1'b1)) begin
        out_last_V_1_payload_B <= and_ln24_reg_1251_pp1_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        out_local_1_reg_1205 <= grp_myproject_fu_234_ap_return_1;
        out_local_2_reg_1210 <= grp_myproject_fu_234_ap_return_2;
        out_local_3_reg_1215 <= grp_myproject_fu_234_ap_return_3;
        out_local_4_reg_1220 <= grp_myproject_fu_234_ap_return_4;
        out_local_reg_1200 <= grp_myproject_fu_234_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln603_2_reg_1160 == 1'd1) & (icmp_ln13_reg_1039_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln603_2_reg_1165 <= select_ln603_2_fu_533_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1256_pp1_iter6_reg == 1'd0) & (icmp_ln21_reg_1225_pp1_iter6_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln964_reg_1367[0] <= select_ln964_fu_977_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_1256 == 1'd0) & (icmp_ln21_reg_1225_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sub_ln944_reg_1279 <= sub_ln944_fu_797_p2;
        sub_ln947_reg_1291 <= sub_ln947_fu_810_p2;
        trunc_ln944_reg_1286 <= trunc_ln944_fu_802_p1;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_246_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln21_fu_708_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state65 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state65 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_1039 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_is_last_0_phi_fu_204_p4 = is_last_reg_1059;
    end else begin
        ap_phi_mux_is_last_0_phi_fu_204_p4 = is_last_0_reg_200;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_243_ce = 1'b1;
    end else begin
        grp_fu_243_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_408_ce = 1'b1;
    end else begin
        grp_fu_408_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_927_ce = 1'b1;
    end else begin
        grp_fu_927_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_935_ce = 1'b1;
    end else begin
        grp_fu_935_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_0_ack_out = 1'b1;
    end else begin
        in_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_0_sel == 1'b1)) begin
        in_data_0_data_out = in_data_0_payload_B;
    end else begin
        in_data_0_data_out = in_data_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_last_V_0_ack_out = 1'b1;
    end else begin
        in_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_last_V_0_sel == 1'b1)) begin
        in_last_V_0_data_out = in_last_V_0_payload_B;
    end else begin
        in_last_V_0_data_out = in_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TDATA_blk_n = in_data_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_data_1_sel == 1'b1)) begin
        out_data_1_data_out = out_data_1_payload_B;
    end else begin
        out_data_1_data_out = out_data_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1225_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1))) begin
        out_data_1_vld_in = 1'b1;
    end else begin
        out_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_last_V_1_sel == 1'b1)) begin
        out_last_V_1_data_out = out_last_V_1_payload_B;
    end else begin
        out_last_V_1_data_out = out_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1225_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1))) begin
        out_last_V_1_vld_in = 1'b1;
    end else begin
        out_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln21_reg_1225_pp1_iter8_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1)) | ((icmp_ln21_reg_1225_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter8 == 1'b1)))) begin
        out_r_TDATA_blk_n = out_data_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln13_fu_246_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln13_fu_246_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln21_fu_708_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln21_fu_708_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state75 : begin
            if ((~((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_339_p2 = (12'd1075 - zext_ln461_fu_307_p1);

assign a_fu_866_p2 = (icmp_ln947_fu_861_p2 & icmp_ln947_1_reg_1307);

assign add_ln581_fu_351_p2 = ($signed(12'd4086) + $signed(F2_fu_339_p2));

assign add_ln949_fu_884_p2 = ($signed(16'd65512) + $signed(trunc_ln944_reg_1286_pp1_iter3_reg));

assign add_ln958_fu_851_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_1279));

assign add_ln964_fu_992_p2 = (select_ln964_reg_1367 + sub_ln964_fu_987_p2);

assign and_ln203_1_fu_666_p2 = (xor_ln203_2_fu_661_p2 & in_local_V_fu_178);

assign and_ln203_2_fu_672_p2 = (select_ln203_3_fu_655_p3 & and_ln203_reg_1194);

assign and_ln203_fu_637_p2 = (shl_ln203_1_fu_625_p2 & lshr_ln203_fu_631_p2);

assign and_ln24_fu_751_p2 = (is_last_0_reg_200 & icmp_ln24_fu_745_p2);

assign and_ln581_fu_442_p2 = (xor_ln582_fu_436_p2 & icmp_ln581_reg_1095);

assign and_ln582_fu_500_p2 = (xor_ln571_fu_495_p2 & icmp_ln582_reg_1107_pp0_iter4_reg);

assign and_ln585_1_fu_459_p2 = (icmp_ln585_fu_394_p2 & and_ln581_fu_442_p2);

assign and_ln585_fu_453_p2 = (xor_ln585_fu_447_p2 & and_ln581_fu_442_p2);

assign and_ln603_fu_476_p2 = (xor_ln581_fu_470_p2 & icmp_ln603_fu_399_p2);

assign and_ln949_fu_896_p2 = (xor_ln949_fu_878_p2 & p_Result_4_fu_889_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd57];

assign ap_NS_fsm_state11 = ap_NS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln13_fu_246_p2 == 1'd0) & (in_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln13_fu_246_p2 == 1'd0) & (in_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state74_io) & (ap_enable_reg_pp1_iter9 == 1'b1)) | ((1'b1 == ap_block_state73_io) & (ap_enable_reg_pp1_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state74_io) & (ap_enable_reg_pp1_iter9 == 1'b1)) | ((1'b1 == ap_block_state73_io) & (ap_enable_reg_pp1_iter8 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln13_fu_246_p2 == 1'd0) & (in_data_0_vld_out == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_io = ((icmp_ln21_reg_1225_pp1_iter7_reg == 1'd0) & (out_data_1_ack_in == 1'b0));
end

assign ap_block_state73_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74_io = ((icmp_ln21_reg_1225_pp1_iter8_reg == 1'd0) & (out_data_1_ack_in == 1'b0));
end

assign ap_block_state74_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75 = ((out_last_V_1_state == 2'd1) | (out_data_1_state == 2'd1) | ((out_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_data_1_state == 2'd3) & (out_r_TREADY == 1'b0)));
end

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln696_fu_413_p1 = in_data_tmp_reg_1048_pp0_iter3_reg;

assign bitcast_ln739_fu_1020_p1 = trunc_ln738_fu_1016_p1;

assign empty_42_fu_546_p2 = (shl_ln_fu_539_p3 | 8'd15);

assign grp_fu_408_p1 = $unsigned(sext_ln581_fu_391_p1);

assign grp_fu_927_p0 = tmp_V_4_reg_1261_pp1_iter3_reg;

assign grp_fu_935_p0 = tmp_V_4_reg_1261_pp1_iter3_reg;

assign grp_fu_935_p1 = sub_ln958_reg_1317;

assign grp_myproject_fu_234_ap_start = grp_myproject_fu_234_ap_start_reg;

assign i_1_fu_714_p2 = (i2_0_reg_223 + 3'd1);

assign i_fu_252_p2 = (i_0_reg_212 + 5'd1);

assign icmp_ln13_fu_246_p2 = ((i_0_reg_212 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_552_p2 = ((shl_ln_fu_539_p3 > empty_42_fu_546_p2) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_708_p2 = ((i2_0_reg_223 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_745_p2 = ((i2_0_reg_223 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_334_p2 = ((trunc_ln556_reg_1064 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_345_p2 = (($signed(F2_fu_339_p2) > $signed(12'd10)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_371_p2 = ((F2_fu_339_p2 == 12'd10) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_394_p2 = ((sh_amt_reg_1101 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_399_p2 = ((tmp_465_reg_1119 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_757_p2 = ((tmp_V_3_reg_1234 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_845_p2 = ((p_Result_10_fu_840_p2 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_861_p2 = (($signed(tmp_469_reg_1302) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_922_p2 = (($signed(lsb_index_reg_1296) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign in_data_0_ack_in = in_data_0_state[1'd1];

assign in_data_0_load_A = (in_data_0_state_cmp_full & ~in_data_0_sel_wr);

assign in_data_0_load_B = (in_data_0_state_cmp_full & in_data_0_sel_wr);

assign in_data_0_sel = in_data_0_sel_rd;

assign in_data_0_state_cmp_full = ((in_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_0_vld_in = in_r_TVALID;

assign in_data_0_vld_out = in_data_0_state[1'd0];

assign in_last_V_0_ack_in = in_last_V_0_state[1'd1];

assign in_last_V_0_load_A = (in_last_V_0_state_cmp_full & ~in_last_V_0_sel_wr);

assign in_last_V_0_load_B = (in_last_V_0_state_cmp_full & in_last_V_0_sel_wr);

assign in_last_V_0_sel = in_last_V_0_sel_rd;

assign in_last_V_0_state_cmp_full = ((in_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_last_V_0_vld_in = in_r_TVALID;

assign in_last_V_0_vld_out = in_last_V_0_state[1'd0];

assign in_local_V_1_fu_677_p2 = (and_ln203_2_fu_672_p2 | and_ln203_1_fu_666_p2);

assign in_r_TREADY = in_last_V_0_state[1'd1];

assign ireg_V_fu_277_p1 = grp_fu_243_p1;

assign is_last_fu_271_p2 = (in_last_V_0_data_out | ap_phi_mux_is_last_0_phi_fu_204_p4);


always @ (p_Result_15_fu_777_p3) begin
    if (p_Result_15_fu_777_p3[0] == 1'b1) begin
        l_fu_785_p3 = 32'd0;
    end else if (p_Result_15_fu_777_p3[1] == 1'b1) begin
        l_fu_785_p3 = 32'd1;
    end else if (p_Result_15_fu_777_p3[2] == 1'b1) begin
        l_fu_785_p3 = 32'd2;
    end else if (p_Result_15_fu_777_p3[3] == 1'b1) begin
        l_fu_785_p3 = 32'd3;
    end else if (p_Result_15_fu_777_p3[4] == 1'b1) begin
        l_fu_785_p3 = 32'd4;
    end else if (p_Result_15_fu_777_p3[5] == 1'b1) begin
        l_fu_785_p3 = 32'd5;
    end else if (p_Result_15_fu_777_p3[6] == 1'b1) begin
        l_fu_785_p3 = 32'd6;
    end else if (p_Result_15_fu_777_p3[7] == 1'b1) begin
        l_fu_785_p3 = 32'd7;
    end else if (p_Result_15_fu_777_p3[8] == 1'b1) begin
        l_fu_785_p3 = 32'd8;
    end else if (p_Result_15_fu_777_p3[9] == 1'b1) begin
        l_fu_785_p3 = 32'd9;
    end else if (p_Result_15_fu_777_p3[10] == 1'b1) begin
        l_fu_785_p3 = 32'd10;
    end else if (p_Result_15_fu_777_p3[11] == 1'b1) begin
        l_fu_785_p3 = 32'd11;
    end else if (p_Result_15_fu_777_p3[12] == 1'b1) begin
        l_fu_785_p3 = 32'd12;
    end else if (p_Result_15_fu_777_p3[13] == 1'b1) begin
        l_fu_785_p3 = 32'd13;
    end else if (p_Result_15_fu_777_p3[14] == 1'b1) begin
        l_fu_785_p3 = 32'd14;
    end else if (p_Result_15_fu_777_p3[15] == 1'b1) begin
        l_fu_785_p3 = 32'd15;
    end else if (p_Result_15_fu_777_p3[16] == 1'b1) begin
        l_fu_785_p3 = 32'd16;
    end else if (p_Result_15_fu_777_p3[17] == 1'b1) begin
        l_fu_785_p3 = 32'd17;
    end else if (p_Result_15_fu_777_p3[18] == 1'b1) begin
        l_fu_785_p3 = 32'd18;
    end else if (p_Result_15_fu_777_p3[19] == 1'b1) begin
        l_fu_785_p3 = 32'd19;
    end else if (p_Result_15_fu_777_p3[20] == 1'b1) begin
        l_fu_785_p3 = 32'd20;
    end else if (p_Result_15_fu_777_p3[21] == 1'b1) begin
        l_fu_785_p3 = 32'd21;
    end else if (p_Result_15_fu_777_p3[22] == 1'b1) begin
        l_fu_785_p3 = 32'd22;
    end else if (p_Result_15_fu_777_p3[23] == 1'b1) begin
        l_fu_785_p3 = 32'd23;
    end else if (p_Result_15_fu_777_p3[24] == 1'b1) begin
        l_fu_785_p3 = 32'd24;
    end else if (p_Result_15_fu_777_p3[25] == 1'b1) begin
        l_fu_785_p3 = 32'd25;
    end else if (p_Result_15_fu_777_p3[26] == 1'b1) begin
        l_fu_785_p3 = 32'd26;
    end else if (p_Result_15_fu_777_p3[27] == 1'b1) begin
        l_fu_785_p3 = 32'd27;
    end else if (p_Result_15_fu_777_p3[28] == 1'b1) begin
        l_fu_785_p3 = 32'd28;
    end else if (p_Result_15_fu_777_p3[29] == 1'b1) begin
        l_fu_785_p3 = 32'd29;
    end else if (p_Result_15_fu_777_p3[30] == 1'b1) begin
        l_fu_785_p3 = 32'd30;
    end else if (p_Result_15_fu_777_p3[31] == 1'b1) begin
        l_fu_785_p3 = 32'd31;
    end else begin
        l_fu_785_p3 = 32'd32;
    end
end

assign lsb_index_fu_816_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_reg_1279));

assign lshr_ln203_fu_631_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> zext_ln203_5_fu_615_p1;

assign lshr_ln947_fu_834_p2 = 16'd65535 >> zext_ln947_fu_831_p1;

assign m_1_fu_944_p3 = ((icmp_ln958_reg_1337_pp1_iter5_reg[0:0] === 1'b1) ? zext_ln958_fu_941_p1 : shl_ln958_reg_1352);

assign m_2_fu_953_p2 = (m_1_fu_944_p3 + zext_ln961_fu_950_p1);

assign m_6_fu_984_p1 = m_5_reg_1357_pp1_iter7_reg;

assign man_V_1_fu_321_p2 = (54'd0 - p_Result_13_fu_317_p1);

assign man_V_2_fu_327_p3 = ((p_Result_12_reg_1069[0:0] === 1'b1) ? man_V_1_fu_321_p2 : p_Result_13_fu_317_p1);

assign or_ln581_fu_465_p2 = (or_ln582_fu_432_p2 | icmp_ln581_reg_1095);

assign or_ln582_fu_432_p2 = (icmp_ln582_reg_1107 | icmp_ln571_reg_1089);

assign or_ln603_1_fu_505_p2 = (and_ln585_reg_1134 | and_ln582_fu_500_p2);

assign or_ln603_2_fu_510_p2 = (or_ln603_reg_1144 | or_ln603_1_fu_505_p2);

assign or_ln603_fu_482_p2 = (and_ln603_fu_476_p2 | and_ln585_1_fu_459_p2);

assign or_ln949_fu_902_p2 = (and_ln949_fu_896_p2 | a_fu_866_p2);

assign or_ln_fu_908_p3 = {{31'd0}, {or_ln949_fu_902_p2}};

assign out_data_1_ack_in = out_data_1_state[1'd1];

assign out_data_1_ack_out = out_r_TREADY;

assign out_data_1_load_A = (out_data_1_state_cmp_full & ~out_data_1_sel_wr);

assign out_data_1_load_B = (out_data_1_state_cmp_full & out_data_1_sel_wr);

assign out_data_1_sel = out_data_1_sel_rd;

assign out_data_1_state_cmp_full = ((out_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_1_vld_out = out_data_1_state[1'd0];

assign out_last_V_1_ack_in = out_last_V_1_state[1'd1];

assign out_last_V_1_ack_out = out_r_TREADY;

assign out_last_V_1_load_A = (out_last_V_1_state_cmp_full & ~out_last_V_1_sel_wr);

assign out_last_V_1_load_B = (out_last_V_1_state_cmp_full & out_last_V_1_sel_wr);

assign out_last_V_1_sel = out_last_V_1_sel_rd;

assign out_last_V_1_state_cmp_full = ((out_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_last_V_1_vld_out = out_last_V_1_state[1'd0];

assign out_r_TDATA = out_data_1_data_out;

assign out_r_TLAST = out_last_V_1_data_out;

assign out_r_TVALID = out_last_V_1_state[1'd0];

assign p_Result_10_fu_840_p2 = (tmp_V_4_reg_1261_pp1_iter2_reg & lshr_ln947_fu_834_p2);

assign p_Result_13_fu_317_p1 = tmp_s_fu_310_p3;

assign p_Result_15_fu_777_p3 = {{16'd65535}, {p_Result_s_fu_767_p4}};

assign p_Result_16_fu_1004_p5 = {{m_6_fu_984_p1[63:32]}, {tmp_3_fu_997_p3}, {m_6_fu_984_p1[22:0]}};

assign p_Result_4_fu_889_p3 = tmp_V_4_reg_1261_pp1_iter3_reg[add_ln949_fu_884_p2];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_762_p3) begin
    for (ap_tvar_int_0 = 16 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 15 - 0) begin
            p_Result_s_fu_767_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_767_p4[ap_tvar_int_0] = tmp_V_4_fu_762_p3[15 - ap_tvar_int_0];
        end
    end
end

assign select_ln203_1_fu_587_p3 = ((icmp_ln203_reg_1180[0:0] === 1'b1) ? zext_ln203_1_fu_567_p1 : zext_ln203_fu_564_p1);

assign select_ln203_2_fu_594_p3 = ((icmp_ln203_reg_1180[0:0] === 1'b1) ? xor_ln203_fu_574_p2 : zext_ln203_fu_564_p1);

assign select_ln203_3_fu_655_p3 = ((icmp_ln203_reg_1180_pp0_iter7_reg[0:0] === 1'b1) ? tmp_467_fu_646_p4 : shl_ln203_reg_1188);

assign select_ln203_fu_580_p3 = ((icmp_ln203_reg_1180[0:0] === 1'b1) ? zext_ln203_fu_564_p1 : zext_ln203_1_fu_567_p1);

assign select_ln588_fu_424_p3 = ((tmp_466_fu_416_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln603_1_fu_488_p3 = ((and_ln585_fu_453_p2[0:0] === 1'b1) ? select_ln588_fu_424_p3 : trunc_ln583_reg_1113);

assign select_ln603_2_fu_533_p3 = ((or_ln603_reg_1144_pp0_iter5_reg[0:0] === 1'b1) ? select_ln603_fu_526_p3 : select_ln603_1_reg_1150_pp0_iter5_reg);

assign select_ln603_3_fu_558_p3 = ((or_ln603_2_reg_1160_pp0_iter6_reg[0:0] === 1'b1) ? select_ln603_2_reg_1165 : 16'd0);

assign select_ln603_fu_526_p3 = ((and_ln603_reg_1139_pp0_iter5_reg[0:0] === 1'b1) ? shl_ln604_fu_521_p2 : trunc_ln586_fu_515_p1);

assign select_ln935_fu_1024_p3 = ((icmp_ln935_reg_1256_pp1_iter7_reg[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_1020_p1);

assign select_ln964_fu_977_p3 = ((tmp_471_reg_1362[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sext_ln581_fu_391_p1 = sh_amt_reg_1101;

assign sext_ln581cast_fu_518_p1 = sext_ln581_reg_1124_pp0_iter5_reg[15:0];

assign sh_amt_fu_363_p3 = ((icmp_ln581_fu_345_p2[0:0] === 1'b1) ? add_ln581_fu_351_p2 : sub_ln581_fu_357_p2);

assign shl_ln203_1_fu_625_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 << zext_ln203_4_fu_611_p1;

assign shl_ln203_fu_619_p2 = zext_ln203_2_fu_570_p1 << zext_ln203_3_fu_607_p1;

assign shl_ln604_fu_521_p2 = trunc_ln583_reg_1113_pp0_iter5_reg << sext_ln581cast_fu_518_p1;

assign shl_ln_fu_539_p3 = {{trunc_ln203_reg_1054_pp0_iter5_reg}, {4'd0}};

assign sub_ln581_fu_357_p2 = (12'd10 - F2_fu_339_p2);

assign sub_ln944_fu_797_p2 = (32'd16 - l_reg_1269);

assign sub_ln947_fu_810_p2 = (5'd9 - trunc_ln947_fu_806_p1);

assign sub_ln958_fu_856_p2 = (32'd25 - sub_ln944_reg_1279);

assign sub_ln964_fu_987_p2 = (8'd6 - trunc_ln943_reg_1274_pp1_iter7_reg);

assign tmp_3_fu_997_p3 = {{p_Result_14_reg_1240_pp1_iter7_reg}, {add_ln964_fu_992_p2}};

assign tmp_466_fu_416_p3 = bitcast_ln696_fu_413_p1[32'd31];

integer ap_tvar_int_1;

always @ (shl_ln203_reg_1188) begin
    for (ap_tvar_int_1 = 256 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 255 - 0) begin
            tmp_467_fu_646_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_467_fu_646_p4[ap_tvar_int_1] = shl_ln203_reg_1188[255 - ap_tvar_int_1];
        end
    end
end

assign tmp_470_fu_871_p3 = lsb_index_reg_1296[32'd31];

assign tmp_V_4_fu_762_p3 = ((p_Result_14_reg_1240[0:0] === 1'b1) ? tmp_V_reg_1246 : tmp_V_3_reg_1234);

assign tmp_V_fu_739_p2 = (16'd0 - tmp_V_3_fu_720_p7);

assign tmp_s_fu_310_p3 = {{1'd1}, {trunc_ln565_reg_1079}};

assign trunc_ln203_fu_267_p1 = i_0_reg_212[3:0];

assign trunc_ln556_fu_281_p1 = ireg_V_fu_277_p1[62:0];

assign trunc_ln565_fu_303_p1 = ireg_V_fu_277_p1[51:0];

assign trunc_ln583_fu_377_p1 = man_V_2_fu_327_p3[15:0];

assign trunc_ln586_fu_515_p1 = ashr_ln586_reg_1155[15:0];

assign trunc_ln738_fu_1016_p1 = p_Result_16_fu_1004_p5[31:0];

assign trunc_ln943_fu_793_p1 = l_fu_785_p3[7:0];

assign trunc_ln944_fu_802_p1 = sub_ln944_fu_797_p2[15:0];

assign trunc_ln947_fu_806_p1 = sub_ln944_fu_797_p2[4:0];

assign xor_ln203_1_fu_601_p2 = (select_ln203_fu_580_p3 ^ 9'd255);

assign xor_ln203_2_fu_661_p2 = (256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 ^ and_ln203_reg_1194);

assign xor_ln203_fu_574_p2 = (zext_ln203_fu_564_p1 ^ 9'd255);

assign xor_ln571_fu_495_p2 = (icmp_ln571_reg_1089_pp0_iter4_reg ^ 1'd1);

assign xor_ln581_fu_470_p2 = (or_ln581_fu_465_p2 ^ 1'd1);

assign xor_ln582_fu_436_p2 = (or_ln582_fu_432_p2 ^ 1'd1);

assign xor_ln585_fu_447_p2 = (icmp_ln585_fu_394_p2 ^ 1'd1);

assign xor_ln949_fu_878_p2 = (tmp_470_fu_871_p3 ^ 1'd1);

assign zext_ln203_1_fu_567_p1 = empty_42_reg_1175;

assign zext_ln203_2_fu_570_p1 = select_ln603_3_fu_558_p3;

assign zext_ln203_3_fu_607_p1 = select_ln203_2_fu_594_p3;

assign zext_ln203_4_fu_611_p1 = select_ln203_1_fu_587_p3;

assign zext_ln203_5_fu_615_p1 = xor_ln203_1_fu_601_p2;

assign zext_ln203_fu_564_p1 = shl_ln_reg_1170;

assign zext_ln461_fu_307_p1 = exp_tmp_V_reg_1074;

assign zext_ln947_fu_831_p1 = sub_ln947_reg_1291;

assign zext_ln958_fu_941_p1 = lshr_ln958_reg_1347;

assign zext_ln961_fu_950_p1 = or_ln_reg_1322_pp1_iter5_reg;

always @ (posedge ap_clk) begin
    shl_ln_reg_1170[3:0] <= 4'b0000;
    empty_42_reg_1175[3:0] <= 4'b1111;
    or_ln_reg_1322[31:1] <= 31'b0000000000000000000000000000000;
    or_ln_reg_1322_pp1_iter5_reg[31:1] <= 31'b0000000000000000000000000000000;
    select_ln964_reg_1367[7:1] <= 7'b0111111;
end

endmodule //myproject_axi
