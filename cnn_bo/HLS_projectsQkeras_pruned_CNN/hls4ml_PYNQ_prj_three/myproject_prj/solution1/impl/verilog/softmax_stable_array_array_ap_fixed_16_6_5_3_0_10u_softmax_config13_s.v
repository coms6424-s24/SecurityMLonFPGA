// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_blk_n,
        res_V_data_1_V_blk_n,
        res_V_data_2_V_blk_n,
        res_V_data_3_V_blk_n,
        res_V_data_4_V_blk_n,
        res_V_data_5_V_blk_n,
        res_V_data_6_V_blk_n,
        res_V_data_7_V_blk_n,
        res_V_data_8_V_blk_n,
        res_V_data_9_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 10'd1;
parameter    ap_ST_fsm_pp0_stage1 = 10'd2;
parameter    ap_ST_fsm_pp0_stage2 = 10'd4;
parameter    ap_ST_fsm_pp0_stage3 = 10'd8;
parameter    ap_ST_fsm_pp0_stage4 = 10'd16;
parameter    ap_ST_fsm_pp0_stage5 = 10'd32;
parameter    ap_ST_fsm_pp0_stage6 = 10'd64;
parameter    ap_ST_fsm_pp0_stage7 = 10'd128;
parameter    ap_ST_fsm_pp0_stage8 = 10'd256;
parameter    ap_ST_fsm_pp0_stage9 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_blk_n;
output   res_V_data_1_V_blk_n;
output   res_V_data_2_V_blk_n;
output   res_V_data_3_V_blk_n;
output   res_V_data_4_V_blk_n;
output   res_V_data_5_V_blk_n;
output   res_V_data_6_V_blk_n;
output   res_V_data_7_V_blk_n;
output   res_V_data_8_V_blk_n;
output   res_V_data_9_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_blk_n;
reg res_V_data_1_V_blk_n;
reg res_V_data_2_V_blk_n;
reg res_V_data_3_V_blk_n;
reg res_V_data_4_V_blk_n;
reg res_V_data_5_V_blk_n;
reg res_V_data_6_V_blk_n;
reg res_V_data_7_V_blk_n;
reg res_V_data_8_V_blk_n;
reg res_V_data_9_V_blk_n;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state20_pp0_stage9_iter1;
wire    ap_block_state30_pp0_stage9_iter2;
wire    ap_block_state40_pp0_stage9_iter3;
wire    ap_block_pp0_stage9_11001;
reg   [7:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [7:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire    io_acc_block_signal_op52;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state21_pp0_stage0_iter2;
wire    ap_block_state31_pp0_stage0_iter3;
wire    io_acc_block_signal_op402;
reg    ap_block_state41_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] data_array_0_V_reg_1737;
reg  signed [15:0] data_array_1_V_reg_1744;
reg  signed [15:0] data_array_2_V_reg_1751;
reg  signed [15:0] data_array_3_V_reg_1758;
reg  signed [15:0] data_array_4_V_reg_1765;
reg  signed [15:0] data_array_5_V_reg_1772;
reg  signed [15:0] data_array_6_V_reg_1779;
reg  signed [15:0] data_array_7_V_reg_1786;
reg  signed [15:0] data_array_8_V_reg_1793;
reg  signed [15:0] data_array_9_V_reg_1800;
wire   [0:0] icmp_ln1496_fu_427_p2;
reg   [0:0] icmp_ln1496_reg_1807;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_state22_pp0_stage1_iter2;
wire    ap_block_state32_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln1496_1_fu_431_p2;
reg   [0:0] icmp_ln1496_1_reg_1812;
wire   [0:0] icmp_ln1496_3_fu_435_p2;
reg   [0:0] icmp_ln1496_3_reg_1817;
wire   [0:0] icmp_ln1496_4_fu_439_p2;
reg   [0:0] icmp_ln1496_4_reg_1822;
wire   [15:0] select_ln65_2_fu_459_p3;
reg   [15:0] select_ln65_2_reg_1827;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_state23_pp0_stage2_iter2;
wire    ap_block_state33_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire   [15:0] select_ln65_5_fu_483_p3;
reg   [15:0] select_ln65_5_reg_1833;
wire   [15:0] select_ln65_6_fu_495_p3;
reg   [15:0] select_ln65_6_reg_1839;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_state24_pp0_stage3_iter2;
wire    ap_block_state34_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
wire   [0:0] icmp_ln1496_7_fu_501_p2;
reg   [0:0] icmp_ln1496_7_reg_1845;
wire   [15:0] x_max_V_fu_515_p3;
reg   [15:0] x_max_V_reg_1850;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_state25_pp0_stage4_iter2;
wire    ap_block_state35_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] tmp_21_reg_1855;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_state26_pp0_stage5_iter2;
wire    ap_block_state36_pp0_stage5_iter3;
wire    ap_block_pp0_stage5_11001;
reg   [0:0] tmp_22_reg_1862;
reg   [0:0] tmp_23_reg_1869;
reg   [0:0] tmp_24_reg_1876;
reg   [0:0] tmp_25_reg_1883;
reg   [0:0] tmp_26_reg_1890;
reg   [0:0] tmp_27_reg_1897;
reg   [0:0] tmp_28_reg_1904;
reg   [0:0] tmp_29_reg_1911;
reg   [0:0] tmp_30_reg_1918;
reg   [0:0] tmp_31_reg_1925;
reg   [0:0] tmp_32_reg_1932;
reg   [0:0] tmp_33_reg_1939;
reg   [0:0] tmp_34_reg_1946;
reg   [0:0] tmp_35_reg_1953;
reg   [0:0] tmp_36_reg_1960;
reg   [0:0] tmp_37_reg_1967;
reg   [0:0] tmp_38_reg_1974;
reg   [0:0] tmp_39_reg_1981;
reg   [0:0] tmp_40_reg_1988;
reg   [7:0] tmp_reg_1995;
reg   [7:0] tmp_11_reg_2001;
reg   [7:0] tmp_12_reg_2007;
reg   [7:0] tmp_13_reg_2013;
reg   [7:0] tmp_14_reg_2019;
reg   [7:0] tmp_15_reg_2025;
reg   [7:0] tmp_16_reg_2031;
reg   [7:0] tmp_17_reg_2037;
reg   [7:0] tmp_18_reg_2043;
reg   [7:0] tmp_19_reg_2049;
wire   [7:0] y_V_fu_1129_p3;
reg   [7:0] y_V_reg_2055;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state17_pp0_stage6_iter1;
wire    ap_block_state27_pp0_stage6_iter2;
wire    ap_block_state37_pp0_stage6_iter3;
wire    ap_block_pp0_stage6_11001;
wire   [7:0] y_V_1_fu_1151_p3;
reg   [7:0] y_V_1_reg_2060;
wire   [7:0] y_V_2_fu_1173_p3;
reg   [7:0] y_V_2_reg_2065;
wire   [7:0] y_V_3_fu_1195_p3;
reg   [7:0] y_V_3_reg_2070;
wire   [7:0] y_V_4_fu_1217_p3;
reg   [7:0] y_V_4_reg_2075;
wire   [7:0] y_V_5_fu_1239_p3;
reg   [7:0] y_V_5_reg_2080;
wire   [7:0] y_V_6_fu_1261_p3;
reg   [7:0] y_V_6_reg_2085;
wire   [7:0] y_V_7_fu_1283_p3;
reg   [7:0] y_V_7_reg_2090;
wire   [7:0] y_V_8_fu_1305_p3;
reg   [7:0] y_V_8_reg_2095;
wire   [7:0] y_V_9_fu_1327_p3;
reg   [7:0] y_V_9_reg_2100;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state18_pp0_stage7_iter1;
wire    ap_block_state28_pp0_stage7_iter2;
wire    ap_block_state38_pp0_stage7_iter3;
wire    ap_block_pp0_stage7_11001;
reg   [16:0] exp_res_0_V_1_reg_2110;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state19_pp0_stage8_iter1;
wire    ap_block_state29_pp0_stage8_iter2;
wire    ap_block_state39_pp0_stage8_iter3;
wire    ap_block_pp0_stage8_11001;
reg   [16:0] exp_res_0_V_1_reg_2110_pp0_iter1_reg;
reg   [16:0] exp_res_0_V_1_reg_2110_pp0_iter2_reg;
reg   [16:0] exp_res_1_V_1_reg_2121;
reg   [16:0] exp_res_1_V_1_reg_2121_pp0_iter1_reg;
reg   [16:0] exp_res_1_V_1_reg_2121_pp0_iter2_reg;
reg   [16:0] exp_res_2_V_1_reg_2132;
reg   [16:0] exp_res_2_V_1_reg_2132_pp0_iter2_reg;
reg   [16:0] exp_res_2_V_1_reg_2132_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_1_reg_2143;
reg   [16:0] exp_res_3_V_1_reg_2143_pp0_iter2_reg;
reg   [16:0] exp_res_3_V_1_reg_2143_pp0_iter3_reg;
reg   [16:0] exp_res_4_V_1_reg_2154;
reg   [16:0] exp_res_4_V_1_reg_2154_pp0_iter2_reg;
reg   [16:0] exp_res_4_V_1_reg_2154_pp0_iter3_reg;
reg   [16:0] exp_res_5_V_1_reg_2165;
reg   [16:0] exp_res_5_V_1_reg_2165_pp0_iter2_reg;
reg   [16:0] exp_res_5_V_1_reg_2165_pp0_iter3_reg;
reg   [16:0] exp_res_6_V_1_reg_2176;
reg   [16:0] exp_res_6_V_1_reg_2176_pp0_iter2_reg;
reg   [16:0] exp_res_6_V_1_reg_2176_pp0_iter3_reg;
reg   [16:0] exp_res_7_V_1_reg_2186;
reg   [16:0] exp_res_7_V_1_reg_2186_pp0_iter2_reg;
reg   [16:0] exp_res_7_V_1_reg_2186_pp0_iter3_reg;
reg   [16:0] exp_res_8_V_1_reg_2196;
reg   [16:0] exp_res_8_V_1_reg_2196_pp0_iter2_reg;
reg   [16:0] exp_res_8_V_1_reg_2196_pp0_iter3_reg;
reg   [16:0] exp_res_9_V_1_reg_2208;
reg   [16:0] exp_res_9_V_1_reg_2208_pp0_iter2_reg;
reg   [16:0] exp_res_9_V_1_reg_2208_pp0_iter3_reg;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_return;
reg  signed [17:0] p_Val2_19_reg_2215;
reg  signed [17:0] p_Val2_1_reg_2221;
wire  signed [17:0] p_Val2_26_fu_1497_p3;
reg  signed [17:0] p_Val2_26_reg_2227;
wire   [16:0] p_Val2_27_fu_1529_p3;
reg   [16:0] p_Val2_27_reg_2233;
reg   [0:0] p_Result_20_reg_2239;
reg   [0:0] p_Result_21_reg_2246;
reg   [7:0] tmp_20_reg_2253;
wire   [7:0] y_V_10_fu_1621_p3;
reg   [7:0] y_V_10_reg_2259;
reg   [17:0] inv_exp_sum_V_reg_2269;
wire  signed [25:0] sext_ln241_fu_1633_p1;
reg  signed [25:0] sext_ln241_reg_2274;
wire   [25:0] zext_ln1118_fu_1637_p1;
reg   [15:0] tmp_data_0_V_reg_2284;
wire   [25:0] zext_ln1118_1_fu_1641_p1;
reg   [15:0] tmp_data_1_V_reg_2294;
wire   [25:0] zext_ln1118_2_fu_1645_p1;
reg   [15:0] tmp_data_2_V_reg_2304;
wire   [25:0] zext_ln1118_3_fu_1649_p1;
reg   [15:0] tmp_data_3_V_reg_2314;
wire   [25:0] zext_ln1118_4_fu_1653_p1;
reg   [15:0] tmp_data_4_V_reg_2324;
wire   [25:0] zext_ln1118_5_fu_1657_p1;
reg   [15:0] tmp_data_5_V_reg_2334;
wire   [25:0] zext_ln1118_6_fu_1661_p1;
reg   [15:0] tmp_data_6_V_reg_2344;
wire   [25:0] zext_ln1118_7_fu_1665_p1;
reg   [15:0] tmp_data_7_V_reg_2354;
wire   [25:0] zext_ln1118_8_fu_1669_p1;
reg   [15:0] tmp_data_8_V_reg_2364;
wire   [25:0] zext_ln1118_9_fu_1673_p1;
reg   [15:0] tmp_data_9_V_reg_2374;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage0_subdone;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_done;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_idle;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_ready;
reg   [4:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_x_V_offset;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_ce;
wire    ap_block_state9_pp0_stage8_iter0_ignore_call233;
wire    ap_block_state19_pp0_stage8_iter1_ignore_call233;
wire    ap_block_state29_pp0_stage8_iter2_ignore_call233;
wire    ap_block_state39_pp0_stage8_iter3_ignore_call233;
wire    ap_block_pp0_stage8_11001_ignoreCallOp262;
wire    ap_block_state10_pp0_stage9_iter0_ignore_call233;
wire    ap_block_state20_pp0_stage9_iter1_ignore_call233;
wire    ap_block_state30_pp0_stage9_iter2_ignore_call233;
wire    ap_block_state40_pp0_stage9_iter3_ignore_call233;
wire    ap_block_pp0_stage9_11001_ignoreCallOp263;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call233;
wire    ap_block_state11_pp0_stage0_iter1_ignore_call233;
wire    ap_block_state21_pp0_stage0_iter2_ignore_call233;
wire    ap_block_state31_pp0_stage0_iter3_ignore_call233;
reg    ap_block_state41_pp0_stage0_iter4_ignore_call233;
reg    ap_block_pp0_stage0_11001_ignoreCallOp264;
wire    ap_block_state2_pp0_stage1_iter0_ignore_call234;
wire    ap_block_state12_pp0_stage1_iter1_ignore_call234;
wire    ap_block_state22_pp0_stage1_iter2_ignore_call234;
wire    ap_block_state32_pp0_stage1_iter3_ignore_call234;
wire    ap_block_pp0_stage1_11001_ignoreCallOp265;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call234;
wire    ap_block_state13_pp0_stage2_iter1_ignore_call234;
wire    ap_block_state23_pp0_stage2_iter2_ignore_call234;
wire    ap_block_state33_pp0_stage2_iter3_ignore_call234;
wire    ap_block_pp0_stage2_11001_ignoreCallOp266;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call234;
wire    ap_block_state14_pp0_stage3_iter1_ignore_call234;
wire    ap_block_state24_pp0_stage3_iter2_ignore_call234;
wire    ap_block_state34_pp0_stage3_iter3_ignore_call234;
wire    ap_block_pp0_stage3_11001_ignoreCallOp267;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start_reg;
reg   [16:0] exp_res_0_V_fu_126;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage1;
reg   [16:0] exp_res_1_V_fu_130;
reg   [16:0] exp_res_2_V_fu_134;
reg   [16:0] exp_res_3_V_fu_138;
reg   [16:0] exp_res_4_V_fu_142;
reg   [16:0] exp_res_5_V_fu_146;
reg   [16:0] exp_res_6_V_fu_150;
reg   [16:0] exp_res_7_V_fu_154;
reg   [16:0] exp_res_8_V_fu_158;
reg   [16:0] exp_res_9_V_fu_162;
wire   [63:0] zext_ln225_fu_1335_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln225_1_fu_1339_p1;
wire   [63:0] zext_ln225_2_fu_1343_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln225_3_fu_1347_p1;
wire   [63:0] zext_ln225_4_fu_1351_p1;
wire   [63:0] zext_ln225_5_fu_1355_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln225_6_fu_1359_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln225_7_fu_1392_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln225_8_fu_1401_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln225_9_fu_1410_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln235_fu_1629_p1;
reg    ap_block_pp0_stage0_01001;
reg   [16:0] grp_fu_322_p0;
reg  signed [17:0] grp_fu_322_p1;
wire   [25:0] grp_fu_322_p2;
wire   [15:0] select_ln65_fu_443_p3;
wire   [15:0] select_ln65_1_fu_448_p3;
wire   [0:0] icmp_ln1496_2_fu_453_p2;
wire   [15:0] select_ln65_3_fu_467_p3;
wire   [15:0] select_ln65_4_fu_472_p3;
wire   [0:0] icmp_ln1496_5_fu_477_p2;
wire   [0:0] icmp_ln1496_6_fu_491_p2;
wire   [15:0] select_ln65_7_fu_505_p3;
wire   [0:0] icmp_ln1496_8_fu_510_p2;
wire  signed [16:0] sext_ln703_fu_522_p1;
wire  signed [16:0] sext_ln703_1_fu_525_p1;
wire   [16:0] sub_ln1193_fu_528_p2;
wire  signed [16:0] sext_ln703_2_fu_550_p1;
wire   [16:0] sub_ln1193_1_fu_553_p2;
wire  signed [16:0] sext_ln703_3_fu_575_p1;
wire   [16:0] sub_ln1193_2_fu_578_p2;
wire  signed [16:0] sext_ln703_4_fu_600_p1;
wire   [16:0] sub_ln1193_3_fu_603_p2;
wire  signed [16:0] sext_ln703_5_fu_625_p1;
wire   [16:0] sub_ln1193_4_fu_628_p2;
wire  signed [16:0] sext_ln703_6_fu_650_p1;
wire   [16:0] sub_ln1193_5_fu_653_p2;
wire  signed [16:0] sext_ln703_7_fu_675_p1;
wire   [16:0] sub_ln1193_6_fu_678_p2;
wire  signed [16:0] sext_ln703_8_fu_700_p1;
wire   [16:0] sub_ln1193_7_fu_703_p2;
wire  signed [16:0] sext_ln703_9_fu_725_p1;
wire   [16:0] sub_ln1193_8_fu_728_p2;
wire  signed [16:0] sext_ln703_10_fu_750_p1;
wire   [16:0] sub_ln1193_9_fu_753_p2;
wire   [0:0] xor_ln786_fu_875_p2;
wire   [0:0] xor_ln340_fu_889_p2;
wire   [0:0] xor_ln786_1_fu_899_p2;
wire   [0:0] xor_ln340_1_fu_913_p2;
wire   [0:0] xor_ln786_2_fu_923_p2;
wire   [0:0] xor_ln340_2_fu_937_p2;
wire   [0:0] xor_ln786_3_fu_947_p2;
wire   [0:0] xor_ln340_3_fu_961_p2;
wire   [0:0] xor_ln786_4_fu_971_p2;
wire   [0:0] xor_ln340_4_fu_985_p2;
wire   [0:0] xor_ln786_5_fu_995_p2;
wire   [0:0] xor_ln340_5_fu_1009_p2;
wire   [0:0] xor_ln786_6_fu_1019_p2;
wire   [0:0] xor_ln340_6_fu_1033_p2;
wire   [0:0] xor_ln786_7_fu_1043_p2;
wire   [0:0] xor_ln340_7_fu_1057_p2;
wire   [0:0] xor_ln786_8_fu_1067_p2;
wire   [0:0] xor_ln340_8_fu_1081_p2;
wire   [0:0] xor_ln786_9_fu_1091_p2;
wire   [0:0] xor_ln340_9_fu_1105_p2;
wire   [0:0] xor_ln340_10_fu_885_p2;
wire   [0:0] and_ln786_fu_880_p2;
wire   [0:0] or_ln340_fu_894_p2;
wire   [7:0] select_ln340_fu_1115_p3;
wire   [7:0] select_ln388_fu_1122_p3;
wire   [0:0] xor_ln340_11_fu_909_p2;
wire   [0:0] and_ln786_1_fu_904_p2;
wire   [0:0] or_ln340_1_fu_918_p2;
wire   [7:0] select_ln340_2_fu_1137_p3;
wire   [7:0] select_ln388_1_fu_1144_p3;
wire   [0:0] xor_ln340_12_fu_933_p2;
wire   [0:0] and_ln786_2_fu_928_p2;
wire   [0:0] or_ln340_2_fu_942_p2;
wire   [7:0] select_ln340_4_fu_1159_p3;
wire   [7:0] select_ln388_2_fu_1166_p3;
wire   [0:0] xor_ln340_13_fu_957_p2;
wire   [0:0] and_ln786_3_fu_952_p2;
wire   [0:0] or_ln340_3_fu_966_p2;
wire   [7:0] select_ln340_6_fu_1181_p3;
wire   [7:0] select_ln388_3_fu_1188_p3;
wire   [0:0] xor_ln340_14_fu_981_p2;
wire   [0:0] and_ln786_4_fu_976_p2;
wire   [0:0] or_ln340_4_fu_990_p2;
wire   [7:0] select_ln340_8_fu_1203_p3;
wire   [7:0] select_ln388_4_fu_1210_p3;
wire   [0:0] xor_ln340_15_fu_1005_p2;
wire   [0:0] and_ln786_5_fu_1000_p2;
wire   [0:0] or_ln340_5_fu_1014_p2;
wire   [7:0] select_ln340_10_fu_1225_p3;
wire   [7:0] select_ln388_5_fu_1232_p3;
wire   [0:0] xor_ln340_16_fu_1029_p2;
wire   [0:0] and_ln786_6_fu_1024_p2;
wire   [0:0] or_ln340_6_fu_1038_p2;
wire   [7:0] select_ln340_12_fu_1247_p3;
wire   [7:0] select_ln388_6_fu_1254_p3;
wire   [0:0] xor_ln340_17_fu_1053_p2;
wire   [0:0] and_ln786_7_fu_1048_p2;
wire   [0:0] or_ln340_7_fu_1062_p2;
wire   [7:0] select_ln340_14_fu_1269_p3;
wire   [7:0] select_ln388_7_fu_1276_p3;
wire   [0:0] xor_ln340_18_fu_1077_p2;
wire   [0:0] and_ln786_8_fu_1072_p2;
wire   [0:0] or_ln340_8_fu_1086_p2;
wire   [7:0] select_ln340_16_fu_1291_p3;
wire   [7:0] select_ln388_8_fu_1298_p3;
wire   [0:0] xor_ln340_19_fu_1101_p2;
wire   [0:0] and_ln786_9_fu_1096_p2;
wire   [0:0] or_ln340_9_fu_1110_p2;
wire   [7:0] select_ln340_18_fu_1313_p3;
wire   [7:0] select_ln388_9_fu_1320_p3;
wire  signed [18:0] lhs_V_fu_1419_p1;
wire  signed [18:0] rhs_V_fu_1422_p1;
wire   [18:0] ret_V_fu_1425_p2;
wire   [17:0] p_Val2_22_fu_1439_p2;
wire   [0:0] p_Result_18_fu_1443_p3;
wire   [0:0] p_Result_s_fu_1431_p3;
wire   [0:0] xor_ln786_10_fu_1451_p2;
wire   [0:0] xor_ln340_21_fu_1469_p2;
wire   [0:0] xor_ln340_20_fu_1463_p2;
wire   [0:0] underflow_fu_1457_p2;
wire   [0:0] or_ln340_10_fu_1475_p2;
wire   [17:0] select_ln340_20_fu_1481_p3;
wire   [17:0] select_ln388_10_fu_1489_p3;
wire   [17:0] p_Val2_24_fu_1508_p1;
wire   [17:0] p_Val2_23_fu_1505_p1;
wire   [17:0] p_Val2_25_fu_1511_p2;
wire   [0:0] p_Result_19_fu_1521_p3;
wire   [16:0] add_ln746_fu_1517_p2;
wire  signed [18:0] lhs_V_1_fu_1540_p1;
wire   [18:0] rhs_V_1_fu_1543_p1;
wire   [18:0] ret_V_1_fu_1546_p2;
wire   [17:0] zext_ln746_fu_1537_p1;
wire   [17:0] p_Val2_29_fu_1560_p2;
wire   [0:0] xor_ln786_11_fu_1583_p2;
wire   [0:0] xor_ln340_23_fu_1597_p2;
wire   [0:0] xor_ln340_22_fu_1593_p2;
wire   [0:0] underflow_1_fu_1588_p2;
wire   [0:0] or_ln340_11_fu_1602_p2;
wire   [7:0] select_ln340_22_fu_1607_p3;
wire   [7:0] select_ln388_11_fu_1614_p3;
reg    grp_fu_322_ce;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_exp_tab7jG #(
    .DataWidth( 17 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_invert_8jQ #(
    .DataWidth( 18 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start),
    .ap_done(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_done),
    .ap_idle(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_idle),
    .ap_ready(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_ready),
    .x_0_V(exp_res_0_V_fu_126),
    .x_1_V(exp_res_1_V_fu_130),
    .x_2_V(exp_res_2_V_fu_134),
    .x_3_V(exp_res_3_V_fu_138),
    .x_4_V(exp_res_4_V_fu_142),
    .x_5_V(exp_res_5_V_fu_146),
    .x_6_V(exp_res_6_V_fu_150),
    .x_7_V(exp_res_7_V_fu_154),
    .x_8_V(exp_res_8_V_fu_158),
    .x_9_V(exp_res_9_V_fu_162),
    .x_V_offset(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_x_V_offset),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_ce)
);

myproject_axi_mul_17ns_18s_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_axi_mul_17ns_18s_26_2_1_U909(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_322_p0),
    .din1(grp_fu_322_p1),
    .ce(grp_fu_322_ce),
    .dout(grp_fu_322_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_ready == 1'b1)) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_array_0_V_reg_1737 <= data_V_data_0_V_dout;
        data_array_1_V_reg_1744 <= data_V_data_1_V_dout;
        data_array_2_V_reg_1751 <= data_V_data_2_V_dout;
        data_array_3_V_reg_1758 <= data_V_data_3_V_dout;
        data_array_4_V_reg_1765 <= data_V_data_4_V_dout;
        data_array_5_V_reg_1772 <= data_V_data_5_V_dout;
        data_array_6_V_reg_1779 <= data_V_data_6_V_dout;
        data_array_7_V_reg_1786 <= data_V_data_7_V_dout;
        data_array_8_V_reg_1793 <= data_V_data_8_V_dout;
        data_array_9_V_reg_1800 <= data_V_data_9_V_dout;
        exp_res_2_V_1_reg_2132_pp0_iter2_reg <= exp_res_2_V_1_reg_2132;
        exp_res_2_V_1_reg_2132_pp0_iter3_reg <= exp_res_2_V_1_reg_2132_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_0_V_1_reg_2110 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        exp_res_0_V_1_reg_2110_pp0_iter1_reg <= exp_res_0_V_1_reg_2110;
        exp_res_0_V_1_reg_2110_pp0_iter2_reg <= exp_res_0_V_1_reg_2110_pp0_iter1_reg;
        inv_exp_sum_V_reg_2269 <= invert_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_res_0_V_fu_126 <= exp_res_0_V_1_reg_2110;
        exp_res_1_V_fu_130 <= exp_res_1_V_1_reg_2121;
        exp_res_2_V_fu_134 <= exp_res_2_V_1_reg_2132;
        exp_res_3_V_fu_138 <= exp_res_3_V_1_reg_2143;
        exp_res_4_V_fu_142 <= exp_res_4_V_1_reg_2154;
        exp_res_5_V_fu_146 <= exp_res_5_V_1_reg_2165;
        exp_res_6_V_1_reg_2176 <= exp_table1_q0;
        exp_res_6_V_fu_150 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_1_V_1_reg_2121 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        exp_res_1_V_1_reg_2121_pp0_iter1_reg <= exp_res_1_V_1_reg_2121;
        exp_res_1_V_1_reg_2121_pp0_iter2_reg <= exp_res_1_V_1_reg_2121_pp0_iter1_reg;
        sext_ln241_reg_2274 <= sext_ln241_fu_1633_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_2_V_1_reg_2132 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_3_V_1_reg_2143 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_3_V_1_reg_2143_pp0_iter2_reg <= exp_res_3_V_1_reg_2143;
        exp_res_3_V_1_reg_2143_pp0_iter3_reg <= exp_res_3_V_1_reg_2143_pp0_iter2_reg;
        icmp_ln1496_1_reg_1812 <= icmp_ln1496_1_fu_431_p2;
        icmp_ln1496_3_reg_1817 <= icmp_ln1496_3_fu_435_p2;
        icmp_ln1496_4_reg_1822 <= icmp_ln1496_4_fu_439_p2;
        icmp_ln1496_reg_1807 <= icmp_ln1496_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_4_V_1_reg_2154 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_4_V_1_reg_2154_pp0_iter2_reg <= exp_res_4_V_1_reg_2154;
        exp_res_4_V_1_reg_2154_pp0_iter3_reg <= exp_res_4_V_1_reg_2154_pp0_iter2_reg;
        select_ln65_2_reg_1827 <= select_ln65_2_fu_459_p3;
        select_ln65_5_reg_1833 <= select_ln65_5_fu_483_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_5_V_1_reg_2165 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_5_V_1_reg_2165_pp0_iter2_reg <= exp_res_5_V_1_reg_2165;
        exp_res_5_V_1_reg_2165_pp0_iter3_reg <= exp_res_5_V_1_reg_2165_pp0_iter2_reg;
        icmp_ln1496_7_reg_1845 <= icmp_ln1496_7_fu_501_p2;
        select_ln65_6_reg_1839 <= select_ln65_6_fu_495_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_res_6_V_1_reg_2176_pp0_iter2_reg <= exp_res_6_V_1_reg_2176;
        exp_res_6_V_1_reg_2176_pp0_iter3_reg <= exp_res_6_V_1_reg_2176_pp0_iter2_reg;
        p_Val2_26_reg_2227 <= p_Val2_26_fu_1497_p3;
        p_Val2_27_reg_2233 <= p_Val2_27_fu_1529_p3;
        x_max_V_reg_1850 <= x_max_V_fu_515_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_res_7_V_1_reg_2186 <= exp_table1_q0;
        exp_res_7_V_fu_154 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_res_7_V_1_reg_2186_pp0_iter2_reg <= exp_res_7_V_1_reg_2186;
        exp_res_7_V_1_reg_2186_pp0_iter3_reg <= exp_res_7_V_1_reg_2186_pp0_iter2_reg;
        p_Result_20_reg_2239 <= ret_V_1_fu_1546_p2[32'd18];
        p_Result_21_reg_2246 <= p_Val2_29_fu_1560_p2[32'd17];
        tmp_11_reg_2001 <= {{sub_ln1193_1_fu_553_p2[15:8]}};
        tmp_12_reg_2007 <= {{sub_ln1193_2_fu_578_p2[15:8]}};
        tmp_13_reg_2013 <= {{sub_ln1193_3_fu_603_p2[15:8]}};
        tmp_14_reg_2019 <= {{sub_ln1193_4_fu_628_p2[15:8]}};
        tmp_15_reg_2025 <= {{sub_ln1193_5_fu_653_p2[15:8]}};
        tmp_16_reg_2031 <= {{sub_ln1193_6_fu_678_p2[15:8]}};
        tmp_17_reg_2037 <= {{sub_ln1193_7_fu_703_p2[15:8]}};
        tmp_18_reg_2043 <= {{sub_ln1193_8_fu_728_p2[15:8]}};
        tmp_19_reg_2049 <= {{sub_ln1193_9_fu_753_p2[15:8]}};
        tmp_20_reg_2253 <= {{p_Val2_29_fu_1560_p2[17:10]}};
        tmp_21_reg_1855 <= sub_ln1193_fu_528_p2[32'd16];
        tmp_22_reg_1862 <= sub_ln1193_fu_528_p2[32'd15];
        tmp_23_reg_1869 <= sub_ln1193_1_fu_553_p2[32'd16];
        tmp_24_reg_1876 <= sub_ln1193_1_fu_553_p2[32'd15];
        tmp_25_reg_1883 <= sub_ln1193_2_fu_578_p2[32'd16];
        tmp_26_reg_1890 <= sub_ln1193_2_fu_578_p2[32'd15];
        tmp_27_reg_1897 <= sub_ln1193_3_fu_603_p2[32'd16];
        tmp_28_reg_1904 <= sub_ln1193_3_fu_603_p2[32'd15];
        tmp_29_reg_1911 <= sub_ln1193_4_fu_628_p2[32'd16];
        tmp_30_reg_1918 <= sub_ln1193_4_fu_628_p2[32'd15];
        tmp_31_reg_1925 <= sub_ln1193_5_fu_653_p2[32'd16];
        tmp_32_reg_1932 <= sub_ln1193_5_fu_653_p2[32'd15];
        tmp_33_reg_1939 <= sub_ln1193_6_fu_678_p2[32'd16];
        tmp_34_reg_1946 <= sub_ln1193_6_fu_678_p2[32'd15];
        tmp_35_reg_1953 <= sub_ln1193_7_fu_703_p2[32'd16];
        tmp_36_reg_1960 <= sub_ln1193_7_fu_703_p2[32'd15];
        tmp_37_reg_1967 <= sub_ln1193_8_fu_728_p2[32'd16];
        tmp_38_reg_1974 <= sub_ln1193_8_fu_728_p2[32'd15];
        tmp_39_reg_1981 <= sub_ln1193_9_fu_753_p2[32'd16];
        tmp_40_reg_1988 <= sub_ln1193_9_fu_753_p2[32'd15];
        tmp_reg_1995 <= {{sub_ln1193_fu_528_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exp_res_8_V_1_reg_2196 <= exp_table1_q0;
        exp_res_8_V_fu_158 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        exp_res_8_V_1_reg_2196_pp0_iter2_reg <= exp_res_8_V_1_reg_2196;
        exp_res_8_V_1_reg_2196_pp0_iter3_reg <= exp_res_8_V_1_reg_2196_pp0_iter2_reg;
        y_V_10_reg_2259 <= y_V_10_fu_1621_p3;
        y_V_1_reg_2060 <= y_V_1_fu_1151_p3;
        y_V_2_reg_2065 <= y_V_2_fu_1173_p3;
        y_V_3_reg_2070 <= y_V_3_fu_1195_p3;
        y_V_4_reg_2075 <= y_V_4_fu_1217_p3;
        y_V_5_reg_2080 <= y_V_5_fu_1239_p3;
        y_V_6_reg_2085 <= y_V_6_fu_1261_p3;
        y_V_7_reg_2090 <= y_V_7_fu_1283_p3;
        y_V_8_reg_2095 <= y_V_8_fu_1305_p3;
        y_V_9_reg_2100 <= y_V_9_fu_1327_p3;
        y_V_reg_2055 <= y_V_fu_1129_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exp_res_9_V_1_reg_2208 <= exp_table1_q0;
        exp_res_9_V_fu_162 <= exp_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        exp_res_9_V_1_reg_2208_pp0_iter2_reg <= exp_res_9_V_1_reg_2208;
        exp_res_9_V_1_reg_2208_pp0_iter3_reg <= exp_res_9_V_1_reg_2208_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_19_reg_2215 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_Val2_1_reg_2221 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_0_V_reg_2284 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_data_1_V_reg_2294 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_data_2_V_reg_2304 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_data_3_V_reg_2314 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_data_4_V_reg_2324 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_data_5_V_reg_2334 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_data_6_V_reg_2344 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_data_7_V_reg_2354 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp_data_8_V_reg_2364 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp_data_9_V_reg_2374 <= {{grp_fu_322_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_9_fu_1410_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_table1_address0 = zext_ln225_8_fu_1401_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_table1_address0 = zext_ln225_7_fu_1392_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_table1_address0 = zext_ln225_6_fu_1359_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_table1_address0 = zext_ln225_5_fu_1355_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table1_address0 = zext_ln225_4_fu_1351_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_address0 = zext_ln225_3_fu_1347_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_2_fu_1343_p1;
    end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_1_fu_1339_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table1_address0 = zext_ln225_fu_1335_p1;
    end else begin
        exp_table1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_322_ce = 1'b1;
    end else begin
        grp_fu_322_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_322_p0 = zext_ln1118_9_fu_1673_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_322_p0 = zext_ln1118_8_fu_1669_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_322_p0 = zext_ln1118_7_fu_1665_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_322_p0 = zext_ln1118_6_fu_1661_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_322_p0 = zext_ln1118_5_fu_1657_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_322_p0 = zext_ln1118_4_fu_1653_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_322_p0 = zext_ln1118_3_fu_1649_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_322_p0 = zext_ln1118_2_fu_1645_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_322_p0 = zext_ln1118_1_fu_1641_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_322_p0 = zext_ln1118_fu_1637_p1;
    end else begin
        grp_fu_322_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_322_p1 = sext_ln241_reg_2274;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_322_p1 = sext_ln241_fu_1633_p1;
    end else begin
        grp_fu_322_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001_ignoreCallOp263) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001_ignoreCallOp262) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp267) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp266) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp265) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp264) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_x_V_offset = 5'd4;
    end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_x_V_offset = 5'd0;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_x_V_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_fu_1517_p2 = (exp_res_8_V_1_reg_2196 + exp_res_9_V_1_reg_2208);

assign and_ln786_1_fu_904_p2 = (xor_ln786_1_fu_899_p2 & tmp_23_reg_1869);

assign and_ln786_2_fu_928_p2 = (xor_ln786_2_fu_923_p2 & tmp_25_reg_1883);

assign and_ln786_3_fu_952_p2 = (xor_ln786_3_fu_947_p2 & tmp_27_reg_1897);

assign and_ln786_4_fu_976_p2 = (xor_ln786_4_fu_971_p2 & tmp_29_reg_1911);

assign and_ln786_5_fu_1000_p2 = (xor_ln786_5_fu_995_p2 & tmp_31_reg_1925);

assign and_ln786_6_fu_1024_p2 = (xor_ln786_6_fu_1019_p2 & tmp_33_reg_1939);

assign and_ln786_7_fu_1048_p2 = (xor_ln786_7_fu_1043_p2 & tmp_35_reg_1953);

assign and_ln786_8_fu_1072_p2 = (xor_ln786_8_fu_1067_p2 & tmp_37_reg_1967);

assign and_ln786_9_fu_1096_p2 = (xor_ln786_9_fu_1091_p2 & tmp_39_reg_1981);

assign and_ln786_fu_880_p2 = (xor_ln786_fu_875_p2 & tmp_21_reg_1855);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op52 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op402 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op52 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op402 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp264 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op52 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op402 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op52 == 1'b0) | (ap_start == 1'b0))) | ((io_acc_block_signal_op402 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_ignoreCallOp265 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_ignoreCallOp266 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp267 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001_ignoreCallOp262 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001_ignoreCallOp263 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage8_iter1_ignore_call233 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op52 == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call233 = ((io_acc_block_signal_op52 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state20_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage9_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage8_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage9_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter3_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter3_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage8_iter3_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage9_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage9_iter3_ignore_call233 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_pp0_stage0_iter4 = (io_acc_block_signal_op402 == 1'b0);
end

always @ (*) begin
    ap_block_state41_pp0_stage0_iter4_ignore_call233 = (io_acc_block_signal_op402 == 1'b0);
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start = grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_360_ap_start_reg;

assign icmp_ln1496_1_fu_431_p2 = (($signed(data_array_2_V_reg_1751) < $signed(data_array_3_V_reg_1758)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_453_p2 = (($signed(select_ln65_fu_443_p3) < $signed(select_ln65_1_fu_448_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_435_p2 = (($signed(data_array_4_V_reg_1765) < $signed(data_array_5_V_reg_1772)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_439_p2 = (($signed(data_array_6_V_reg_1779) < $signed(data_array_7_V_reg_1786)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_477_p2 = (($signed(select_ln65_3_fu_467_p3) < $signed(select_ln65_4_fu_472_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_491_p2 = (($signed(select_ln65_2_reg_1827) < $signed(select_ln65_5_reg_1833)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_501_p2 = (($signed(data_array_8_V_reg_1793) < $signed(data_array_9_V_reg_1800)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_510_p2 = (($signed(select_ln65_6_reg_1839) < $signed(select_ln65_7_fu_505_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_427_p2 = (($signed(data_array_0_V_reg_1737) < $signed(data_array_1_V_reg_1744)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln235_fu_1629_p1;

assign io_acc_block_signal_op402 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op52 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign lhs_V_1_fu_1540_p1 = p_Val2_26_reg_2227;

assign lhs_V_fu_1419_p1 = p_Val2_19_reg_2215;

assign or_ln340_10_fu_1475_p2 = (xor_ln340_21_fu_1469_p2 | p_Result_18_fu_1443_p3);

assign or_ln340_11_fu_1602_p2 = (xor_ln340_23_fu_1597_p2 | p_Result_21_reg_2246);

assign or_ln340_1_fu_918_p2 = (xor_ln340_1_fu_913_p2 | tmp_24_reg_1876);

assign or_ln340_2_fu_942_p2 = (xor_ln340_2_fu_937_p2 | tmp_26_reg_1890);

assign or_ln340_3_fu_966_p2 = (xor_ln340_3_fu_961_p2 | tmp_28_reg_1904);

assign or_ln340_4_fu_990_p2 = (xor_ln340_4_fu_985_p2 | tmp_30_reg_1918);

assign or_ln340_5_fu_1014_p2 = (xor_ln340_5_fu_1009_p2 | tmp_32_reg_1932);

assign or_ln340_6_fu_1038_p2 = (xor_ln340_6_fu_1033_p2 | tmp_34_reg_1946);

assign or_ln340_7_fu_1062_p2 = (xor_ln340_7_fu_1057_p2 | tmp_36_reg_1960);

assign or_ln340_8_fu_1086_p2 = (xor_ln340_8_fu_1081_p2 | tmp_38_reg_1974);

assign or_ln340_9_fu_1110_p2 = (xor_ln340_9_fu_1105_p2 | tmp_40_reg_1988);

assign or_ln340_fu_894_p2 = (xor_ln340_fu_889_p2 | tmp_22_reg_1862);

assign p_Result_18_fu_1443_p3 = p_Val2_22_fu_1439_p2[32'd17];

assign p_Result_19_fu_1521_p3 = p_Val2_25_fu_1511_p2[32'd17];

assign p_Result_s_fu_1431_p3 = ret_V_fu_1425_p2[32'd18];

assign p_Val2_22_fu_1439_p2 = ($signed(p_Val2_1_reg_2221) + $signed(p_Val2_19_reg_2215));

assign p_Val2_23_fu_1505_p1 = exp_res_8_V_1_reg_2196;

assign p_Val2_24_fu_1508_p1 = exp_res_9_V_1_reg_2208;

assign p_Val2_25_fu_1511_p2 = (p_Val2_24_fu_1508_p1 + p_Val2_23_fu_1505_p1);

assign p_Val2_26_fu_1497_p3 = ((or_ln340_10_fu_1475_p2[0:0] === 1'b1) ? select_ln340_20_fu_1481_p3 : select_ln388_10_fu_1489_p3);

assign p_Val2_27_fu_1529_p3 = ((p_Result_19_fu_1521_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_1517_p2);

assign p_Val2_29_fu_1560_p2 = ($signed(zext_ln746_fu_1537_p1) + $signed(p_Val2_26_reg_2227));

assign res_V_data_0_V_din = tmp_data_0_V_reg_2284;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2294;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2304;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2314;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2324;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2334;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2344;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2354;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2364;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2374;

assign ret_V_1_fu_1546_p2 = ($signed(lhs_V_1_fu_1540_p1) + $signed(rhs_V_1_fu_1543_p1));

assign ret_V_fu_1425_p2 = ($signed(lhs_V_fu_1419_p1) + $signed(rhs_V_fu_1422_p1));

assign rhs_V_1_fu_1543_p1 = p_Val2_27_reg_2233;

assign rhs_V_fu_1422_p1 = p_Val2_1_reg_2221;

assign select_ln340_10_fu_1225_p3 = ((xor_ln340_15_fu_1005_p2[0:0] === 1'b1) ? 8'd127 : tmp_15_reg_2025);

assign select_ln340_12_fu_1247_p3 = ((xor_ln340_16_fu_1029_p2[0:0] === 1'b1) ? 8'd127 : tmp_16_reg_2031);

assign select_ln340_14_fu_1269_p3 = ((xor_ln340_17_fu_1053_p2[0:0] === 1'b1) ? 8'd127 : tmp_17_reg_2037);

assign select_ln340_16_fu_1291_p3 = ((xor_ln340_18_fu_1077_p2[0:0] === 1'b1) ? 8'd127 : tmp_18_reg_2043);

assign select_ln340_18_fu_1313_p3 = ((xor_ln340_19_fu_1101_p2[0:0] === 1'b1) ? 8'd127 : tmp_19_reg_2049);

assign select_ln340_20_fu_1481_p3 = ((xor_ln340_20_fu_1463_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_22_fu_1439_p2);

assign select_ln340_22_fu_1607_p3 = ((xor_ln340_22_fu_1593_p2[0:0] === 1'b1) ? 8'd127 : tmp_20_reg_2253);

assign select_ln340_2_fu_1137_p3 = ((xor_ln340_11_fu_909_p2[0:0] === 1'b1) ? 8'd127 : tmp_11_reg_2001);

assign select_ln340_4_fu_1159_p3 = ((xor_ln340_12_fu_933_p2[0:0] === 1'b1) ? 8'd127 : tmp_12_reg_2007);

assign select_ln340_6_fu_1181_p3 = ((xor_ln340_13_fu_957_p2[0:0] === 1'b1) ? 8'd127 : tmp_13_reg_2013);

assign select_ln340_8_fu_1203_p3 = ((xor_ln340_14_fu_981_p2[0:0] === 1'b1) ? 8'd127 : tmp_14_reg_2019);

assign select_ln340_fu_1115_p3 = ((xor_ln340_10_fu_885_p2[0:0] === 1'b1) ? 8'd127 : tmp_reg_1995);

assign select_ln388_10_fu_1489_p3 = ((underflow_fu_1457_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_22_fu_1439_p2);

assign select_ln388_11_fu_1614_p3 = ((underflow_1_fu_1588_p2[0:0] === 1'b1) ? 8'd128 : tmp_20_reg_2253);

assign select_ln388_1_fu_1144_p3 = ((and_ln786_1_fu_904_p2[0:0] === 1'b1) ? 8'd128 : tmp_11_reg_2001);

assign select_ln388_2_fu_1166_p3 = ((and_ln786_2_fu_928_p2[0:0] === 1'b1) ? 8'd128 : tmp_12_reg_2007);

assign select_ln388_3_fu_1188_p3 = ((and_ln786_3_fu_952_p2[0:0] === 1'b1) ? 8'd128 : tmp_13_reg_2013);

assign select_ln388_4_fu_1210_p3 = ((and_ln786_4_fu_976_p2[0:0] === 1'b1) ? 8'd128 : tmp_14_reg_2019);

assign select_ln388_5_fu_1232_p3 = ((and_ln786_5_fu_1000_p2[0:0] === 1'b1) ? 8'd128 : tmp_15_reg_2025);

assign select_ln388_6_fu_1254_p3 = ((and_ln786_6_fu_1024_p2[0:0] === 1'b1) ? 8'd128 : tmp_16_reg_2031);

assign select_ln388_7_fu_1276_p3 = ((and_ln786_7_fu_1048_p2[0:0] === 1'b1) ? 8'd128 : tmp_17_reg_2037);

assign select_ln388_8_fu_1298_p3 = ((and_ln786_8_fu_1072_p2[0:0] === 1'b1) ? 8'd128 : tmp_18_reg_2043);

assign select_ln388_9_fu_1320_p3 = ((and_ln786_9_fu_1096_p2[0:0] === 1'b1) ? 8'd128 : tmp_19_reg_2049);

assign select_ln388_fu_1122_p3 = ((and_ln786_fu_880_p2[0:0] === 1'b1) ? 8'd128 : tmp_reg_1995);

assign select_ln65_1_fu_448_p3 = ((icmp_ln1496_1_reg_1812[0:0] === 1'b1) ? data_array_3_V_reg_1758 : data_array_2_V_reg_1751);

assign select_ln65_2_fu_459_p3 = ((icmp_ln1496_2_fu_453_p2[0:0] === 1'b1) ? select_ln65_1_fu_448_p3 : select_ln65_fu_443_p3);

assign select_ln65_3_fu_467_p3 = ((icmp_ln1496_3_reg_1817[0:0] === 1'b1) ? data_array_5_V_reg_1772 : data_array_4_V_reg_1765);

assign select_ln65_4_fu_472_p3 = ((icmp_ln1496_4_reg_1822[0:0] === 1'b1) ? data_array_7_V_reg_1786 : data_array_6_V_reg_1779);

assign select_ln65_5_fu_483_p3 = ((icmp_ln1496_5_fu_477_p2[0:0] === 1'b1) ? select_ln65_4_fu_472_p3 : select_ln65_3_fu_467_p3);

assign select_ln65_6_fu_495_p3 = ((icmp_ln1496_6_fu_491_p2[0:0] === 1'b1) ? select_ln65_5_reg_1833 : select_ln65_2_reg_1827);

assign select_ln65_7_fu_505_p3 = ((icmp_ln1496_7_reg_1845[0:0] === 1'b1) ? data_array_9_V_reg_1800 : data_array_8_V_reg_1793);

assign select_ln65_fu_443_p3 = ((icmp_ln1496_reg_1807[0:0] === 1'b1) ? data_array_1_V_reg_1744 : data_array_0_V_reg_1737);

assign sext_ln241_fu_1633_p1 = $signed(inv_exp_sum_V_reg_2269);

assign sext_ln703_10_fu_750_p1 = data_array_9_V_reg_1800;

assign sext_ln703_1_fu_525_p1 = $signed(x_max_V_reg_1850);

assign sext_ln703_2_fu_550_p1 = data_array_1_V_reg_1744;

assign sext_ln703_3_fu_575_p1 = data_array_2_V_reg_1751;

assign sext_ln703_4_fu_600_p1 = data_array_3_V_reg_1758;

assign sext_ln703_5_fu_625_p1 = data_array_4_V_reg_1765;

assign sext_ln703_6_fu_650_p1 = data_array_5_V_reg_1772;

assign sext_ln703_7_fu_675_p1 = data_array_6_V_reg_1779;

assign sext_ln703_8_fu_700_p1 = data_array_7_V_reg_1786;

assign sext_ln703_9_fu_725_p1 = data_array_8_V_reg_1793;

assign sext_ln703_fu_522_p1 = data_array_0_V_reg_1737;

assign sub_ln1193_1_fu_553_p2 = ($signed(sext_ln703_2_fu_550_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_2_fu_578_p2 = ($signed(sext_ln703_3_fu_575_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_3_fu_603_p2 = ($signed(sext_ln703_4_fu_600_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_4_fu_628_p2 = ($signed(sext_ln703_5_fu_625_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_5_fu_653_p2 = ($signed(sext_ln703_6_fu_650_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_6_fu_678_p2 = ($signed(sext_ln703_7_fu_675_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_7_fu_703_p2 = ($signed(sext_ln703_8_fu_700_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_8_fu_728_p2 = ($signed(sext_ln703_9_fu_725_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_9_fu_753_p2 = ($signed(sext_ln703_10_fu_750_p1) - $signed(sext_ln703_1_fu_525_p1));

assign sub_ln1193_fu_528_p2 = ($signed(sext_ln703_fu_522_p1) - $signed(sext_ln703_1_fu_525_p1));

assign underflow_1_fu_1588_p2 = (xor_ln786_11_fu_1583_p2 & p_Result_20_reg_2239);

assign underflow_fu_1457_p2 = (xor_ln786_10_fu_1451_p2 & p_Result_s_fu_1431_p3);

assign x_max_V_fu_515_p3 = ((icmp_ln1496_8_fu_510_p2[0:0] === 1'b1) ? select_ln65_7_fu_505_p3 : select_ln65_6_reg_1839);

assign xor_ln340_10_fu_885_p2 = (tmp_22_reg_1862 ^ tmp_21_reg_1855);

assign xor_ln340_11_fu_909_p2 = (tmp_24_reg_1876 ^ tmp_23_reg_1869);

assign xor_ln340_12_fu_933_p2 = (tmp_26_reg_1890 ^ tmp_25_reg_1883);

assign xor_ln340_13_fu_957_p2 = (tmp_28_reg_1904 ^ tmp_27_reg_1897);

assign xor_ln340_14_fu_981_p2 = (tmp_30_reg_1918 ^ tmp_29_reg_1911);

assign xor_ln340_15_fu_1005_p2 = (tmp_32_reg_1932 ^ tmp_31_reg_1925);

assign xor_ln340_16_fu_1029_p2 = (tmp_34_reg_1946 ^ tmp_33_reg_1939);

assign xor_ln340_17_fu_1053_p2 = (tmp_36_reg_1960 ^ tmp_35_reg_1953);

assign xor_ln340_18_fu_1077_p2 = (tmp_38_reg_1974 ^ tmp_37_reg_1967);

assign xor_ln340_19_fu_1101_p2 = (tmp_40_reg_1988 ^ tmp_39_reg_1981);

assign xor_ln340_1_fu_913_p2 = (tmp_23_reg_1869 ^ 1'd1);

assign xor_ln340_20_fu_1463_p2 = (p_Result_s_fu_1431_p3 ^ p_Result_18_fu_1443_p3);

assign xor_ln340_21_fu_1469_p2 = (p_Result_s_fu_1431_p3 ^ 1'd1);

assign xor_ln340_22_fu_1593_p2 = (p_Result_21_reg_2246 ^ p_Result_20_reg_2239);

assign xor_ln340_23_fu_1597_p2 = (p_Result_20_reg_2239 ^ 1'd1);

assign xor_ln340_2_fu_937_p2 = (tmp_25_reg_1883 ^ 1'd1);

assign xor_ln340_3_fu_961_p2 = (tmp_27_reg_1897 ^ 1'd1);

assign xor_ln340_4_fu_985_p2 = (tmp_29_reg_1911 ^ 1'd1);

assign xor_ln340_5_fu_1009_p2 = (tmp_31_reg_1925 ^ 1'd1);

assign xor_ln340_6_fu_1033_p2 = (tmp_33_reg_1939 ^ 1'd1);

assign xor_ln340_7_fu_1057_p2 = (tmp_35_reg_1953 ^ 1'd1);

assign xor_ln340_8_fu_1081_p2 = (tmp_37_reg_1967 ^ 1'd1);

assign xor_ln340_9_fu_1105_p2 = (tmp_39_reg_1981 ^ 1'd1);

assign xor_ln340_fu_889_p2 = (tmp_21_reg_1855 ^ 1'd1);

assign xor_ln786_10_fu_1451_p2 = (p_Result_18_fu_1443_p3 ^ 1'd1);

assign xor_ln786_11_fu_1583_p2 = (p_Result_21_reg_2246 ^ 1'd1);

assign xor_ln786_1_fu_899_p2 = (tmp_24_reg_1876 ^ 1'd1);

assign xor_ln786_2_fu_923_p2 = (tmp_26_reg_1890 ^ 1'd1);

assign xor_ln786_3_fu_947_p2 = (tmp_28_reg_1904 ^ 1'd1);

assign xor_ln786_4_fu_971_p2 = (tmp_30_reg_1918 ^ 1'd1);

assign xor_ln786_5_fu_995_p2 = (tmp_32_reg_1932 ^ 1'd1);

assign xor_ln786_6_fu_1019_p2 = (tmp_34_reg_1946 ^ 1'd1);

assign xor_ln786_7_fu_1043_p2 = (tmp_36_reg_1960 ^ 1'd1);

assign xor_ln786_8_fu_1067_p2 = (tmp_38_reg_1974 ^ 1'd1);

assign xor_ln786_9_fu_1091_p2 = (tmp_40_reg_1988 ^ 1'd1);

assign xor_ln786_fu_875_p2 = (tmp_22_reg_1862 ^ 1'd1);

assign y_V_10_fu_1621_p3 = ((or_ln340_11_fu_1602_p2[0:0] === 1'b1) ? select_ln340_22_fu_1607_p3 : select_ln388_11_fu_1614_p3);

assign y_V_1_fu_1151_p3 = ((or_ln340_1_fu_918_p2[0:0] === 1'b1) ? select_ln340_2_fu_1137_p3 : select_ln388_1_fu_1144_p3);

assign y_V_2_fu_1173_p3 = ((or_ln340_2_fu_942_p2[0:0] === 1'b1) ? select_ln340_4_fu_1159_p3 : select_ln388_2_fu_1166_p3);

assign y_V_3_fu_1195_p3 = ((or_ln340_3_fu_966_p2[0:0] === 1'b1) ? select_ln340_6_fu_1181_p3 : select_ln388_3_fu_1188_p3);

assign y_V_4_fu_1217_p3 = ((or_ln340_4_fu_990_p2[0:0] === 1'b1) ? select_ln340_8_fu_1203_p3 : select_ln388_4_fu_1210_p3);

assign y_V_5_fu_1239_p3 = ((or_ln340_5_fu_1014_p2[0:0] === 1'b1) ? select_ln340_10_fu_1225_p3 : select_ln388_5_fu_1232_p3);

assign y_V_6_fu_1261_p3 = ((or_ln340_6_fu_1038_p2[0:0] === 1'b1) ? select_ln340_12_fu_1247_p3 : select_ln388_6_fu_1254_p3);

assign y_V_7_fu_1283_p3 = ((or_ln340_7_fu_1062_p2[0:0] === 1'b1) ? select_ln340_14_fu_1269_p3 : select_ln388_7_fu_1276_p3);

assign y_V_8_fu_1305_p3 = ((or_ln340_8_fu_1086_p2[0:0] === 1'b1) ? select_ln340_16_fu_1291_p3 : select_ln388_8_fu_1298_p3);

assign y_V_9_fu_1327_p3 = ((or_ln340_9_fu_1110_p2[0:0] === 1'b1) ? select_ln340_18_fu_1313_p3 : select_ln388_9_fu_1320_p3);

assign y_V_fu_1129_p3 = ((or_ln340_fu_894_p2[0:0] === 1'b1) ? select_ln340_fu_1115_p3 : select_ln388_fu_1122_p3);

assign zext_ln1118_1_fu_1641_p1 = exp_res_1_V_1_reg_2121_pp0_iter2_reg;

assign zext_ln1118_2_fu_1645_p1 = exp_res_2_V_1_reg_2132_pp0_iter3_reg;

assign zext_ln1118_3_fu_1649_p1 = exp_res_3_V_1_reg_2143_pp0_iter3_reg;

assign zext_ln1118_4_fu_1653_p1 = exp_res_4_V_1_reg_2154_pp0_iter3_reg;

assign zext_ln1118_5_fu_1657_p1 = exp_res_5_V_1_reg_2165_pp0_iter3_reg;

assign zext_ln1118_6_fu_1661_p1 = exp_res_6_V_1_reg_2176_pp0_iter3_reg;

assign zext_ln1118_7_fu_1665_p1 = exp_res_7_V_1_reg_2186_pp0_iter3_reg;

assign zext_ln1118_8_fu_1669_p1 = exp_res_8_V_1_reg_2196_pp0_iter3_reg;

assign zext_ln1118_9_fu_1673_p1 = exp_res_9_V_1_reg_2208_pp0_iter3_reg;

assign zext_ln1118_fu_1637_p1 = exp_res_0_V_1_reg_2110_pp0_iter2_reg;

assign zext_ln225_1_fu_1339_p1 = y_V_1_reg_2060;

assign zext_ln225_2_fu_1343_p1 = y_V_2_reg_2065;

assign zext_ln225_3_fu_1347_p1 = y_V_3_reg_2070;

assign zext_ln225_4_fu_1351_p1 = y_V_4_reg_2075;

assign zext_ln225_5_fu_1355_p1 = y_V_5_reg_2080;

assign zext_ln225_6_fu_1359_p1 = y_V_6_reg_2085;

assign zext_ln225_7_fu_1392_p1 = y_V_7_reg_2090;

assign zext_ln225_8_fu_1401_p1 = y_V_8_reg_2095;

assign zext_ln225_9_fu_1410_p1 = y_V_9_reg_2100;

assign zext_ln225_fu_1335_p1 = y_V_reg_2055;

assign zext_ln235_fu_1629_p1 = y_V_10_reg_2259;

assign zext_ln746_fu_1537_p1 = p_Val2_27_reg_2233;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s
