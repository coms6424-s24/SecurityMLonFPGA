-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_0_V_full_n : IN STD_LOGIC;
    res_stream_V_data_0_V_write : OUT STD_LOGIC;
    res_stream_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_1_V_full_n : IN STD_LOGIC;
    res_stream_V_data_1_V_write : OUT STD_LOGIC;
    res_stream_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_2_V_full_n : IN STD_LOGIC;
    res_stream_V_data_2_V_write : OUT STD_LOGIC;
    res_stream_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_3_V_full_n : IN STD_LOGIC;
    res_stream_V_data_3_V_write : OUT STD_LOGIC;
    res_stream_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_4_V_full_n : IN STD_LOGIC;
    res_stream_V_data_4_V_write : OUT STD_LOGIC;
    res_stream_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_5_V_full_n : IN STD_LOGIC;
    res_stream_V_data_5_V_write : OUT STD_LOGIC;
    res_stream_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_6_V_full_n : IN STD_LOGIC;
    res_stream_V_data_6_V_write : OUT STD_LOGIC;
    res_stream_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_7_V_full_n : IN STD_LOGIC;
    res_stream_V_data_7_V_write : OUT STD_LOGIC;
    res_stream_V_data_8_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_8_V_full_n : IN STD_LOGIC;
    res_stream_V_data_8_V_write : OUT STD_LOGIC;
    res_stream_V_data_9_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_9_V_full_n : IN STD_LOGIC;
    res_stream_V_data_9_V_write : OUT STD_LOGIC;
    res_stream_V_data_10_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_10_V_full_n : IN STD_LOGIC;
    res_stream_V_data_10_V_write : OUT STD_LOGIC;
    res_stream_V_data_11_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_11_V_full_n : IN STD_LOGIC;
    res_stream_V_data_11_V_write : OUT STD_LOGIC;
    res_stream_V_data_12_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_12_V_full_n : IN STD_LOGIC;
    res_stream_V_data_12_V_write : OUT STD_LOGIC;
    res_stream_V_data_13_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_13_V_full_n : IN STD_LOGIC;
    res_stream_V_data_13_V_write : OUT STD_LOGIC;
    res_stream_V_data_14_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_14_V_full_n : IN STD_LOGIC;
    res_stream_V_data_14_V_write : OUT STD_LOGIC;
    res_stream_V_data_15_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_15_V_full_n : IN STD_LOGIC;
    res_stream_V_data_15_V_write : OUT STD_LOGIC;
    res_stream_V_data_0_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_1_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_2_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_3_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_4_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_5_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_6_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_7_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_8_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_9_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_10_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_11_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_12_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_13_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_14_V_blk_n : OUT STD_LOGIC;
    res_stream_V_data_15_V_blk_n : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal kernel_data_V_1_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_1_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sX_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal and_ln289_2_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_data_V_1_6_ret_reg_522 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_3_ret_reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_0_ret_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_1_ret_reg_537 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_2_ret_reg_542 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_4_ret_reg_547 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_5_ret_reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_7_ret_reg_557 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_8_ret_reg_562 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln289_2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln313_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln313_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln328_fu_393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln328_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln317_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln317_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln323_fu_437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln323_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_reg_589 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_data_1_V_reg_594 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_reg_599 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_reg_604 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_reg_609 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_6_V_reg_614 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_7_V_reg_619 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_8_V_reg_624 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_9_V_reg_629 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_10_V_reg_634 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_11_V_reg_639 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_12_V_reg_644 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_13_V_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_14_V_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_15_V_reg_659 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start : STD_LOGIC;
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_done : STD_LOGIC;
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_idle : STD_LOGIC;
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ready : STD_LOGIC;
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start : STD_LOGIC;
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_done : STD_LOGIC;
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_idle : STD_LOGIC;
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ready : STD_LOGIC;
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce : STD_LOGIC;
    signal storemerge_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal add_ln321_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln326_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal io_acc_block_signal_op95 : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal tmp_fu_315_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_143_fu_335_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln289_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_1_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_4_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_5_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_1_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln328_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln323_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_133 : BOOLEAN;
    signal ap_condition_742 : BOOLEAN;
    signal ap_condition_746 : BOOLEAN;
    signal ap_condition_741 : BOOLEAN;
    signal ap_condition_752 : BOOLEAN;

    component dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        kernel_window_8_V_write : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160 : component dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start,
        ap_done => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_done,
        ap_idle => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_idle,
        ap_ready => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ready,
        data_0_V_read => kernel_data_V_1_0_ret_reg_532,
        data_1_V_read => kernel_data_V_1_1_ret_reg_537,
        data_2_V_read => kernel_data_V_1_2_ret_reg_542,
        data_3_V_read => kernel_data_V_1_3_ret_reg_527,
        data_4_V_read => kernel_data_V_1_4_ret_reg_547,
        data_5_V_read => kernel_data_V_1_5_ret_reg_552,
        data_6_V_read => kernel_data_V_1_6_ret_reg_522,
        data_7_V_read => kernel_data_V_1_7_ret_reg_557,
        data_8_V_read => kernel_data_V_1_8_ret_reg_562,
        ap_return_0 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_0,
        ap_return_1 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_1,
        ap_return_2 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_2,
        ap_return_3 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_3,
        ap_return_4 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_4,
        ap_return_5 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_5,
        ap_return_6 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_6,
        ap_return_7 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_7,
        ap_return_8 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_8,
        ap_return_9 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_9,
        ap_return_10 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_10,
        ap_return_11 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_11,
        ap_return_12 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_12,
        ap_return_13 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_13,
        ap_return_14 => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_14,
        ap_ce => grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce);

    call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173 : component shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start,
        ap_done => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_done,
        ap_idle => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_idle,
        ap_ready => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ready,
        kernel_window_8_V_write => p_read,
        kernel_window_1_V_read => kernel_data_V_1_1,
        kernel_window_2_V_read => kernel_data_V_1_2,
        kernel_window_4_V_read => kernel_data_V_1_4,
        kernel_window_5_V_read => kernel_data_V_1_5,
        kernel_window_7_V_read => kernel_data_V_1_7,
        kernel_window_8_V_read => kernel_data_V_1_8,
        ap_return_0 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_0,
        ap_return_1 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_1,
        ap_return_2 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_2,
        ap_return_3 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_3,
        ap_return_4 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_4,
        ap_return_5 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_5,
        ap_return_6 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_6,
        ap_return_7 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_7,
        ap_return_8 => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_8,
        ap_ce => call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state2) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_1 = and_ln289_2_fu_363_p2))) then 
                    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ready = ap_const_logic_1)) then 
                    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pX_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_133)) then
                if ((icmp_ln313_fu_369_p2 = ap_const_lv1_1)) then 
                    pX_2 <= ap_const_lv32_0;
                elsif ((icmp_ln313_fu_369_p2 = ap_const_lv1_0)) then 
                    pX_2 <= add_ln326_fu_375_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_boolean_1 = ap_condition_746)) then 
                    pY_2 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_742)) then 
                    pY_2 <= add_ln321_fu_419_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln313_reg_571 = ap_const_lv1_0))) then 
                    sX_2 <= select_ln328_reg_575;
                elsif ((ap_const_boolean_1 = ap_condition_741)) then 
                    sX_2 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    storemerge_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_752)) then
                if ((icmp_ln317_reg_580 = ap_const_lv1_1)) then 
                    storemerge_reg_149 <= ap_const_lv32_0;
                elsif ((icmp_ln317_reg_580 = ap_const_lv1_0)) then 
                    storemerge_reg_149 <= select_ln323_reg_584;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then
                and_ln289_2_reg_567 <= and_ln289_2_fu_363_p2;
                icmp_ln313_reg_571 <= icmp_ln313_fu_369_p2;
                kernel_data_V_1_0_ret_reg_532 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_0;
                kernel_data_V_1_1 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_3;
                kernel_data_V_1_1_ret_reg_537 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_3;
                kernel_data_V_1_2 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_4;
                kernel_data_V_1_2_ret_reg_542 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_4;
                kernel_data_V_1_3_ret_reg_527 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_1;
                kernel_data_V_1_4 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_5;
                kernel_data_V_1_4_ret_reg_547 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_5;
                kernel_data_V_1_5 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_6;
                kernel_data_V_1_5_ret_reg_552 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_6;
                kernel_data_V_1_6_ret_reg_522 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_2;
                kernel_data_V_1_7 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_7;
                kernel_data_V_1_7_ret_reg_557 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_7;
                kernel_data_V_1_8 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_8;
                kernel_data_V_1_8_ret_reg_562 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce) and (icmp_ln313_fu_369_p2 = ap_const_lv1_1))) then
                icmp_ln317_reg_580 <= icmp_ln317_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce) and (icmp_ln313_reg_571 = ap_const_lv1_1))) then
                sY_2 <= storemerge_reg_149;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln317_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (icmp_ln313_fu_369_p2 = ap_const_lv1_1))) then
                select_ln323_reg_584 <= select_ln323_fu_437_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln313_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce))) then
                select_ln328_reg_575 <= select_ln328_fu_393_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then
                tmp_data_0_V_reg_589 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_0;
                tmp_data_10_V_reg_634 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_9;
                tmp_data_11_V_reg_639 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_10;
                tmp_data_12_V_reg_644 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_11;
                tmp_data_13_V_reg_649 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_12;
                tmp_data_14_V_reg_654 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_13;
                tmp_data_15_V_reg_659 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_14;
                tmp_data_1_V_reg_594 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_1;
                tmp_data_3_V_reg_599 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_2;
                tmp_data_4_V_reg_604 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_3;
                tmp_data_5_V_reg_609 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_4;
                tmp_data_6_V_reg_614 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_5;
                tmp_data_7_V_reg_619 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_6;
                tmp_data_8_V_reg_624 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_7;
                tmp_data_9_V_reg_629 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_8;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state2, io_acc_block_signal_op95)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln321_fu_419_p2 <= std_logic_vector(unsigned(pY_2) + unsigned(ap_const_lv32_1));
    add_ln323_fu_431_p2 <= std_logic_vector(unsigned(sY_2) + unsigned(ap_const_lv32_1));
    add_ln326_fu_375_p2 <= std_logic_vector(unsigned(pX_2) + unsigned(ap_const_lv32_1));
    add_ln328_fu_387_p2 <= std_logic_vector(unsigned(sX_2) + unsigned(ap_const_lv32_1));
    and_ln289_1_fu_357_p2 <= (icmp_ln289_5_fu_345_p2 and icmp_ln289_4_fu_325_p2);
    and_ln289_2_fu_363_p2 <= (and_ln289_fu_351_p2 and and_ln289_1_fu_357_p2);
    and_ln289_fu_351_p2 <= (icmp_ln289_fu_295_p2 and icmp_ln289_1_fu_305_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_block_state4_assign_proc : process(and_ln289_2_reg_567, io_acc_block_signal_op95)
    begin
                ap_block_state4 <= ((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567));
    end process;


    ap_condition_133_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
                ap_condition_133 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce));
    end process;


    ap_condition_741_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln313_fu_369_p2)
    begin
                ap_condition_741 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln313_fu_369_p2 = ap_const_lv1_1));
    end process;


    ap_condition_742_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln313_fu_369_p2, icmp_ln317_fu_413_p2)
    begin
                ap_condition_742 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln317_fu_413_p2 = ap_const_lv1_0) and (icmp_ln313_fu_369_p2 = ap_const_lv1_1));
    end process;


    ap_condition_746_assign_proc : process(icmp_ln313_reg_571, icmp_ln317_reg_580, ap_CS_fsm_state2)
    begin
                ap_condition_746 <= ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln317_reg_580 = ap_const_lv1_1) and (icmp_ln313_reg_571 = ap_const_lv1_1));
    end process;


    ap_condition_752_assign_proc : process(ap_ce, icmp_ln313_reg_571, ap_CS_fsm_state2)
    begin
                ap_condition_752 <= ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce) and (icmp_ln313_reg_571 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce <= ap_const_logic_1;
        else 
            call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start <= ap_const_logic_1;
        else 
            call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce_assign_proc : process(ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg;
    icmp_ln289_1_fu_305_p2 <= "1" when (sY_2 = ap_const_lv32_2) else "0";
    icmp_ln289_4_fu_325_p2 <= "1" when (signed(tmp_fu_315_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln289_5_fu_345_p2 <= "1" when (signed(tmp_143_fu_335_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln289_fu_295_p2 <= "1" when (sX_2 = ap_const_lv32_2) else "0";
    icmp_ln313_fu_369_p2 <= "1" when (pX_2 = ap_const_lv32_1B) else "0";
    icmp_ln317_fu_413_p2 <= "1" when (pY_2 = ap_const_lv32_1B) else "0";
    io_acc_block_signal_op95 <= (res_stream_V_data_9_V_full_n and res_stream_V_data_8_V_full_n and res_stream_V_data_7_V_full_n and res_stream_V_data_6_V_full_n and res_stream_V_data_5_V_full_n and res_stream_V_data_4_V_full_n and res_stream_V_data_3_V_full_n and res_stream_V_data_2_V_full_n and res_stream_V_data_1_V_full_n and res_stream_V_data_15_V_full_n and res_stream_V_data_14_V_full_n and res_stream_V_data_13_V_full_n and res_stream_V_data_12_V_full_n and res_stream_V_data_11_V_full_n and res_stream_V_data_10_V_full_n and res_stream_V_data_0_V_full_n);

    res_stream_V_data_0_V_blk_n_assign_proc : process(res_stream_V_data_0_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_0_V_blk_n <= res_stream_V_data_0_V_full_n;
        else 
            res_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_0_V_din <= tmp_data_0_V_reg_589;

    res_stream_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_10_V_blk_n_assign_proc : process(res_stream_V_data_10_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_10_V_blk_n <= res_stream_V_data_10_V_full_n;
        else 
            res_stream_V_data_10_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_10_V_din <= tmp_data_10_V_reg_634;

    res_stream_V_data_10_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_10_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_10_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_11_V_blk_n_assign_proc : process(res_stream_V_data_11_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_11_V_blk_n <= res_stream_V_data_11_V_full_n;
        else 
            res_stream_V_data_11_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_11_V_din <= tmp_data_11_V_reg_639;

    res_stream_V_data_11_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_11_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_11_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_12_V_blk_n_assign_proc : process(res_stream_V_data_12_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_12_V_blk_n <= res_stream_V_data_12_V_full_n;
        else 
            res_stream_V_data_12_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_12_V_din <= tmp_data_12_V_reg_644;

    res_stream_V_data_12_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_12_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_12_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_13_V_blk_n_assign_proc : process(res_stream_V_data_13_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_13_V_blk_n <= res_stream_V_data_13_V_full_n;
        else 
            res_stream_V_data_13_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_13_V_din <= tmp_data_13_V_reg_649;

    res_stream_V_data_13_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_13_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_13_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_14_V_blk_n_assign_proc : process(res_stream_V_data_14_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_14_V_blk_n <= res_stream_V_data_14_V_full_n;
        else 
            res_stream_V_data_14_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_14_V_din <= tmp_data_14_V_reg_654;

    res_stream_V_data_14_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_14_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_14_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_15_V_blk_n_assign_proc : process(res_stream_V_data_15_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_15_V_blk_n <= res_stream_V_data_15_V_full_n;
        else 
            res_stream_V_data_15_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_15_V_din <= tmp_data_15_V_reg_659;

    res_stream_V_data_15_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_15_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_15_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_1_V_blk_n_assign_proc : process(res_stream_V_data_1_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_1_V_blk_n <= res_stream_V_data_1_V_full_n;
        else 
            res_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_1_V_din <= tmp_data_1_V_reg_594;

    res_stream_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_2_V_blk_n_assign_proc : process(res_stream_V_data_2_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_2_V_blk_n <= res_stream_V_data_2_V_full_n;
        else 
            res_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_2_V_din <= ap_const_lv16_0;

    res_stream_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_3_V_blk_n_assign_proc : process(res_stream_V_data_3_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_3_V_blk_n <= res_stream_V_data_3_V_full_n;
        else 
            res_stream_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_3_V_din <= tmp_data_3_V_reg_599;

    res_stream_V_data_3_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_4_V_blk_n_assign_proc : process(res_stream_V_data_4_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_4_V_blk_n <= res_stream_V_data_4_V_full_n;
        else 
            res_stream_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_4_V_din <= tmp_data_4_V_reg_604;

    res_stream_V_data_4_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_5_V_blk_n_assign_proc : process(res_stream_V_data_5_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_5_V_blk_n <= res_stream_V_data_5_V_full_n;
        else 
            res_stream_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_5_V_din <= tmp_data_5_V_reg_609;

    res_stream_V_data_5_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_6_V_blk_n_assign_proc : process(res_stream_V_data_6_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_6_V_blk_n <= res_stream_V_data_6_V_full_n;
        else 
            res_stream_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_6_V_din <= tmp_data_6_V_reg_614;

    res_stream_V_data_6_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_7_V_blk_n_assign_proc : process(res_stream_V_data_7_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_7_V_blk_n <= res_stream_V_data_7_V_full_n;
        else 
            res_stream_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_7_V_din <= tmp_data_7_V_reg_619;

    res_stream_V_data_7_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_8_V_blk_n_assign_proc : process(res_stream_V_data_8_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_8_V_blk_n <= res_stream_V_data_8_V_full_n;
        else 
            res_stream_V_data_8_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_8_V_din <= tmp_data_8_V_reg_624;

    res_stream_V_data_8_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_8_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_8_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_9_V_blk_n_assign_proc : process(res_stream_V_data_9_V_full_n, ap_CS_fsm_state4, and_ln289_2_reg_567)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_9_V_blk_n <= res_stream_V_data_9_V_full_n;
        else 
            res_stream_V_data_9_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_9_V_din <= tmp_data_9_V_reg_629;

    res_stream_V_data_9_V_write_assign_proc : process(ap_CS_fsm_state4, and_ln289_2_reg_567, ap_ce, io_acc_block_signal_op95)
    begin
        if ((not(((io_acc_block_signal_op95 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln289_2_reg_567))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln289_2_reg_567))) then 
            res_stream_V_data_9_V_write <= ap_const_logic_1;
        else 
            res_stream_V_data_9_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln323_fu_437_p3 <= 
        ap_const_lv32_2 when (icmp_ln289_1_fu_305_p2(0) = '1') else 
        add_ln323_fu_431_p2;
    select_ln328_fu_393_p3 <= 
        ap_const_lv32_2 when (icmp_ln289_fu_295_p2(0) = '1') else 
        add_ln328_fu_387_p2;
    tmp_143_fu_335_p4 <= pX_2(31 downto 1);
    tmp_fu_315_p4 <= pY_2(31 downto 1);
end behav;
