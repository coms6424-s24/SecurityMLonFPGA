-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_invert_8jQ_rom is 
    generic(
             DWIDTH     : integer := 18; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_invert_8jQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "011111111111111111", 1 => "000000010000000000", 
    2 => "000000001000000000", 3 => "000000000101010101", 
    4 => "000000000100000000", 5 => "000000000011001101", 
    6 => "000000000010101011", 7 => "000000000010010010", 
    8 => "000000000010000000", 9 => "000000000001110010", 
    10 => "000000000001100110", 11 => "000000000001011101", 
    12 => "000000000001010101", 13 => "000000000001001111", 
    14 => "000000000001001001", 15 => "000000000001000100", 
    16 => "000000000001000000", 17 => "000000000000111100", 
    18 => "000000000000111001", 19 => "000000000000110110", 
    20 => "000000000000110011", 21 => "000000000000110001", 
    22 => "000000000000101111", 23 => "000000000000101101", 
    24 => "000000000000101011", 25 => "000000000000101001", 
    26 => "000000000000100111", 27 => "000000000000100110", 
    28 => "000000000000100101", 29 => "000000000000100011", 
    30 => "000000000000100010", 31 => "000000000000100001", 
    32 => "000000000000100000", 33 => "000000000000011111", 
    34 => "000000000000011110", 35 => "000000000000011101", 
    36 to 37=> "000000000000011100", 38 => "000000000000011011", 
    39 to 40=> "000000000000011010", 41 => "000000000000011001", 
    42 to 43=> "000000000000011000", 44 to 45=> "000000000000010111", 
    46 to 47=> "000000000000010110", 48 to 49=> "000000000000010101", 
    50 to 52=> "000000000000010100", 53 to 55=> "000000000000010011", 
    56 to 58=> "000000000000010010", 59 to 62=> "000000000000010001", 
    63 to 66=> "000000000000010000", 67 to 70=> "000000000000001111", 
    71 to 75=> "000000000000001110", 76 to 81=> "000000000000001101", 
    82 to 89=> "000000000000001100", 90 to 97=> "000000000000001011", 
    98 to 107=> "000000000000001010", 108 to 120=> "000000000000001001", 
    121 to 127=> "000000000000001000", 128 to 135=> "111111111111111000", 
    136 to 148=> "111111111111110111", 149 to 158=> "111111111111110110", 
    159 to 166=> "111111111111110101", 167 to 174=> "111111111111110100", 
    175 to 180=> "111111111111110011", 181 to 185=> "111111111111110010", 
    186 to 189=> "111111111111110001", 190 to 193=> "111111111111110000", 
    194 to 197=> "111111111111101111", 198 to 200=> "111111111111101110", 
    201 to 203=> "111111111111101101", 204 to 206=> "111111111111101100", 
    207 to 208=> "111111111111101011", 209 to 210=> "111111111111101010", 
    211 to 212=> "111111111111101001", 213 to 214=> "111111111111101000", 
    215 => "111111111111100111", 216 to 217=> "111111111111100110", 
    218 => "111111111111100101", 219 to 220=> "111111111111100100", 
    221 => "111111111111100011", 222 => "111111111111100010", 
    223 => "111111111111100001", 224 => "111111111111100000", 
    225 => "111111111111011111", 226 => "111111111111011110", 
    227 => "111111111111011101", 228 => "111111111111011011", 
    229 => "111111111111011010", 230 => "111111111111011001", 
    231 => "111111111111010111", 232 => "111111111111010101", 
    233 => "111111111111010011", 234 => "111111111111010001", 
    235 => "111111111111001111", 236 => "111111111111001101", 
    237 => "111111111111001010", 238 => "111111111111000111", 
    239 => "111111111111000100", 240 => "111111111111000000", 
    241 => "111111111110111100", 242 => "111111111110110111", 
    243 => "111111111110110001", 244 => "111111111110101011", 
    245 => "111111111110100011", 246 => "111111111110011010", 
    247 => "111111111110001110", 248 => "111111111110000000", 
    249 => "111111111101101110", 250 => "111111111101010101", 
    251 => "111111111100110011", 252 => "111111111100000000", 
    253 => "111111111010101011", 254 => "111111111000000000", 
    255 => "111111110000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_invert_8jQ is
    generic (
        DataWidth : INTEGER := 18;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_invert_8jQ is
    component softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_invert_8jQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_invert_8jQ_rom_U :  component softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config13_s_invert_8jQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


