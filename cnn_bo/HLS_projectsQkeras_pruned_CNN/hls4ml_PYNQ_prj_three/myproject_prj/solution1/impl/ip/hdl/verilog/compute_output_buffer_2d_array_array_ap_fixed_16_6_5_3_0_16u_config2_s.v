// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write,
        res_stream_V_data_0_V_blk_n,
        res_stream_V_data_1_V_blk_n,
        res_stream_V_data_2_V_blk_n,
        res_stream_V_data_3_V_blk_n,
        res_stream_V_data_4_V_blk_n,
        res_stream_V_data_5_V_blk_n,
        res_stream_V_data_6_V_blk_n,
        res_stream_V_data_7_V_blk_n,
        res_stream_V_data_8_V_blk_n,
        res_stream_V_data_9_V_blk_n,
        res_stream_V_data_10_V_blk_n,
        res_stream_V_data_11_V_blk_n,
        res_stream_V_data_12_V_blk_n,
        res_stream_V_data_13_V_blk_n,
        res_stream_V_data_14_V_blk_n,
        res_stream_V_data_15_V_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [15:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [15:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [15:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [15:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [15:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [15:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;
output   res_stream_V_data_0_V_blk_n;
output   res_stream_V_data_1_V_blk_n;
output   res_stream_V_data_2_V_blk_n;
output   res_stream_V_data_3_V_blk_n;
output   res_stream_V_data_4_V_blk_n;
output   res_stream_V_data_5_V_blk_n;
output   res_stream_V_data_6_V_blk_n;
output   res_stream_V_data_7_V_blk_n;
output   res_stream_V_data_8_V_blk_n;
output   res_stream_V_data_9_V_blk_n;
output   res_stream_V_data_10_V_blk_n;
output   res_stream_V_data_11_V_blk_n;
output   res_stream_V_data_12_V_blk_n;
output   res_stream_V_data_13_V_blk_n;
output   res_stream_V_data_14_V_blk_n;
output   res_stream_V_data_15_V_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;
reg res_stream_V_data_0_V_blk_n;
reg res_stream_V_data_1_V_blk_n;
reg res_stream_V_data_2_V_blk_n;
reg res_stream_V_data_3_V_blk_n;
reg res_stream_V_data_4_V_blk_n;
reg res_stream_V_data_5_V_blk_n;
reg res_stream_V_data_6_V_blk_n;
reg res_stream_V_data_7_V_blk_n;
reg res_stream_V_data_8_V_blk_n;
reg res_stream_V_data_9_V_blk_n;
reg res_stream_V_data_10_V_blk_n;
reg res_stream_V_data_11_V_blk_n;
reg res_stream_V_data_12_V_blk_n;
reg res_stream_V_data_13_V_blk_n;
reg res_stream_V_data_14_V_blk_n;
reg res_stream_V_data_15_V_blk_n;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] kernel_data_V_1_1;
reg   [15:0] kernel_data_V_1_2;
reg   [15:0] kernel_data_V_1_4;
reg   [15:0] kernel_data_V_1_5;
reg   [15:0] kernel_data_V_1_7;
reg   [15:0] kernel_data_V_1_8;
reg   [31:0] sX_2;
reg   [31:0] sY_2;
reg   [31:0] pY_2;
reg   [31:0] pX_2;
wire    ap_CS_fsm_state4;
reg   [0:0] and_ln289_2_reg_567;
reg   [15:0] kernel_data_V_1_6_ret_reg_522;
reg   [15:0] kernel_data_V_1_3_ret_reg_527;
reg   [15:0] kernel_data_V_1_0_ret_reg_532;
reg   [15:0] kernel_data_V_1_1_ret_reg_537;
reg   [15:0] kernel_data_V_1_2_ret_reg_542;
reg   [15:0] kernel_data_V_1_4_ret_reg_547;
reg   [15:0] kernel_data_V_1_5_ret_reg_552;
reg   [15:0] kernel_data_V_1_7_ret_reg_557;
reg   [15:0] kernel_data_V_1_8_ret_reg_562;
wire   [0:0] and_ln289_2_fu_363_p2;
wire   [0:0] icmp_ln313_fu_369_p2;
reg   [0:0] icmp_ln313_reg_571;
wire   [31:0] select_ln328_fu_393_p3;
reg   [31:0] select_ln328_reg_575;
wire   [0:0] icmp_ln317_fu_413_p2;
reg   [0:0] icmp_ln317_reg_580;
wire   [31:0] select_ln323_fu_437_p3;
reg   [31:0] select_ln323_reg_584;
reg   [15:0] tmp_data_0_V_reg_589;
wire    ap_CS_fsm_state3;
reg   [15:0] tmp_data_1_V_reg_594;
reg   [15:0] tmp_data_3_V_reg_599;
reg   [15:0] tmp_data_4_V_reg_604;
reg   [15:0] tmp_data_5_V_reg_609;
reg   [15:0] tmp_data_6_V_reg_614;
reg   [15:0] tmp_data_7_V_reg_619;
reg   [15:0] tmp_data_8_V_reg_624;
reg   [15:0] tmp_data_9_V_reg_629;
reg   [15:0] tmp_data_10_V_reg_634;
reg   [15:0] tmp_data_11_V_reg_639;
reg   [15:0] tmp_data_12_V_reg_644;
reg   [15:0] tmp_data_13_V_reg_649;
reg   [15:0] tmp_data_14_V_reg_654;
reg   [15:0] tmp_data_15_V_reg_659;
wire    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start;
wire    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_done;
wire    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_idle;
wire    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ready;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_0;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_1;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_2;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_3;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_4;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_5;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_6;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_7;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_8;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_9;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_10;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_11;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_12;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_13;
wire   [15:0] grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_14;
reg    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce;
wire    ap_CS_fsm_state2;
reg    call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start;
wire    call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_done;
wire    call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_idle;
wire    call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ready;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_0;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_1;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_2;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_3;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_4;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_5;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_6;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_7;
wire   [15:0] call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_8;
reg    call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce;
reg   [31:0] storemerge_reg_149;
reg    grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire   [31:0] add_ln321_fu_419_p2;
wire   [31:0] add_ln326_fu_375_p2;
wire    io_acc_block_signal_op95;
reg    ap_block_state4;
wire   [30:0] tmp_fu_315_p4;
wire   [30:0] tmp_143_fu_335_p4;
wire   [0:0] icmp_ln289_fu_295_p2;
wire   [0:0] icmp_ln289_1_fu_305_p2;
wire   [0:0] icmp_ln289_4_fu_325_p2;
wire   [0:0] icmp_ln289_5_fu_345_p2;
wire   [0:0] and_ln289_1_fu_357_p2;
wire   [0:0] and_ln289_fu_351_p2;
wire   [31:0] add_ln328_fu_387_p2;
wire   [31:0] add_ln323_fu_431_p2;
reg    ap_condition_133;
reg    ap_condition_742;
reg    ap_condition_746;
reg    ap_condition_741;
reg    ap_condition_752;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 kernel_data_V_1_1 = 16'd0;
#0 kernel_data_V_1_2 = 16'd0;
#0 kernel_data_V_1_4 = 16'd0;
#0 kernel_data_V_1_5 = 16'd0;
#0 kernel_data_V_1_7 = 16'd0;
#0 kernel_data_V_1_8 = 16'd0;
#0 sX_2 = 32'd0;
#0 sY_2 = 32'd0;
#0 pY_2 = 32'd0;
#0 pX_2 = 32'd0;
#0 grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg = 1'b0;
end

dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0 grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start),
    .ap_done(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_done),
    .ap_idle(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_idle),
    .ap_ready(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ready),
    .data_0_V_read(kernel_data_V_1_0_ret_reg_532),
    .data_1_V_read(kernel_data_V_1_1_ret_reg_537),
    .data_2_V_read(kernel_data_V_1_2_ret_reg_542),
    .data_3_V_read(kernel_data_V_1_3_ret_reg_527),
    .data_4_V_read(kernel_data_V_1_4_ret_reg_547),
    .data_5_V_read(kernel_data_V_1_5_ret_reg_552),
    .data_6_V_read(kernel_data_V_1_6_ret_reg_522),
    .data_7_V_read(kernel_data_V_1_7_ret_reg_557),
    .data_8_V_read(kernel_data_V_1_8_ret_reg_562),
    .ap_return_0(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_0),
    .ap_return_1(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_1),
    .ap_return_2(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_2),
    .ap_return_3(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_3),
    .ap_return_4(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_4),
    .ap_return_5(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_5),
    .ap_return_6(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_6),
    .ap_return_7(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_7),
    .ap_return_8(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_8),
    .ap_return_9(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_9),
    .ap_return_10(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_10),
    .ap_return_11(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_11),
    .ap_return_12(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_12),
    .ap_return_13(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_13),
    .ap_return_14(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_14),
    .ap_ce(grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce)
);

shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start),
    .ap_done(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_done),
    .ap_idle(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_idle),
    .ap_ready(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ready),
    .kernel_window_8_V_write(p_read),
    .kernel_window_1_V_read(kernel_data_V_1_1),
    .kernel_window_2_V_read(kernel_data_V_1_2),
    .kernel_window_4_V_read(kernel_data_V_1_4),
    .kernel_window_5_V_read(kernel_data_V_1_5),
    .kernel_window_7_V_read(kernel_data_V_1_7),
    .kernel_window_8_V_read(kernel_data_V_1_8),
    .ap_return_0(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_0),
    .ap_return_1(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_1),
    .ap_return_2(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_2),
    .ap_return_3(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_3),
    .ap_return_4(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_4),
    .ap_return_5(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_5),
    .ap_return_6(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_6),
    .ap_return_7(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_7),
    .ap_return_8(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_8),
    .ap_ce(call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state2) & (1'b1 == ap_CS_fsm_state1) & (1'd1 == and_ln289_2_fu_363_p2))) begin
            grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg <= 1'b1;
        end else if ((grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ready == 1'b1)) begin
            grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_133)) begin
        if ((icmp_ln313_fu_369_p2 == 1'd1)) begin
            pX_2 <= 32'd0;
        end else if ((icmp_ln313_fu_369_p2 == 1'd0)) begin
            pX_2 <= add_ln326_fu_375_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_condition_746)) begin
            pY_2 <= 32'd0;
        end else if ((1'b1 == ap_condition_742)) begin
            pY_2 <= add_ln321_fu_419_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln313_reg_571 == 1'd0))) begin
            sX_2 <= select_ln328_reg_575;
        end else if ((1'b1 == ap_condition_741)) begin
            sX_2 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_752)) begin
        if ((icmp_ln317_reg_580 == 1'd1)) begin
            storemerge_reg_149 <= 32'd0;
        end else if ((icmp_ln317_reg_580 == 1'd0)) begin
            storemerge_reg_149 <= select_ln323_reg_584;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        and_ln289_2_reg_567 <= and_ln289_2_fu_363_p2;
        icmp_ln313_reg_571 <= icmp_ln313_fu_369_p2;
        kernel_data_V_1_0_ret_reg_532 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_0;
        kernel_data_V_1_1 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_3;
        kernel_data_V_1_1_ret_reg_537 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_3;
        kernel_data_V_1_2 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_4;
        kernel_data_V_1_2_ret_reg_542 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_4;
        kernel_data_V_1_3_ret_reg_527 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_1;
        kernel_data_V_1_4 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_5;
        kernel_data_V_1_4_ret_reg_547 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_5;
        kernel_data_V_1_5 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_6;
        kernel_data_V_1_5_ret_reg_552 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_6;
        kernel_data_V_1_6_ret_reg_522 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_2;
        kernel_data_V_1_7 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_7;
        kernel_data_V_1_7_ret_reg_557 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_7;
        kernel_data_V_1_8 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_8;
        kernel_data_V_1_8_ret_reg_562 <= call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_return_8;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce) & (icmp_ln313_fu_369_p2 == 1'd1))) begin
        icmp_ln317_reg_580 <= icmp_ln317_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce) & (icmp_ln313_reg_571 == 1'd1))) begin
        sY_2 <= storemerge_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln317_fu_413_p2 == 1'd0) & (1'b1 == ap_ce) & (icmp_ln313_fu_369_p2 == 1'd1))) begin
        select_ln323_reg_584 <= select_ln323_fu_437_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln313_fu_369_p2 == 1'd0) & (1'b1 == ap_ce))) begin
        select_ln328_reg_575 <= select_ln328_fu_393_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        tmp_data_0_V_reg_589 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_0;
        tmp_data_10_V_reg_634 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_9;
        tmp_data_11_V_reg_639 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_10;
        tmp_data_12_V_reg_644 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_11;
        tmp_data_13_V_reg_649 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_12;
        tmp_data_14_V_reg_654 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_13;
        tmp_data_15_V_reg_659 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_14;
        tmp_data_1_V_reg_594 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_1;
        tmp_data_3_V_reg_599 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_2;
        tmp_data_4_V_reg_604 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_3;
        tmp_data_5_V_reg_609 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_4;
        tmp_data_6_V_reg_614 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_5;
        tmp_data_7_V_reg_619 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_6;
        tmp_data_8_V_reg_624 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_7;
        tmp_data_9_V_reg_629 <= grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_return_8;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce = 1'b1;
    end else begin
        call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start = 1'b1;
    end else begin
        call_ret1_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_173_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3)))) begin
        grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce = 1'b1;
    end else begin
        grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce) & (1'd1 == and_ln289_2_reg_567))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_fu_419_p2 = (pY_2 + 32'd1);

assign add_ln323_fu_431_p2 = (sY_2 + 32'd1);

assign add_ln326_fu_375_p2 = (pX_2 + 32'd1);

assign add_ln328_fu_387_p2 = (sX_2 + 32'd1);

assign and_ln289_1_fu_357_p2 = (icmp_ln289_5_fu_345_p2 & icmp_ln289_4_fu_325_p2);

assign and_ln289_2_fu_363_p2 = (and_ln289_fu_351_p2 & and_ln289_1_fu_357_p2);

assign and_ln289_fu_351_p2 = (icmp_ln289_fu_295_p2 & icmp_ln289_1_fu_305_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state4 = ((io_acc_block_signal_op95 == 1'b0) & (1'd1 == and_ln289_2_reg_567));
end

always @ (*) begin
    ap_condition_133 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce));
end

always @ (*) begin
    ap_condition_741 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln313_fu_369_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_742 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln317_fu_413_p2 == 1'd0) & (icmp_ln313_fu_369_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_746 = ((1'b1 == ap_CS_fsm_state2) & (icmp_ln317_reg_580 == 1'd1) & (icmp_ln313_reg_571 == 1'd1));
end

always @ (*) begin
    ap_condition_752 = ((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce) & (icmp_ln313_reg_571 == 1'd1));
end

assign grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start = grp_dense_latency_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_160_ap_start_reg;

assign icmp_ln289_1_fu_305_p2 = ((sY_2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln289_4_fu_325_p2 = (($signed(tmp_fu_315_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln289_5_fu_345_p2 = (($signed(tmp_143_fu_335_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln289_fu_295_p2 = ((sX_2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln313_fu_369_p2 = ((pX_2 == 32'd27) ? 1'b1 : 1'b0);

assign icmp_ln317_fu_413_p2 = ((pY_2 == 32'd27) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op95 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V_reg_589;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_634;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_639;

assign res_stream_V_data_12_V_din = tmp_data_12_V_reg_644;

assign res_stream_V_data_13_V_din = tmp_data_13_V_reg_649;

assign res_stream_V_data_14_V_din = tmp_data_14_V_reg_654;

assign res_stream_V_data_15_V_din = tmp_data_15_V_reg_659;

assign res_stream_V_data_1_V_din = tmp_data_1_V_reg_594;

assign res_stream_V_data_2_V_din = 16'd0;

assign res_stream_V_data_3_V_din = tmp_data_3_V_reg_599;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_604;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_609;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_614;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_619;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_624;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_629;

assign select_ln323_fu_437_p3 = ((icmp_ln289_1_fu_305_p2[0:0] === 1'b1) ? 32'd2 : add_ln323_fu_431_p2);

assign select_ln328_fu_393_p3 = ((icmp_ln289_fu_295_p2[0:0] === 1'b1) ? 32'd2 : add_ln328_fu_387_p2);

assign tmp_143_fu_335_p4 = {{pX_2[31:1]}};

assign tmp_fu_315_p4 = {{pY_2[31:1]}};

endmodule //compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config2_s
