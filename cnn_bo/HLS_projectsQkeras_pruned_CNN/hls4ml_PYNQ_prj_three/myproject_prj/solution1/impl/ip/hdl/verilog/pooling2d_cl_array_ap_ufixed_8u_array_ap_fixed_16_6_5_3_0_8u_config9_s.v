// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [2:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [2:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [2:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [2:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [2:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [2:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [2:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [2:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [2:0] kernel_data_V_3_8;
reg   [2:0] kernel_data_V_3_9;
reg   [2:0] kernel_data_V_3_10;
reg   [2:0] kernel_data_V_3_11;
reg   [2:0] kernel_data_V_3_12;
reg   [2:0] kernel_data_V_3_13;
reg   [2:0] kernel_data_V_3_14;
reg   [2:0] kernel_data_V_3_15;
reg   [2:0] kernel_data_V_3_24;
reg   [2:0] kernel_data_V_3_25;
reg   [2:0] kernel_data_V_3_26;
reg   [2:0] kernel_data_V_3_27;
reg   [2:0] kernel_data_V_3_28;
reg   [2:0] kernel_data_V_3_29;
reg   [2:0] kernel_data_V_3_30;
reg   [2:0] kernel_data_V_3_31;
reg    line_buffer_Array_V_3_0_0_ce0;
reg    line_buffer_Array_V_3_0_0_we0;
wire   [2:0] line_buffer_Array_V_3_0_0_q0;
reg    line_buffer_Array_V_3_0_1_ce0;
reg    line_buffer_Array_V_3_0_1_we0;
wire   [2:0] line_buffer_Array_V_3_0_1_q0;
reg    line_buffer_Array_V_3_0_2_ce0;
reg    line_buffer_Array_V_3_0_2_we0;
wire   [2:0] line_buffer_Array_V_3_0_2_q0;
reg    line_buffer_Array_V_3_0_3_ce0;
reg    line_buffer_Array_V_3_0_3_we0;
wire   [2:0] line_buffer_Array_V_3_0_3_q0;
reg    line_buffer_Array_V_3_0_4_ce0;
reg    line_buffer_Array_V_3_0_4_we0;
wire   [2:0] line_buffer_Array_V_3_0_4_q0;
reg    line_buffer_Array_V_3_0_5_ce0;
reg    line_buffer_Array_V_3_0_5_we0;
wire   [2:0] line_buffer_Array_V_3_0_5_q0;
reg    line_buffer_Array_V_3_0_6_ce0;
reg    line_buffer_Array_V_3_0_6_we0;
wire   [2:0] line_buffer_Array_V_3_0_6_q0;
reg    line_buffer_Array_V_3_0_7_ce0;
reg    line_buffer_Array_V_3_0_7_we0;
wire   [2:0] line_buffer_Array_V_3_0_7_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln241_reg_1601;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] and_ln191_2_reg_1706;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [6:0] indvar_flatten_reg_216;
wire   [0:0] icmp_ln241_fu_238_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln241_reg_1601_pp0_iter1_reg;
wire   [6:0] add_ln241_fu_244_p2;
reg   [6:0] add_ln241_reg_1605;
reg   [2:0] shift_buffer_1_0_V_reg_1610;
wire    io_acc_block_signal_op28;
reg    ap_block_state3_pp0_stage1_iter0;
wire    io_acc_block_signal_op256;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [2:0] shift_buffer_1_1_V_reg_1616;
reg   [2:0] shift_buffer_1_2_V_reg_1622;
reg   [2:0] shift_buffer_1_3_V_reg_1628;
reg   [2:0] shift_buffer_1_4_V_reg_1634;
reg   [2:0] shift_buffer_1_5_V_reg_1640;
reg   [2:0] shift_buffer_1_6_V_reg_1646;
reg   [2:0] shift_buffer_1_7_V_reg_1652;
reg   [2:0] DataOut_V_71_reg_1658;
reg   [2:0] DataOut_V_72_reg_1664;
reg   [2:0] DataOut_V_73_reg_1670;
reg   [2:0] DataOut_V_74_reg_1676;
reg   [2:0] DataOut_V_75_reg_1682;
reg   [2:0] DataOut_V_76_reg_1688;
reg   [2:0] DataOut_V_77_reg_1694;
reg   [2:0] DataOut_V_reg_1700;
wire   [0:0] and_ln191_2_fu_558_p2;
wire   [4:0] pool_window_0_V_fu_564_p3;
reg   [4:0] pool_window_0_V_reg_1710;
wire   [4:0] pool_window_1_V_fu_572_p3;
reg   [4:0] pool_window_1_V_reg_1715;
wire   [4:0] pool_window_2_V_fu_579_p3;
reg   [4:0] pool_window_2_V_reg_1720;
wire   [4:0] pool_window_3_V_fu_587_p3;
reg   [4:0] pool_window_3_V_reg_1725;
wire   [1:0] select_ln65_11_fu_640_p3;
reg   [1:0] select_ln65_11_reg_1730;
wire   [4:0] pool_window_0_V_2_fu_648_p3;
reg   [4:0] pool_window_0_V_2_reg_1735;
wire   [4:0] pool_window_1_V_2_fu_656_p3;
reg   [4:0] pool_window_1_V_2_reg_1740;
wire   [4:0] pool_window_2_V_2_fu_663_p3;
reg   [4:0] pool_window_2_V_2_reg_1745;
wire   [4:0] pool_window_3_V_2_fu_671_p3;
reg   [4:0] pool_window_3_V_2_reg_1750;
wire   [1:0] select_ln65_15_fu_724_p3;
reg   [1:0] select_ln65_15_reg_1755;
wire   [4:0] pool_window_0_V_4_fu_732_p3;
reg   [4:0] pool_window_0_V_4_reg_1760;
wire   [4:0] pool_window_1_V_4_fu_740_p3;
reg   [4:0] pool_window_1_V_4_reg_1765;
wire   [4:0] pool_window_2_V_4_fu_747_p3;
reg   [4:0] pool_window_2_V_4_reg_1770;
wire   [4:0] pool_window_3_V_4_fu_755_p3;
reg   [4:0] pool_window_3_V_4_reg_1775;
wire   [1:0] select_ln65_19_fu_808_p3;
reg   [1:0] select_ln65_19_reg_1780;
wire   [4:0] pool_window_0_V_6_fu_816_p3;
reg   [4:0] pool_window_0_V_6_reg_1785;
wire   [4:0] pool_window_1_V_6_fu_824_p3;
reg   [4:0] pool_window_1_V_6_reg_1790;
wire   [4:0] pool_window_2_V_6_fu_831_p3;
reg   [4:0] pool_window_2_V_6_reg_1795;
wire   [4:0] pool_window_3_V_6_fu_839_p3;
reg   [4:0] pool_window_3_V_6_reg_1800;
wire   [1:0] select_ln65_23_fu_892_p3;
reg   [1:0] select_ln65_23_reg_1805;
wire   [4:0] pool_window_0_V_8_fu_900_p3;
reg   [4:0] pool_window_0_V_8_reg_1810;
wire   [4:0] pool_window_1_V_8_fu_908_p3;
reg   [4:0] pool_window_1_V_8_reg_1815;
wire   [4:0] pool_window_2_V_8_fu_915_p3;
reg   [4:0] pool_window_2_V_8_reg_1820;
wire   [4:0] pool_window_3_V_8_fu_923_p3;
reg   [4:0] pool_window_3_V_8_reg_1825;
wire   [1:0] select_ln65_27_fu_976_p3;
reg   [1:0] select_ln65_27_reg_1830;
wire   [4:0] pool_window_0_V_10_fu_984_p3;
reg   [4:0] pool_window_0_V_10_reg_1835;
wire   [4:0] pool_window_1_V_10_fu_992_p3;
reg   [4:0] pool_window_1_V_10_reg_1840;
wire   [4:0] pool_window_2_V_10_fu_999_p3;
reg   [4:0] pool_window_2_V_10_reg_1845;
wire   [4:0] pool_window_3_V_10_fu_1007_p3;
reg   [4:0] pool_window_3_V_10_reg_1850;
wire   [1:0] select_ln65_31_fu_1060_p3;
reg   [1:0] select_ln65_31_reg_1855;
wire   [4:0] pool_window_0_V_12_fu_1068_p3;
reg   [4:0] pool_window_0_V_12_reg_1860;
wire   [4:0] pool_window_1_V_12_fu_1076_p3;
reg   [4:0] pool_window_1_V_12_reg_1865;
wire   [4:0] pool_window_2_V_12_fu_1083_p3;
reg   [4:0] pool_window_2_V_12_reg_1870;
wire   [4:0] pool_window_3_V_12_fu_1091_p3;
reg   [4:0] pool_window_3_V_12_reg_1875;
wire   [1:0] select_ln65_33_fu_1144_p3;
reg   [1:0] select_ln65_33_reg_1880;
wire   [4:0] pool_window_0_V_14_fu_1152_p3;
reg   [4:0] pool_window_0_V_14_reg_1885;
wire   [4:0] pool_window_1_V_14_fu_1160_p3;
reg   [4:0] pool_window_1_V_14_reg_1890;
wire   [4:0] pool_window_2_V_14_fu_1167_p3;
reg   [4:0] pool_window_2_V_14_reg_1895;
wire   [4:0] pool_window_3_V_14_fu_1175_p3;
reg   [4:0] pool_window_3_V_14_reg_1900;
wire   [1:0] select_ln65_35_fu_1228_p3;
reg   [1:0] select_ln65_35_reg_1905;
wire   [0:0] icmp_ln212_fu_1236_p2;
reg   [0:0] icmp_ln212_reg_1910;
wire   [31:0] select_ln227_fu_1260_p3;
reg   [31:0] select_ln227_reg_1914;
wire   [0:0] icmp_ln216_fu_1280_p2;
reg   [0:0] icmp_ln216_reg_1919;
wire   [31:0] select_ln222_fu_1304_p3;
reg   [31:0] select_ln222_reg_1923;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_220_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_231_p4;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_227;
wire   [31:0] add_ln225_fu_1242_p2;
wire   [31:0] add_ln220_fu_1286_p2;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln191_fu_510_p2;
wire   [0:0] icmp_ln191_1_fu_520_p2;
wire   [0:0] icmp_ln191_2_fu_530_p2;
wire   [0:0] icmp_ln191_3_fu_540_p2;
wire   [0:0] and_ln191_1_fu_552_p2;
wire   [0:0] and_ln191_fu_546_p2;
wire   [0:0] icmp_ln1496_fu_594_p2;
wire   [0:0] icmp_ln1496_1_fu_608_p2;
wire   [4:0] select_ln65_fu_600_p3;
wire   [4:0] select_ln65_2_fu_622_p3;
wire   [0:0] icmp_ln1496_2_fu_630_p2;
wire   [1:0] select_ln65_9_fu_614_p3;
wire   [1:0] zext_ln65_fu_636_p1;
wire   [0:0] icmp_ln1496_8_fu_678_p2;
wire   [0:0] icmp_ln1496_9_fu_692_p2;
wire   [4:0] select_ln65_4_fu_684_p3;
wire   [4:0] select_ln65_6_fu_706_p3;
wire   [0:0] icmp_ln1496_10_fu_714_p2;
wire   [1:0] select_ln65_13_fu_698_p3;
wire   [1:0] zext_ln65_1_fu_720_p1;
wire   [0:0] icmp_ln1496_11_fu_762_p2;
wire   [0:0] icmp_ln1496_12_fu_776_p2;
wire   [4:0] select_ln65_8_fu_768_p3;
wire   [4:0] select_ln65_10_fu_790_p3;
wire   [0:0] icmp_ln1496_13_fu_798_p2;
wire   [1:0] select_ln65_17_fu_782_p3;
wire   [1:0] zext_ln65_2_fu_804_p1;
wire   [0:0] icmp_ln1496_3_fu_846_p2;
wire   [0:0] icmp_ln1496_14_fu_860_p2;
wire   [4:0] select_ln65_12_fu_852_p3;
wire   [4:0] select_ln65_14_fu_874_p3;
wire   [0:0] icmp_ln1496_15_fu_882_p2;
wire   [1:0] select_ln65_21_fu_866_p3;
wire   [1:0] zext_ln65_3_fu_888_p1;
wire   [0:0] icmp_ln1496_4_fu_930_p2;
wire   [0:0] icmp_ln1496_16_fu_944_p2;
wire   [4:0] select_ln65_16_fu_936_p3;
wire   [4:0] select_ln65_18_fu_958_p3;
wire   [0:0] icmp_ln1496_17_fu_966_p2;
wire   [1:0] select_ln65_25_fu_950_p3;
wire   [1:0] zext_ln65_4_fu_972_p1;
wire   [0:0] icmp_ln1496_5_fu_1014_p2;
wire   [0:0] icmp_ln1496_18_fu_1028_p2;
wire   [4:0] select_ln65_20_fu_1020_p3;
wire   [4:0] select_ln65_22_fu_1042_p3;
wire   [0:0] icmp_ln1496_19_fu_1050_p2;
wire   [1:0] select_ln65_29_fu_1034_p3;
wire   [1:0] zext_ln65_5_fu_1056_p1;
wire   [0:0] icmp_ln1496_6_fu_1098_p2;
wire   [0:0] icmp_ln1496_20_fu_1112_p2;
wire   [4:0] select_ln65_24_fu_1104_p3;
wire   [4:0] select_ln65_26_fu_1126_p3;
wire   [0:0] icmp_ln1496_21_fu_1134_p2;
wire   [1:0] select_ln65_32_fu_1118_p3;
wire   [1:0] zext_ln65_6_fu_1140_p1;
wire   [0:0] icmp_ln1496_7_fu_1182_p2;
wire   [0:0] icmp_ln1496_22_fu_1196_p2;
wire   [4:0] select_ln65_28_fu_1188_p3;
wire   [4:0] select_ln65_30_fu_1210_p3;
wire   [0:0] icmp_ln1496_23_fu_1218_p2;
wire   [1:0] select_ln65_34_fu_1202_p3;
wire   [1:0] zext_ln65_7_fu_1224_p1;
wire   [31:0] add_ln227_fu_1254_p2;
wire   [31:0] add_ln222_fu_1298_p2;
wire   [9:0] tmp_21_fu_1330_p1;
wire   [9:0] tmp_21_fu_1330_p2;
wire   [9:0] tmp_21_fu_1330_p3;
wire   [9:0] tmp_21_fu_1330_p4;
wire   [9:0] tmp_21_fu_1330_p6;
wire   [9:0] tmp_22_fu_1364_p1;
wire   [9:0] tmp_22_fu_1364_p2;
wire   [9:0] tmp_22_fu_1364_p3;
wire   [9:0] tmp_22_fu_1364_p4;
wire   [9:0] tmp_22_fu_1364_p6;
wire   [9:0] tmp_23_fu_1398_p1;
wire   [9:0] tmp_23_fu_1398_p2;
wire   [9:0] tmp_23_fu_1398_p3;
wire   [9:0] tmp_23_fu_1398_p4;
wire   [9:0] tmp_23_fu_1398_p6;
wire   [9:0] tmp_24_fu_1432_p1;
wire   [9:0] tmp_24_fu_1432_p2;
wire   [9:0] tmp_24_fu_1432_p3;
wire   [9:0] tmp_24_fu_1432_p4;
wire   [9:0] tmp_24_fu_1432_p6;
wire   [9:0] tmp_25_fu_1466_p1;
wire   [9:0] tmp_25_fu_1466_p2;
wire   [9:0] tmp_25_fu_1466_p3;
wire   [9:0] tmp_25_fu_1466_p4;
wire   [9:0] tmp_25_fu_1466_p6;
wire   [9:0] tmp_26_fu_1500_p1;
wire   [9:0] tmp_26_fu_1500_p2;
wire   [9:0] tmp_26_fu_1500_p3;
wire   [9:0] tmp_26_fu_1500_p4;
wire   [9:0] tmp_26_fu_1500_p6;
wire   [9:0] tmp_27_fu_1534_p1;
wire   [9:0] tmp_27_fu_1534_p2;
wire   [9:0] tmp_27_fu_1534_p3;
wire   [9:0] tmp_27_fu_1534_p4;
wire   [9:0] tmp_27_fu_1534_p6;
wire   [9:0] tmp_28_fu_1568_p1;
wire   [9:0] tmp_28_fu_1568_p2;
wire   [9:0] tmp_28_fu_1568_p3;
wire   [9:0] tmp_28_fu_1568_p4;
wire   [9:0] tmp_28_fu_1568_p6;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_424;
reg    ap_condition_1268;
reg    ap_condition_396;
reg    ap_condition_1273;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_3_8 = 3'd0;
#0 kernel_data_V_3_9 = 3'd0;
#0 kernel_data_V_3_10 = 3'd0;
#0 kernel_data_V_3_11 = 3'd0;
#0 kernel_data_V_3_12 = 3'd0;
#0 kernel_data_V_3_13 = 3'd0;
#0 kernel_data_V_3_14 = 3'd0;
#0 kernel_data_V_3_15 = 3'd0;
#0 kernel_data_V_3_24 = 3'd0;
#0 kernel_data_V_3_25 = 3'd0;
#0 kernel_data_V_3_26 = 3'd0;
#0 kernel_data_V_3_27 = 3'd0;
#0 kernel_data_V_3_28 = 3'd0;
#0 kernel_data_V_3_29 = 3'd0;
#0 kernel_data_V_3_30 = 3'd0;
#0 kernel_data_V_3_31 = 3'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio #(
    .DataWidth( 3 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_3_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(line_buffer_Array_V_3_0_0_ce0),
    .we0(line_buffer_Array_V_3_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_3_0_0_q0)
);

pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio #(
    .DataWidth( 3 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_3_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(line_buffer_Array_V_3_0_1_ce0),
    .we0(line_buffer_Array_V_3_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_3_0_1_q0)
);

pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio #(
    .DataWidth( 3 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_3_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(line_buffer_Array_V_3_0_2_ce0),
    .we0(line_buffer_Array_V_3_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_3_0_2_q0)
);

pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio #(
    .DataWidth( 3 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_3_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(line_buffer_Array_V_3_0_3_ce0),
    .we0(line_buffer_Array_V_3_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_3_0_3_q0)
);

pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio #(
    .DataWidth( 3 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_3_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(line_buffer_Array_V_3_0_4_ce0),
    .we0(line_buffer_Array_V_3_0_4_we0),
    .d0(data_V_data_4_V_dout),
    .q0(line_buffer_Array_V_3_0_4_q0)
);

pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio #(
    .DataWidth( 3 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_3_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(line_buffer_Array_V_3_0_5_ce0),
    .we0(line_buffer_Array_V_3_0_5_we0),
    .d0(data_V_data_5_V_dout),
    .q0(line_buffer_Array_V_3_0_5_q0)
);

pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio #(
    .DataWidth( 3 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_3_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(line_buffer_Array_V_3_0_6_ce0),
    .we0(line_buffer_Array_V_3_0_6_we0),
    .d0(data_V_data_6_V_dout),
    .q0(line_buffer_Array_V_3_0_6_q0)
);

pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio #(
    .DataWidth( 3 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_3_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd10),
    .ce0(line_buffer_Array_V_3_0_7_ce0),
    .we0(line_buffer_Array_V_3_0_7_we0),
    .d0(data_V_data_7_V_dout),
    .q0(line_buffer_Array_V_3_0_7_q0)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U445(
    .din0(tmp_21_fu_1330_p1),
    .din1(tmp_21_fu_1330_p2),
    .din2(tmp_21_fu_1330_p3),
    .din3(tmp_21_fu_1330_p4),
    .din4(select_ln65_11_reg_1730),
    .dout(tmp_21_fu_1330_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U446(
    .din0(tmp_22_fu_1364_p1),
    .din1(tmp_22_fu_1364_p2),
    .din2(tmp_22_fu_1364_p3),
    .din3(tmp_22_fu_1364_p4),
    .din4(select_ln65_15_reg_1755),
    .dout(tmp_22_fu_1364_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U447(
    .din0(tmp_23_fu_1398_p1),
    .din1(tmp_23_fu_1398_p2),
    .din2(tmp_23_fu_1398_p3),
    .din3(tmp_23_fu_1398_p4),
    .din4(select_ln65_19_reg_1780),
    .dout(tmp_23_fu_1398_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U448(
    .din0(tmp_24_fu_1432_p1),
    .din1(tmp_24_fu_1432_p2),
    .din2(tmp_24_fu_1432_p3),
    .din3(tmp_24_fu_1432_p4),
    .din4(select_ln65_23_reg_1805),
    .dout(tmp_24_fu_1432_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U449(
    .din0(tmp_25_fu_1466_p1),
    .din1(tmp_25_fu_1466_p2),
    .din2(tmp_25_fu_1466_p3),
    .din3(tmp_25_fu_1466_p4),
    .din4(select_ln65_27_reg_1830),
    .dout(tmp_25_fu_1466_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U450(
    .din0(tmp_26_fu_1500_p1),
    .din1(tmp_26_fu_1500_p2),
    .din2(tmp_26_fu_1500_p3),
    .din3(tmp_26_fu_1500_p4),
    .din4(select_ln65_31_reg_1855),
    .dout(tmp_26_fu_1500_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U451(
    .din0(tmp_27_fu_1534_p1),
    .din1(tmp_27_fu_1534_p2),
    .din2(tmp_27_fu_1534_p3),
    .din3(tmp_27_fu_1534_p4),
    .din4(select_ln65_33_reg_1880),
    .dout(tmp_27_fu_1534_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U452(
    .din0(tmp_28_fu_1568_p1),
    .din1(tmp_28_fu_1568_p2),
    .din2(tmp_28_fu_1568_p3),
    .din3(tmp_28_fu_1568_p4),
    .din4(select_ln65_35_reg_1905),
    .dout(tmp_28_fu_1568_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln216_fu_1280_p2 == 1'd1) & (icmp_ln212_fu_1236_p2 == 1'd1) & (icmp_ln241_reg_1601 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1601 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_216 <= add_ln241_reg_1605;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_216 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_424)) begin
        if ((icmp_ln212_fu_1236_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln212_fu_1236_p2 == 1'd0)) begin
            pX <= add_ln225_fu_1242_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1268)) begin
        if ((icmp_ln216_fu_1280_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln216_fu_1280_p2 == 1'd0)) begin
            pY <= add_ln220_fu_1286_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1273)) begin
            sX <= select_ln227_reg_1914;
        end else if ((1'b1 == ap_condition_396)) begin
            sX <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        DataOut_V_71_reg_1658 <= line_buffer_Array_V_3_0_0_q0;
        DataOut_V_72_reg_1664 <= line_buffer_Array_V_3_0_1_q0;
        DataOut_V_73_reg_1670 <= line_buffer_Array_V_3_0_2_q0;
        DataOut_V_74_reg_1676 <= line_buffer_Array_V_3_0_3_q0;
        DataOut_V_75_reg_1682 <= line_buffer_Array_V_3_0_4_q0;
        DataOut_V_76_reg_1688 <= line_buffer_Array_V_3_0_5_q0;
        DataOut_V_77_reg_1694 <= line_buffer_Array_V_3_0_6_q0;
        DataOut_V_reg_1700 <= line_buffer_Array_V_3_0_7_q0;
        shift_buffer_1_0_V_reg_1610 <= data_V_data_0_V_dout;
        shift_buffer_1_1_V_reg_1616 <= data_V_data_1_V_dout;
        shift_buffer_1_2_V_reg_1622 <= data_V_data_2_V_dout;
        shift_buffer_1_3_V_reg_1628 <= data_V_data_3_V_dout;
        shift_buffer_1_4_V_reg_1634 <= data_V_data_4_V_dout;
        shift_buffer_1_5_V_reg_1640 <= data_V_data_5_V_dout;
        shift_buffer_1_6_V_reg_1646 <= data_V_data_6_V_dout;
        shift_buffer_1_7_V_reg_1652 <= data_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln241_reg_1605 <= add_ln241_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1601 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_2_reg_1706 <= and_ln191_2_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln212_reg_1910 <= icmp_ln212_fu_1236_p2;
        icmp_ln241_reg_1601 <= icmp_ln241_fu_238_p2;
        icmp_ln241_reg_1601_pp0_iter1_reg <= icmp_ln241_reg_1601;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_1236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln216_reg_1919 <= icmp_ln216_fu_1280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1601 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_data_V_3_10 <= DataOut_V_73_reg_1670;
        kernel_data_V_3_11 <= DataOut_V_74_reg_1676;
        kernel_data_V_3_12 <= DataOut_V_75_reg_1682;
        kernel_data_V_3_13 <= DataOut_V_76_reg_1688;
        kernel_data_V_3_14 <= DataOut_V_77_reg_1694;
        kernel_data_V_3_15 <= DataOut_V_reg_1700;
        kernel_data_V_3_24 <= shift_buffer_1_0_V_reg_1610;
        kernel_data_V_3_25 <= shift_buffer_1_1_V_reg_1616;
        kernel_data_V_3_26 <= shift_buffer_1_2_V_reg_1622;
        kernel_data_V_3_27 <= shift_buffer_1_3_V_reg_1628;
        kernel_data_V_3_28 <= shift_buffer_1_4_V_reg_1634;
        kernel_data_V_3_29 <= shift_buffer_1_5_V_reg_1640;
        kernel_data_V_3_30 <= shift_buffer_1_6_V_reg_1646;
        kernel_data_V_3_31 <= shift_buffer_1_7_V_reg_1652;
        kernel_data_V_3_8 <= DataOut_V_71_reg_1658;
        kernel_data_V_3_9 <= DataOut_V_72_reg_1664;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_2_fu_558_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_window_0_V_10_reg_1835[4 : 2] <= pool_window_0_V_10_fu_984_p3[4 : 2];
        pool_window_0_V_12_reg_1860[4 : 2] <= pool_window_0_V_12_fu_1068_p3[4 : 2];
        pool_window_0_V_14_reg_1885[4 : 2] <= pool_window_0_V_14_fu_1152_p3[4 : 2];
        pool_window_0_V_2_reg_1735[4 : 2] <= pool_window_0_V_2_fu_648_p3[4 : 2];
        pool_window_0_V_4_reg_1760[4 : 2] <= pool_window_0_V_4_fu_732_p3[4 : 2];
        pool_window_0_V_6_reg_1785[4 : 2] <= pool_window_0_V_6_fu_816_p3[4 : 2];
        pool_window_0_V_8_reg_1810[4 : 2] <= pool_window_0_V_8_fu_900_p3[4 : 2];
        pool_window_0_V_reg_1710[4 : 2] <= pool_window_0_V_fu_564_p3[4 : 2];
        pool_window_1_V_10_reg_1840[4 : 2] <= pool_window_1_V_10_fu_992_p3[4 : 2];
        pool_window_1_V_12_reg_1865[4 : 2] <= pool_window_1_V_12_fu_1076_p3[4 : 2];
        pool_window_1_V_14_reg_1890[4 : 2] <= pool_window_1_V_14_fu_1160_p3[4 : 2];
        pool_window_1_V_2_reg_1740[4 : 2] <= pool_window_1_V_2_fu_656_p3[4 : 2];
        pool_window_1_V_4_reg_1765[4 : 2] <= pool_window_1_V_4_fu_740_p3[4 : 2];
        pool_window_1_V_6_reg_1790[4 : 2] <= pool_window_1_V_6_fu_824_p3[4 : 2];
        pool_window_1_V_8_reg_1815[4 : 2] <= pool_window_1_V_8_fu_908_p3[4 : 2];
        pool_window_1_V_reg_1715[4 : 2] <= pool_window_1_V_fu_572_p3[4 : 2];
        pool_window_2_V_10_reg_1845[4 : 2] <= pool_window_2_V_10_fu_999_p3[4 : 2];
        pool_window_2_V_12_reg_1870[4 : 2] <= pool_window_2_V_12_fu_1083_p3[4 : 2];
        pool_window_2_V_14_reg_1895[4 : 2] <= pool_window_2_V_14_fu_1167_p3[4 : 2];
        pool_window_2_V_2_reg_1745[4 : 2] <= pool_window_2_V_2_fu_663_p3[4 : 2];
        pool_window_2_V_4_reg_1770[4 : 2] <= pool_window_2_V_4_fu_747_p3[4 : 2];
        pool_window_2_V_6_reg_1795[4 : 2] <= pool_window_2_V_6_fu_831_p3[4 : 2];
        pool_window_2_V_8_reg_1820[4 : 2] <= pool_window_2_V_8_fu_915_p3[4 : 2];
        pool_window_2_V_reg_1720[4 : 2] <= pool_window_2_V_fu_579_p3[4 : 2];
        pool_window_3_V_10_reg_1850[4 : 2] <= pool_window_3_V_10_fu_1007_p3[4 : 2];
        pool_window_3_V_12_reg_1875[4 : 2] <= pool_window_3_V_12_fu_1091_p3[4 : 2];
        pool_window_3_V_14_reg_1900[4 : 2] <= pool_window_3_V_14_fu_1175_p3[4 : 2];
        pool_window_3_V_2_reg_1750[4 : 2] <= pool_window_3_V_2_fu_671_p3[4 : 2];
        pool_window_3_V_4_reg_1775[4 : 2] <= pool_window_3_V_4_fu_755_p3[4 : 2];
        pool_window_3_V_6_reg_1800[4 : 2] <= pool_window_3_V_6_fu_839_p3[4 : 2];
        pool_window_3_V_8_reg_1825[4 : 2] <= pool_window_3_V_8_fu_923_p3[4 : 2];
        pool_window_3_V_reg_1725[4 : 2] <= pool_window_3_V_fu_587_p3[4 : 2];
        select_ln65_11_reg_1730 <= select_ln65_11_fu_640_p3;
        select_ln65_15_reg_1755 <= select_ln65_15_fu_724_p3;
        select_ln65_19_reg_1780 <= select_ln65_19_fu_808_p3;
        select_ln65_23_reg_1805 <= select_ln65_23_fu_892_p3;
        select_ln65_27_reg_1830 <= select_ln65_27_fu_976_p3;
        select_ln65_31_reg_1855 <= select_ln65_31_fu_1060_p3;
        select_ln65_33_reg_1880 <= select_ln65_33_fu_1144_p3;
        select_ln65_35_reg_1905 <= select_ln65_35_fu_1228_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_1910 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sY <= ap_phi_mux_storemerge_i_i_phi_fu_231_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_1236_p2 == 1'd1) & (icmp_ln216_fu_1280_p2 == 1'd0) & (icmp_ln241_reg_1601 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln222_reg_1923 <= select_ln222_fu_1304_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_1236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln227_reg_1914 <= select_ln227_fu_1260_p3;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_238_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln241_reg_1601 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_220_p4 = add_ln241_reg_1605;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_220_p4 = indvar_flatten_reg_216;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_1910 == 1'd1) & (icmp_ln216_reg_1919 == 1'd0) & (icmp_ln241_reg_1601_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_231_p4 = select_ln222_reg_1923;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_231_p4 = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_6_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_6_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_7_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_7_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_238_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_238_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_1286_p2 = (pY + 32'd1);

assign add_ln222_fu_1298_p2 = (sY + 32'd1);

assign add_ln225_fu_1242_p2 = (pX + 32'd1);

assign add_ln227_fu_1254_p2 = (sX + 32'd1);

assign add_ln241_fu_244_p2 = (ap_phi_mux_indvar_flatten_phi_fu_220_p4 + 7'd1);

assign and_ln191_1_fu_552_p2 = (icmp_ln191_3_fu_540_p2 & icmp_ln191_2_fu_530_p2);

assign and_ln191_2_fu_558_p2 = (and_ln191_fu_546_p2 & and_ln191_1_fu_552_p2);

assign and_ln191_fu_546_p2 = (icmp_ln191_fu_510_p2 & icmp_ln191_1_fu_520_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((io_acc_block_signal_op256 == 1'b0) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((io_acc_block_signal_op28 == 1'b0) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((io_acc_block_signal_op256 == 1'b0) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((io_acc_block_signal_op28 == 1'b0) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((io_acc_block_signal_op256 == 1'b0) & (1'd1 == and_ln191_2_reg_1706) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((io_acc_block_signal_op28 == 1'b0) & (icmp_ln241_reg_1601 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((io_acc_block_signal_op28 == 1'b0) & (icmp_ln241_reg_1601 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((io_acc_block_signal_op256 == 1'b0) & (1'd1 == and_ln191_2_reg_1706));
end

always @ (*) begin
    ap_condition_1268 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_1236_p2 == 1'd1) & (icmp_ln241_reg_1601 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_1273 = ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_1910 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_396 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_1236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_424 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_227 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_10_fu_714_p2 = ((select_ln65_4_fu_684_p3 < select_ln65_6_fu_706_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_762_p2 = ((pool_window_0_V_4_fu_732_p3 < pool_window_1_V_4_fu_740_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_776_p2 = ((pool_window_2_V_4_fu_747_p3 < pool_window_3_V_4_fu_755_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_798_p2 = ((select_ln65_8_fu_768_p3 < select_ln65_10_fu_790_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_860_p2 = ((pool_window_2_V_6_fu_831_p3 < pool_window_3_V_6_fu_839_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_882_p2 = ((select_ln65_12_fu_852_p3 < select_ln65_14_fu_874_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_16_fu_944_p2 = ((pool_window_2_V_8_fu_915_p3 < pool_window_3_V_8_fu_923_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_17_fu_966_p2 = ((select_ln65_16_fu_936_p3 < select_ln65_18_fu_958_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_18_fu_1028_p2 = ((pool_window_2_V_10_fu_999_p3 < pool_window_3_V_10_fu_1007_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_19_fu_1050_p2 = ((select_ln65_20_fu_1020_p3 < select_ln65_22_fu_1042_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_608_p2 = ((pool_window_2_V_fu_579_p3 < pool_window_3_V_fu_587_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_20_fu_1112_p2 = ((pool_window_2_V_12_fu_1083_p3 < pool_window_3_V_12_fu_1091_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_21_fu_1134_p2 = ((select_ln65_24_fu_1104_p3 < select_ln65_26_fu_1126_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_22_fu_1196_p2 = ((pool_window_2_V_14_fu_1167_p3 < pool_window_3_V_14_fu_1175_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_23_fu_1218_p2 = ((select_ln65_28_fu_1188_p3 < select_ln65_30_fu_1210_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_630_p2 = ((select_ln65_fu_600_p3 < select_ln65_2_fu_622_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_846_p2 = ((pool_window_0_V_6_fu_816_p3 < pool_window_1_V_6_fu_824_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_930_p2 = ((pool_window_0_V_8_fu_900_p3 < pool_window_1_V_8_fu_908_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_1014_p2 = ((pool_window_0_V_10_fu_984_p3 < pool_window_1_V_10_fu_992_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_1098_p2 = ((pool_window_0_V_12_fu_1068_p3 < pool_window_1_V_12_fu_1076_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_1182_p2 = ((pool_window_0_V_14_fu_1152_p3 < pool_window_1_V_14_fu_1160_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_678_p2 = ((pool_window_0_V_2_fu_648_p3 < pool_window_1_V_2_fu_656_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_692_p2 = ((pool_window_2_V_2_fu_663_p3 < pool_window_3_V_2_fu_671_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_594_p2 = ((pool_window_0_V_fu_564_p3 < pool_window_1_V_fu_572_p3) ? 1'b1 : 1'b0);

assign icmp_ln191_1_fu_520_p2 = ((sY == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_2_fu_530_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_3_fu_540_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_510_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_1236_p2 = ((pX == 32'd10) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_1280_p2 = ((pY == 32'd10) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_238_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_220_p4 == 7'd121) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op256 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op28 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign pool_window_0_V_10_fu_984_p3 = {{kernel_data_V_3_13}, {2'd0}};

assign pool_window_0_V_12_fu_1068_p3 = {{kernel_data_V_3_14}, {2'd0}};

assign pool_window_0_V_14_fu_1152_p3 = {{kernel_data_V_3_15}, {2'd0}};

assign pool_window_0_V_2_fu_648_p3 = {{kernel_data_V_3_9}, {2'd0}};

assign pool_window_0_V_4_fu_732_p3 = {{kernel_data_V_3_10}, {2'd0}};

assign pool_window_0_V_6_fu_816_p3 = {{kernel_data_V_3_11}, {2'd0}};

assign pool_window_0_V_8_fu_900_p3 = {{kernel_data_V_3_12}, {2'd0}};

assign pool_window_0_V_fu_564_p3 = {{kernel_data_V_3_8}, {2'd0}};

assign pool_window_1_V_10_fu_992_p3 = {{DataOut_V_76_reg_1688}, {2'd0}};

assign pool_window_1_V_12_fu_1076_p3 = {{DataOut_V_77_reg_1694}, {2'd0}};

assign pool_window_1_V_14_fu_1160_p3 = {{DataOut_V_reg_1700}, {2'd0}};

assign pool_window_1_V_2_fu_656_p3 = {{DataOut_V_72_reg_1664}, {2'd0}};

assign pool_window_1_V_4_fu_740_p3 = {{DataOut_V_73_reg_1670}, {2'd0}};

assign pool_window_1_V_6_fu_824_p3 = {{DataOut_V_74_reg_1676}, {2'd0}};

assign pool_window_1_V_8_fu_908_p3 = {{DataOut_V_75_reg_1682}, {2'd0}};

assign pool_window_1_V_fu_572_p3 = {{DataOut_V_71_reg_1658}, {2'd0}};

assign pool_window_2_V_10_fu_999_p3 = {{kernel_data_V_3_29}, {2'd0}};

assign pool_window_2_V_12_fu_1083_p3 = {{kernel_data_V_3_30}, {2'd0}};

assign pool_window_2_V_14_fu_1167_p3 = {{kernel_data_V_3_31}, {2'd0}};

assign pool_window_2_V_2_fu_663_p3 = {{kernel_data_V_3_25}, {2'd0}};

assign pool_window_2_V_4_fu_747_p3 = {{kernel_data_V_3_26}, {2'd0}};

assign pool_window_2_V_6_fu_831_p3 = {{kernel_data_V_3_27}, {2'd0}};

assign pool_window_2_V_8_fu_915_p3 = {{kernel_data_V_3_28}, {2'd0}};

assign pool_window_2_V_fu_579_p3 = {{kernel_data_V_3_24}, {2'd0}};

assign pool_window_3_V_10_fu_1007_p3 = {{shift_buffer_1_5_V_reg_1640}, {2'd0}};

assign pool_window_3_V_12_fu_1091_p3 = {{shift_buffer_1_6_V_reg_1646}, {2'd0}};

assign pool_window_3_V_14_fu_1175_p3 = {{shift_buffer_1_7_V_reg_1652}, {2'd0}};

assign pool_window_3_V_2_fu_671_p3 = {{shift_buffer_1_1_V_reg_1616}, {2'd0}};

assign pool_window_3_V_4_fu_755_p3 = {{shift_buffer_1_2_V_reg_1622}, {2'd0}};

assign pool_window_3_V_6_fu_839_p3 = {{shift_buffer_1_3_V_reg_1628}, {2'd0}};

assign pool_window_3_V_8_fu_923_p3 = {{shift_buffer_1_4_V_reg_1634}, {2'd0}};

assign pool_window_3_V_fu_587_p3 = {{shift_buffer_1_0_V_reg_1610}, {2'd0}};

assign res_V_data_0_V_din = {{tmp_21_fu_1330_p6}, {6'd0}};

assign res_V_data_1_V_din = {{tmp_22_fu_1364_p6}, {6'd0}};

assign res_V_data_2_V_din = {{tmp_23_fu_1398_p6}, {6'd0}};

assign res_V_data_3_V_din = {{tmp_24_fu_1432_p6}, {6'd0}};

assign res_V_data_4_V_din = {{tmp_25_fu_1466_p6}, {6'd0}};

assign res_V_data_5_V_din = {{tmp_26_fu_1500_p6}, {6'd0}};

assign res_V_data_6_V_din = {{tmp_27_fu_1534_p6}, {6'd0}};

assign res_V_data_7_V_din = {{tmp_28_fu_1568_p6}, {6'd0}};

assign select_ln222_fu_1304_p3 = ((icmp_ln191_1_fu_520_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_1298_p2);

assign select_ln227_fu_1260_p3 = ((icmp_ln191_fu_510_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_1254_p2);

assign select_ln65_10_fu_790_p3 = ((icmp_ln1496_12_fu_776_p2[0:0] === 1'b1) ? pool_window_3_V_4_fu_755_p3 : pool_window_2_V_4_fu_747_p3);

assign select_ln65_11_fu_640_p3 = ((icmp_ln1496_2_fu_630_p2[0:0] === 1'b1) ? select_ln65_9_fu_614_p3 : zext_ln65_fu_636_p1);

assign select_ln65_12_fu_852_p3 = ((icmp_ln1496_3_fu_846_p2[0:0] === 1'b1) ? pool_window_1_V_6_fu_824_p3 : pool_window_0_V_6_fu_816_p3);

assign select_ln65_13_fu_698_p3 = ((icmp_ln1496_9_fu_692_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_14_fu_874_p3 = ((icmp_ln1496_14_fu_860_p2[0:0] === 1'b1) ? pool_window_3_V_6_fu_839_p3 : pool_window_2_V_6_fu_831_p3);

assign select_ln65_15_fu_724_p3 = ((icmp_ln1496_10_fu_714_p2[0:0] === 1'b1) ? select_ln65_13_fu_698_p3 : zext_ln65_1_fu_720_p1);

assign select_ln65_16_fu_936_p3 = ((icmp_ln1496_4_fu_930_p2[0:0] === 1'b1) ? pool_window_1_V_8_fu_908_p3 : pool_window_0_V_8_fu_900_p3);

assign select_ln65_17_fu_782_p3 = ((icmp_ln1496_12_fu_776_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_18_fu_958_p3 = ((icmp_ln1496_16_fu_944_p2[0:0] === 1'b1) ? pool_window_3_V_8_fu_923_p3 : pool_window_2_V_8_fu_915_p3);

assign select_ln65_19_fu_808_p3 = ((icmp_ln1496_13_fu_798_p2[0:0] === 1'b1) ? select_ln65_17_fu_782_p3 : zext_ln65_2_fu_804_p1);

assign select_ln65_20_fu_1020_p3 = ((icmp_ln1496_5_fu_1014_p2[0:0] === 1'b1) ? pool_window_1_V_10_fu_992_p3 : pool_window_0_V_10_fu_984_p3);

assign select_ln65_21_fu_866_p3 = ((icmp_ln1496_14_fu_860_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_22_fu_1042_p3 = ((icmp_ln1496_18_fu_1028_p2[0:0] === 1'b1) ? pool_window_3_V_10_fu_1007_p3 : pool_window_2_V_10_fu_999_p3);

assign select_ln65_23_fu_892_p3 = ((icmp_ln1496_15_fu_882_p2[0:0] === 1'b1) ? select_ln65_21_fu_866_p3 : zext_ln65_3_fu_888_p1);

assign select_ln65_24_fu_1104_p3 = ((icmp_ln1496_6_fu_1098_p2[0:0] === 1'b1) ? pool_window_1_V_12_fu_1076_p3 : pool_window_0_V_12_fu_1068_p3);

assign select_ln65_25_fu_950_p3 = ((icmp_ln1496_16_fu_944_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_26_fu_1126_p3 = ((icmp_ln1496_20_fu_1112_p2[0:0] === 1'b1) ? pool_window_3_V_12_fu_1091_p3 : pool_window_2_V_12_fu_1083_p3);

assign select_ln65_27_fu_976_p3 = ((icmp_ln1496_17_fu_966_p2[0:0] === 1'b1) ? select_ln65_25_fu_950_p3 : zext_ln65_4_fu_972_p1);

assign select_ln65_28_fu_1188_p3 = ((icmp_ln1496_7_fu_1182_p2[0:0] === 1'b1) ? pool_window_1_V_14_fu_1160_p3 : pool_window_0_V_14_fu_1152_p3);

assign select_ln65_29_fu_1034_p3 = ((icmp_ln1496_18_fu_1028_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_2_fu_622_p3 = ((icmp_ln1496_1_fu_608_p2[0:0] === 1'b1) ? pool_window_3_V_fu_587_p3 : pool_window_2_V_fu_579_p3);

assign select_ln65_30_fu_1210_p3 = ((icmp_ln1496_22_fu_1196_p2[0:0] === 1'b1) ? pool_window_3_V_14_fu_1175_p3 : pool_window_2_V_14_fu_1167_p3);

assign select_ln65_31_fu_1060_p3 = ((icmp_ln1496_19_fu_1050_p2[0:0] === 1'b1) ? select_ln65_29_fu_1034_p3 : zext_ln65_5_fu_1056_p1);

assign select_ln65_32_fu_1118_p3 = ((icmp_ln1496_20_fu_1112_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_33_fu_1144_p3 = ((icmp_ln1496_21_fu_1134_p2[0:0] === 1'b1) ? select_ln65_32_fu_1118_p3 : zext_ln65_6_fu_1140_p1);

assign select_ln65_34_fu_1202_p3 = ((icmp_ln1496_22_fu_1196_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_35_fu_1228_p3 = ((icmp_ln1496_23_fu_1218_p2[0:0] === 1'b1) ? select_ln65_34_fu_1202_p3 : zext_ln65_7_fu_1224_p1);

assign select_ln65_4_fu_684_p3 = ((icmp_ln1496_8_fu_678_p2[0:0] === 1'b1) ? pool_window_1_V_2_fu_656_p3 : pool_window_0_V_2_fu_648_p3);

assign select_ln65_6_fu_706_p3 = ((icmp_ln1496_9_fu_692_p2[0:0] === 1'b1) ? pool_window_3_V_2_fu_671_p3 : pool_window_2_V_2_fu_663_p3);

assign select_ln65_8_fu_768_p3 = ((icmp_ln1496_11_fu_762_p2[0:0] === 1'b1) ? pool_window_1_V_4_fu_740_p3 : pool_window_0_V_4_fu_732_p3);

assign select_ln65_9_fu_614_p3 = ((icmp_ln1496_1_fu_608_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_fu_600_p3 = ((icmp_ln1496_fu_594_p2[0:0] === 1'b1) ? pool_window_1_V_fu_572_p3 : pool_window_0_V_fu_564_p3);

assign start_out = real_start;

assign tmp_21_fu_1330_p1 = pool_window_0_V_reg_1710;

assign tmp_21_fu_1330_p2 = pool_window_1_V_reg_1715;

assign tmp_21_fu_1330_p3 = pool_window_2_V_reg_1720;

assign tmp_21_fu_1330_p4 = pool_window_3_V_reg_1725;

assign tmp_22_fu_1364_p1 = pool_window_0_V_2_reg_1735;

assign tmp_22_fu_1364_p2 = pool_window_1_V_2_reg_1740;

assign tmp_22_fu_1364_p3 = pool_window_2_V_2_reg_1745;

assign tmp_22_fu_1364_p4 = pool_window_3_V_2_reg_1750;

assign tmp_23_fu_1398_p1 = pool_window_0_V_4_reg_1760;

assign tmp_23_fu_1398_p2 = pool_window_1_V_4_reg_1765;

assign tmp_23_fu_1398_p3 = pool_window_2_V_4_reg_1770;

assign tmp_23_fu_1398_p4 = pool_window_3_V_4_reg_1775;

assign tmp_24_fu_1432_p1 = pool_window_0_V_6_reg_1785;

assign tmp_24_fu_1432_p2 = pool_window_1_V_6_reg_1790;

assign tmp_24_fu_1432_p3 = pool_window_2_V_6_reg_1795;

assign tmp_24_fu_1432_p4 = pool_window_3_V_6_reg_1800;

assign tmp_25_fu_1466_p1 = pool_window_0_V_8_reg_1810;

assign tmp_25_fu_1466_p2 = pool_window_1_V_8_reg_1815;

assign tmp_25_fu_1466_p3 = pool_window_2_V_8_reg_1820;

assign tmp_25_fu_1466_p4 = pool_window_3_V_8_reg_1825;

assign tmp_26_fu_1500_p1 = pool_window_0_V_10_reg_1835;

assign tmp_26_fu_1500_p2 = pool_window_1_V_10_reg_1840;

assign tmp_26_fu_1500_p3 = pool_window_2_V_10_reg_1845;

assign tmp_26_fu_1500_p4 = pool_window_3_V_10_reg_1850;

assign tmp_27_fu_1534_p1 = pool_window_0_V_12_reg_1860;

assign tmp_27_fu_1534_p2 = pool_window_1_V_12_reg_1865;

assign tmp_27_fu_1534_p3 = pool_window_2_V_12_reg_1870;

assign tmp_27_fu_1534_p4 = pool_window_3_V_12_reg_1875;

assign tmp_28_fu_1568_p1 = pool_window_0_V_14_reg_1885;

assign tmp_28_fu_1568_p2 = pool_window_1_V_14_reg_1890;

assign tmp_28_fu_1568_p3 = pool_window_2_V_14_reg_1895;

assign tmp_28_fu_1568_p4 = pool_window_3_V_14_reg_1900;

assign zext_ln65_1_fu_720_p1 = icmp_ln1496_8_fu_678_p2;

assign zext_ln65_2_fu_804_p1 = icmp_ln1496_11_fu_762_p2;

assign zext_ln65_3_fu_888_p1 = icmp_ln1496_3_fu_846_p2;

assign zext_ln65_4_fu_972_p1 = icmp_ln1496_4_fu_930_p2;

assign zext_ln65_5_fu_1056_p1 = icmp_ln1496_5_fu_1014_p2;

assign zext_ln65_6_fu_1140_p1 = icmp_ln1496_6_fu_1098_p2;

assign zext_ln65_7_fu_1224_p1 = icmp_ln1496_7_fu_1182_p2;

assign zext_ln65_fu_636_p1 = icmp_ln1496_fu_594_p2;

always @ (posedge ap_clk) begin
    pool_window_0_V_reg_1710[1:0] <= 2'b00;
    pool_window_1_V_reg_1715[1:0] <= 2'b00;
    pool_window_2_V_reg_1720[1:0] <= 2'b00;
    pool_window_3_V_reg_1725[1:0] <= 2'b00;
    pool_window_0_V_2_reg_1735[1:0] <= 2'b00;
    pool_window_1_V_2_reg_1740[1:0] <= 2'b00;
    pool_window_2_V_2_reg_1745[1:0] <= 2'b00;
    pool_window_3_V_2_reg_1750[1:0] <= 2'b00;
    pool_window_0_V_4_reg_1760[1:0] <= 2'b00;
    pool_window_1_V_4_reg_1765[1:0] <= 2'b00;
    pool_window_2_V_4_reg_1770[1:0] <= 2'b00;
    pool_window_3_V_4_reg_1775[1:0] <= 2'b00;
    pool_window_0_V_6_reg_1785[1:0] <= 2'b00;
    pool_window_1_V_6_reg_1790[1:0] <= 2'b00;
    pool_window_2_V_6_reg_1795[1:0] <= 2'b00;
    pool_window_3_V_6_reg_1800[1:0] <= 2'b00;
    pool_window_0_V_8_reg_1810[1:0] <= 2'b00;
    pool_window_1_V_8_reg_1815[1:0] <= 2'b00;
    pool_window_2_V_8_reg_1820[1:0] <= 2'b00;
    pool_window_3_V_8_reg_1825[1:0] <= 2'b00;
    pool_window_0_V_10_reg_1835[1:0] <= 2'b00;
    pool_window_1_V_10_reg_1840[1:0] <= 2'b00;
    pool_window_2_V_10_reg_1845[1:0] <= 2'b00;
    pool_window_3_V_10_reg_1850[1:0] <= 2'b00;
    pool_window_0_V_12_reg_1860[1:0] <= 2'b00;
    pool_window_1_V_12_reg_1865[1:0] <= 2'b00;
    pool_window_2_V_12_reg_1870[1:0] <= 2'b00;
    pool_window_3_V_12_reg_1875[1:0] <= 2'b00;
    pool_window_0_V_14_reg_1885[1:0] <= 2'b00;
    pool_window_1_V_14_reg_1890[1:0] <= 2'b00;
    pool_window_2_V_14_reg_1895[1:0] <= 2'b00;
    pool_window_3_V_14_reg_1900[1:0] <= 2'b00;
end

endmodule //pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s
