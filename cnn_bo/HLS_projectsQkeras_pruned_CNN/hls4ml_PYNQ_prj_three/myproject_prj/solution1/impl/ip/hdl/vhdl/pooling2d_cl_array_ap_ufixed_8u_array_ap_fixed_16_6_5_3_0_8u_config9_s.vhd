-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    data_V_data_5_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    data_V_data_5_V_empty_n : IN STD_LOGIC;
    data_V_data_5_V_read : OUT STD_LOGIC;
    data_V_data_6_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    data_V_data_6_V_empty_n : IN STD_LOGIC;
    data_V_data_6_V_read : OUT STD_LOGIC;
    data_V_data_7_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    data_V_data_7_V_empty_n : IN STD_LOGIC;
    data_V_data_7_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC;
    res_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_6_V_full_n : IN STD_LOGIC;
    res_V_data_6_V_write : OUT STD_LOGIC;
    res_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_7_V_full_n : IN STD_LOGIC;
    res_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_3_8 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_9 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_10 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_11 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_12 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_13 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_14 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_15 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_24 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_25 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_26 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_27 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_28 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_29 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_30 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal kernel_data_V_3_31 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal line_buffer_Array_V_3_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_Array_V_3_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_Array_V_3_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_Array_V_3_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_Array_V_3_0_4_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_4_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_4_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_Array_V_3_0_5_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_5_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_5_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_Array_V_3_0_6_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_6_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_6_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_Array_V_3_0_7_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_7_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_7_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln241_reg_1601 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal data_V_data_4_V_blk_n : STD_LOGIC;
    signal data_V_data_5_V_blk_n : STD_LOGIC;
    signal data_V_data_6_V_blk_n : STD_LOGIC;
    signal data_V_data_7_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal and_ln191_2_reg_1706 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_5_V_blk_n : STD_LOGIC;
    signal res_V_data_6_V_blk_n : STD_LOGIC;
    signal res_V_data_7_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_216 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln241_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln241_reg_1601_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln241_fu_244_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln241_reg_1605 : STD_LOGIC_VECTOR (6 downto 0);
    signal shift_buffer_1_0_V_reg_1610 : STD_LOGIC_VECTOR (2 downto 0);
    signal io_acc_block_signal_op28 : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal io_acc_block_signal_op256 : STD_LOGIC;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal shift_buffer_1_1_V_reg_1616 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_buffer_1_2_V_reg_1622 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_buffer_1_3_V_reg_1628 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_buffer_1_4_V_reg_1634 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_buffer_1_5_V_reg_1640 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_buffer_1_6_V_reg_1646 : STD_LOGIC_VECTOR (2 downto 0);
    signal shift_buffer_1_7_V_reg_1652 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataOut_V_71_reg_1658 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataOut_V_72_reg_1664 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataOut_V_73_reg_1670 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataOut_V_74_reg_1676 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataOut_V_75_reg_1682 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataOut_V_76_reg_1688 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataOut_V_77_reg_1694 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataOut_V_reg_1700 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln191_2_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_fu_564_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_0_V_reg_1710 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_fu_572_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_reg_1715 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_fu_579_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_reg_1720 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_fu_587_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_reg_1725 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_11_fu_640_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_11_reg_1730 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_2_fu_648_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_0_V_2_reg_1735 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_2_fu_656_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_2_reg_1740 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_2_fu_663_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_2_reg_1745 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_2_fu_671_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_2_reg_1750 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_15_fu_724_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_15_reg_1755 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_4_fu_732_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_0_V_4_reg_1760 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_4_fu_740_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_4_reg_1765 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_4_fu_747_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_4_reg_1770 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_4_fu_755_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_4_reg_1775 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_19_fu_808_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_19_reg_1780 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_6_fu_816_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_0_V_6_reg_1785 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_6_fu_824_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_6_reg_1790 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_6_fu_831_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_6_reg_1795 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_6_fu_839_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_6_reg_1800 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_23_fu_892_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_23_reg_1805 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_8_fu_900_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_0_V_8_reg_1810 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_8_fu_908_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_8_reg_1815 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_8_fu_915_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_8_reg_1820 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_8_fu_923_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_8_reg_1825 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_27_fu_976_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_27_reg_1830 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_10_fu_984_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_0_V_10_reg_1835 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_10_fu_992_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_10_reg_1840 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_10_fu_999_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_10_reg_1845 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_10_fu_1007_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_10_reg_1850 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_31_fu_1060_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_31_reg_1855 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_12_fu_1068_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_0_V_12_reg_1860 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_12_fu_1076_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_12_reg_1865 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_12_fu_1083_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_12_reg_1870 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_12_fu_1091_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_12_reg_1875 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_33_fu_1144_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_33_reg_1880 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_window_0_V_14_fu_1152_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_0_V_14_reg_1885 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_14_fu_1160_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_1_V_14_reg_1890 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_14_fu_1167_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_2_V_14_reg_1895 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_14_fu_1175_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_window_3_V_14_reg_1900 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_35_fu_1228_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_35_reg_1905 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln212_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_1910 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln227_fu_1260_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_reg_1914 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln216_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_1919 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_1304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln222_reg_1923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_220_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_storemerge_i_i_phi_fu_231_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_1242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_1286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal icmp_ln191_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_2_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_3_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_600_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_2_fu_622_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1496_2_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_9_fu_614_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_636_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_8_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_9_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_4_fu_684_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_6_fu_706_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1496_10_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_13_fu_698_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_1_fu_720_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_11_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_12_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_8_fu_768_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_10_fu_790_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1496_13_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_17_fu_782_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_2_fu_804_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_3_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_14_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_12_fu_852_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_14_fu_874_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1496_15_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_21_fu_866_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_3_fu_888_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_4_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_16_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_16_fu_936_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_18_fu_958_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1496_17_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_25_fu_950_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_4_fu_972_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_5_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_18_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_20_fu_1020_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_22_fu_1042_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1496_19_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_29_fu_1034_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_5_fu_1056_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_6_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_20_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_24_fu_1104_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_26_fu_1126_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1496_21_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_32_fu_1118_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_6_fu_1140_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1496_7_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_22_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_28_fu_1188_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln65_30_fu_1210_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1496_23_fu_1218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_34_fu_1202_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_7_fu_1224_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln227_fu_1254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_1298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1330_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1330_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1330_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1330_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1330_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_1364_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_1364_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_1364_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_1364_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_1364_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_1398_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_1398_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_1398_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_1398_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_1398_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_1432_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_1432_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_1432_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_1432_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_1432_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_1466_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_1466_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_1466_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_1466_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_1466_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_1500_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_1500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_1500_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_1500_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_1500_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_1534_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_1534_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_1534_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_1534_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_1534_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1568_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1568_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1568_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1568_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1568_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_424 : BOOLEAN;
    signal ap_condition_1268 : BOOLEAN;
    signal ap_condition_396 : BOOLEAN;
    signal ap_condition_1273 : BOOLEAN;

    component myproject_axi_mux_42_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (2 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    line_buffer_Array_V_3_0_0_U : component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio
    generic map (
        DataWidth => 3,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => line_buffer_Array_V_3_0_0_ce0,
        we0 => line_buffer_Array_V_3_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_3_0_0_q0);

    line_buffer_Array_V_3_0_1_U : component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio
    generic map (
        DataWidth => 3,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => line_buffer_Array_V_3_0_1_ce0,
        we0 => line_buffer_Array_V_3_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_3_0_1_q0);

    line_buffer_Array_V_3_0_2_U : component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio
    generic map (
        DataWidth => 3,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => line_buffer_Array_V_3_0_2_ce0,
        we0 => line_buffer_Array_V_3_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_3_0_2_q0);

    line_buffer_Array_V_3_0_3_U : component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio
    generic map (
        DataWidth => 3,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => line_buffer_Array_V_3_0_3_ce0,
        we0 => line_buffer_Array_V_3_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_3_0_3_q0);

    line_buffer_Array_V_3_0_4_U : component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio
    generic map (
        DataWidth => 3,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => line_buffer_Array_V_3_0_4_ce0,
        we0 => line_buffer_Array_V_3_0_4_we0,
        d0 => data_V_data_4_V_dout,
        q0 => line_buffer_Array_V_3_0_4_q0);

    line_buffer_Array_V_3_0_5_U : component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio
    generic map (
        DataWidth => 3,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => line_buffer_Array_V_3_0_5_ce0,
        we0 => line_buffer_Array_V_3_0_5_we0,
        d0 => data_V_data_5_V_dout,
        q0 => line_buffer_Array_V_3_0_5_q0);

    line_buffer_Array_V_3_0_6_U : component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio
    generic map (
        DataWidth => 3,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => line_buffer_Array_V_3_0_6_ce0,
        we0 => line_buffer_Array_V_3_0_6_we0,
        d0 => data_V_data_6_V_dout,
        q0 => line_buffer_Array_V_3_0_6_q0);

    line_buffer_Array_V_3_0_7_U : component pooling2d_cl_array_ap_ufixed_8u_array_ap_fixed_16_6_5_3_0_8u_config9_s_line_bZio
    generic map (
        DataWidth => 3,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv4_A,
        ce0 => line_buffer_Array_V_3_0_7_ce0,
        we0 => line_buffer_Array_V_3_0_7_we0,
        d0 => data_V_data_7_V_dout,
        q0 => line_buffer_Array_V_3_0_7_q0);

    myproject_axi_mux_42_10_1_1_U445 : component myproject_axi_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => tmp_21_fu_1330_p1,
        din1 => tmp_21_fu_1330_p2,
        din2 => tmp_21_fu_1330_p3,
        din3 => tmp_21_fu_1330_p4,
        din4 => select_ln65_11_reg_1730,
        dout => tmp_21_fu_1330_p6);

    myproject_axi_mux_42_10_1_1_U446 : component myproject_axi_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => tmp_22_fu_1364_p1,
        din1 => tmp_22_fu_1364_p2,
        din2 => tmp_22_fu_1364_p3,
        din3 => tmp_22_fu_1364_p4,
        din4 => select_ln65_15_reg_1755,
        dout => tmp_22_fu_1364_p6);

    myproject_axi_mux_42_10_1_1_U447 : component myproject_axi_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => tmp_23_fu_1398_p1,
        din1 => tmp_23_fu_1398_p2,
        din2 => tmp_23_fu_1398_p3,
        din3 => tmp_23_fu_1398_p4,
        din4 => select_ln65_19_reg_1780,
        dout => tmp_23_fu_1398_p6);

    myproject_axi_mux_42_10_1_1_U448 : component myproject_axi_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => tmp_24_fu_1432_p1,
        din1 => tmp_24_fu_1432_p2,
        din2 => tmp_24_fu_1432_p3,
        din3 => tmp_24_fu_1432_p4,
        din4 => select_ln65_23_reg_1805,
        dout => tmp_24_fu_1432_p6);

    myproject_axi_mux_42_10_1_1_U449 : component myproject_axi_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => tmp_25_fu_1466_p1,
        din1 => tmp_25_fu_1466_p2,
        din2 => tmp_25_fu_1466_p3,
        din3 => tmp_25_fu_1466_p4,
        din4 => select_ln65_27_reg_1830,
        dout => tmp_25_fu_1466_p6);

    myproject_axi_mux_42_10_1_1_U450 : component myproject_axi_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => tmp_26_fu_1500_p1,
        din1 => tmp_26_fu_1500_p2,
        din2 => tmp_26_fu_1500_p3,
        din3 => tmp_26_fu_1500_p4,
        din4 => select_ln65_31_reg_1855,
        dout => tmp_26_fu_1500_p6);

    myproject_axi_mux_42_10_1_1_U451 : component myproject_axi_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => tmp_27_fu_1534_p1,
        din1 => tmp_27_fu_1534_p2,
        din2 => tmp_27_fu_1534_p3,
        din3 => tmp_27_fu_1534_p4,
        din4 => select_ln65_33_reg_1880,
        dout => tmp_27_fu_1534_p6);

    myproject_axi_mux_42_10_1_1_U452 : component myproject_axi_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => tmp_28_fu_1568_p1,
        din1 => tmp_28_fu_1568_p2,
        din2 => tmp_28_fu_1568_p3,
        din3 => tmp_28_fu_1568_p4,
        din4 => select_ln65_35_reg_1905,
        dout => tmp_28_fu_1568_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln216_fu_1280_p2 = ap_const_lv1_1) and (icmp_ln212_fu_1236_p2 = ap_const_lv1_1) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_227;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_216 <= add_ln241_reg_1605;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_216 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_424)) then
                if ((icmp_ln212_fu_1236_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_1236_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln225_fu_1242_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1268)) then
                if ((icmp_ln216_fu_1280_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_1280_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln220_fu_1286_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1273)) then 
                    sX <= select_ln227_reg_1914;
                elsif ((ap_const_boolean_1 = ap_condition_396)) then 
                    sX <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                DataOut_V_71_reg_1658 <= line_buffer_Array_V_3_0_0_q0;
                DataOut_V_72_reg_1664 <= line_buffer_Array_V_3_0_1_q0;
                DataOut_V_73_reg_1670 <= line_buffer_Array_V_3_0_2_q0;
                DataOut_V_74_reg_1676 <= line_buffer_Array_V_3_0_3_q0;
                DataOut_V_75_reg_1682 <= line_buffer_Array_V_3_0_4_q0;
                DataOut_V_76_reg_1688 <= line_buffer_Array_V_3_0_5_q0;
                DataOut_V_77_reg_1694 <= line_buffer_Array_V_3_0_6_q0;
                DataOut_V_reg_1700 <= line_buffer_Array_V_3_0_7_q0;
                shift_buffer_1_0_V_reg_1610 <= data_V_data_0_V_dout;
                shift_buffer_1_1_V_reg_1616 <= data_V_data_1_V_dout;
                shift_buffer_1_2_V_reg_1622 <= data_V_data_2_V_dout;
                shift_buffer_1_3_V_reg_1628 <= data_V_data_3_V_dout;
                shift_buffer_1_4_V_reg_1634 <= data_V_data_4_V_dout;
                shift_buffer_1_5_V_reg_1640 <= data_V_data_5_V_dout;
                shift_buffer_1_6_V_reg_1646 <= data_V_data_6_V_dout;
                shift_buffer_1_7_V_reg_1652 <= data_V_data_7_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln241_reg_1605 <= add_ln241_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln191_2_reg_1706 <= and_ln191_2_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln212_reg_1910 <= icmp_ln212_fu_1236_p2;
                icmp_ln241_reg_1601 <= icmp_ln241_fu_238_p2;
                icmp_ln241_reg_1601_pp0_iter1_reg <= icmp_ln241_reg_1601;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_1236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln216_reg_1919 <= icmp_ln216_fu_1280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_data_V_3_10 <= DataOut_V_73_reg_1670;
                kernel_data_V_3_11 <= DataOut_V_74_reg_1676;
                kernel_data_V_3_12 <= DataOut_V_75_reg_1682;
                kernel_data_V_3_13 <= DataOut_V_76_reg_1688;
                kernel_data_V_3_14 <= DataOut_V_77_reg_1694;
                kernel_data_V_3_15 <= DataOut_V_reg_1700;
                kernel_data_V_3_24 <= shift_buffer_1_0_V_reg_1610;
                kernel_data_V_3_25 <= shift_buffer_1_1_V_reg_1616;
                kernel_data_V_3_26 <= shift_buffer_1_2_V_reg_1622;
                kernel_data_V_3_27 <= shift_buffer_1_3_V_reg_1628;
                kernel_data_V_3_28 <= shift_buffer_1_4_V_reg_1634;
                kernel_data_V_3_29 <= shift_buffer_1_5_V_reg_1640;
                kernel_data_V_3_30 <= shift_buffer_1_6_V_reg_1646;
                kernel_data_V_3_31 <= shift_buffer_1_7_V_reg_1652;
                kernel_data_V_3_8 <= DataOut_V_71_reg_1658;
                kernel_data_V_3_9 <= DataOut_V_72_reg_1664;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_fu_558_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    pool_window_0_V_10_reg_1835(4 downto 2) <= pool_window_0_V_10_fu_984_p3(4 downto 2);
                    pool_window_0_V_12_reg_1860(4 downto 2) <= pool_window_0_V_12_fu_1068_p3(4 downto 2);
                    pool_window_0_V_14_reg_1885(4 downto 2) <= pool_window_0_V_14_fu_1152_p3(4 downto 2);
                    pool_window_0_V_2_reg_1735(4 downto 2) <= pool_window_0_V_2_fu_648_p3(4 downto 2);
                    pool_window_0_V_4_reg_1760(4 downto 2) <= pool_window_0_V_4_fu_732_p3(4 downto 2);
                    pool_window_0_V_6_reg_1785(4 downto 2) <= pool_window_0_V_6_fu_816_p3(4 downto 2);
                    pool_window_0_V_8_reg_1810(4 downto 2) <= pool_window_0_V_8_fu_900_p3(4 downto 2);
                    pool_window_0_V_reg_1710(4 downto 2) <= pool_window_0_V_fu_564_p3(4 downto 2);
                    pool_window_1_V_10_reg_1840(4 downto 2) <= pool_window_1_V_10_fu_992_p3(4 downto 2);
                    pool_window_1_V_12_reg_1865(4 downto 2) <= pool_window_1_V_12_fu_1076_p3(4 downto 2);
                    pool_window_1_V_14_reg_1890(4 downto 2) <= pool_window_1_V_14_fu_1160_p3(4 downto 2);
                    pool_window_1_V_2_reg_1740(4 downto 2) <= pool_window_1_V_2_fu_656_p3(4 downto 2);
                    pool_window_1_V_4_reg_1765(4 downto 2) <= pool_window_1_V_4_fu_740_p3(4 downto 2);
                    pool_window_1_V_6_reg_1790(4 downto 2) <= pool_window_1_V_6_fu_824_p3(4 downto 2);
                    pool_window_1_V_8_reg_1815(4 downto 2) <= pool_window_1_V_8_fu_908_p3(4 downto 2);
                    pool_window_1_V_reg_1715(4 downto 2) <= pool_window_1_V_fu_572_p3(4 downto 2);
                    pool_window_2_V_10_reg_1845(4 downto 2) <= pool_window_2_V_10_fu_999_p3(4 downto 2);
                    pool_window_2_V_12_reg_1870(4 downto 2) <= pool_window_2_V_12_fu_1083_p3(4 downto 2);
                    pool_window_2_V_14_reg_1895(4 downto 2) <= pool_window_2_V_14_fu_1167_p3(4 downto 2);
                    pool_window_2_V_2_reg_1745(4 downto 2) <= pool_window_2_V_2_fu_663_p3(4 downto 2);
                    pool_window_2_V_4_reg_1770(4 downto 2) <= pool_window_2_V_4_fu_747_p3(4 downto 2);
                    pool_window_2_V_6_reg_1795(4 downto 2) <= pool_window_2_V_6_fu_831_p3(4 downto 2);
                    pool_window_2_V_8_reg_1820(4 downto 2) <= pool_window_2_V_8_fu_915_p3(4 downto 2);
                    pool_window_2_V_reg_1720(4 downto 2) <= pool_window_2_V_fu_579_p3(4 downto 2);
                    pool_window_3_V_10_reg_1850(4 downto 2) <= pool_window_3_V_10_fu_1007_p3(4 downto 2);
                    pool_window_3_V_12_reg_1875(4 downto 2) <= pool_window_3_V_12_fu_1091_p3(4 downto 2);
                    pool_window_3_V_14_reg_1900(4 downto 2) <= pool_window_3_V_14_fu_1175_p3(4 downto 2);
                    pool_window_3_V_2_reg_1750(4 downto 2) <= pool_window_3_V_2_fu_671_p3(4 downto 2);
                    pool_window_3_V_4_reg_1775(4 downto 2) <= pool_window_3_V_4_fu_755_p3(4 downto 2);
                    pool_window_3_V_6_reg_1800(4 downto 2) <= pool_window_3_V_6_fu_839_p3(4 downto 2);
                    pool_window_3_V_8_reg_1825(4 downto 2) <= pool_window_3_V_8_fu_923_p3(4 downto 2);
                    pool_window_3_V_reg_1725(4 downto 2) <= pool_window_3_V_fu_587_p3(4 downto 2);
                select_ln65_11_reg_1730 <= select_ln65_11_fu_640_p3;
                select_ln65_15_reg_1755 <= select_ln65_15_fu_724_p3;
                select_ln65_19_reg_1780 <= select_ln65_19_fu_808_p3;
                select_ln65_23_reg_1805 <= select_ln65_23_fu_892_p3;
                select_ln65_27_reg_1830 <= select_ln65_27_fu_976_p3;
                select_ln65_31_reg_1855 <= select_ln65_31_fu_1060_p3;
                select_ln65_33_reg_1880 <= select_ln65_33_fu_1144_p3;
                select_ln65_35_reg_1905 <= select_ln65_35_fu_1228_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_reg_1910 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sY <= ap_phi_mux_storemerge_i_i_phi_fu_231_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_1236_p2 = ap_const_lv1_1) and (icmp_ln216_fu_1280_p2 = ap_const_lv1_0) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln222_reg_1923 <= select_ln222_fu_1304_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_1236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln227_reg_1914 <= select_ln227_fu_1260_p3;
            end if;
        end if;
    end process;
    pool_window_0_V_reg_1710(1 downto 0) <= "00";
    pool_window_1_V_reg_1715(1 downto 0) <= "00";
    pool_window_2_V_reg_1720(1 downto 0) <= "00";
    pool_window_3_V_reg_1725(1 downto 0) <= "00";
    pool_window_0_V_2_reg_1735(1 downto 0) <= "00";
    pool_window_1_V_2_reg_1740(1 downto 0) <= "00";
    pool_window_2_V_2_reg_1745(1 downto 0) <= "00";
    pool_window_3_V_2_reg_1750(1 downto 0) <= "00";
    pool_window_0_V_4_reg_1760(1 downto 0) <= "00";
    pool_window_1_V_4_reg_1765(1 downto 0) <= "00";
    pool_window_2_V_4_reg_1770(1 downto 0) <= "00";
    pool_window_3_V_4_reg_1775(1 downto 0) <= "00";
    pool_window_0_V_6_reg_1785(1 downto 0) <= "00";
    pool_window_1_V_6_reg_1790(1 downto 0) <= "00";
    pool_window_2_V_6_reg_1795(1 downto 0) <= "00";
    pool_window_3_V_6_reg_1800(1 downto 0) <= "00";
    pool_window_0_V_8_reg_1810(1 downto 0) <= "00";
    pool_window_1_V_8_reg_1815(1 downto 0) <= "00";
    pool_window_2_V_8_reg_1820(1 downto 0) <= "00";
    pool_window_3_V_8_reg_1825(1 downto 0) <= "00";
    pool_window_0_V_10_reg_1835(1 downto 0) <= "00";
    pool_window_1_V_10_reg_1840(1 downto 0) <= "00";
    pool_window_2_V_10_reg_1845(1 downto 0) <= "00";
    pool_window_3_V_10_reg_1850(1 downto 0) <= "00";
    pool_window_0_V_12_reg_1860(1 downto 0) <= "00";
    pool_window_1_V_12_reg_1865(1 downto 0) <= "00";
    pool_window_2_V_12_reg_1870(1 downto 0) <= "00";
    pool_window_3_V_12_reg_1875(1 downto 0) <= "00";
    pool_window_0_V_14_reg_1885(1 downto 0) <= "00";
    pool_window_1_V_14_reg_1890(1 downto 0) <= "00";
    pool_window_2_V_14_reg_1895(1 downto 0) <= "00";
    pool_window_3_V_14_reg_1900(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln241_fu_238_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln241_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln220_fu_1286_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln222_fu_1298_p2 <= std_logic_vector(unsigned(sY) + unsigned(ap_const_lv32_1));
    add_ln225_fu_1242_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln227_fu_1254_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln241_fu_244_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_220_p4) + unsigned(ap_const_lv7_1));
    and_ln191_1_fu_552_p2 <= (icmp_ln191_3_fu_540_p2 and icmp_ln191_2_fu_530_p2);
    and_ln191_2_fu_558_p2 <= (and_ln191_fu_546_p2 and and_ln191_1_fu_552_p2);
    and_ln191_fu_546_p2 <= (icmp_ln191_fu_510_p2 and icmp_ln191_1_fu_520_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, io_acc_block_signal_op28, io_acc_block_signal_op256)
    begin
                ap_block_pp0_stage1_01001 <= (((io_acc_block_signal_op256 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((io_acc_block_signal_op28 = ap_const_logic_0) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, io_acc_block_signal_op28, io_acc_block_signal_op256)
    begin
                ap_block_pp0_stage1_11001 <= (((io_acc_block_signal_op256 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((io_acc_block_signal_op28 = ap_const_logic_0) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, io_acc_block_signal_op28, io_acc_block_signal_op256)
    begin
                ap_block_pp0_stage1_subdone <= (((io_acc_block_signal_op256 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((io_acc_block_signal_op28 = ap_const_logic_0) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln241_reg_1601, io_acc_block_signal_op28)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((io_acc_block_signal_op28 = ap_const_logic_0) and (icmp_ln241_reg_1601 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter1_assign_proc : process(and_ln191_2_reg_1706, io_acc_block_signal_op256)
    begin
                ap_block_state5_pp0_stage1_iter1 <= ((io_acc_block_signal_op256 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1706));
    end process;


    ap_condition_1268_assign_proc : process(icmp_ln241_reg_1601, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln212_fu_1236_p2)
    begin
                ap_condition_1268 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_1236_p2 = ap_const_lv1_1) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_1273_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln212_reg_1910)
    begin
                ap_condition_1273 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_reg_1910 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_396_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln212_fu_1236_p2)
    begin
                ap_condition_396 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_1236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_424_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_424 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_238_p2)
    begin
        if ((icmp_ln241_fu_238_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_220_p4_assign_proc : process(icmp_ln241_reg_1601, ap_enable_reg_pp0_iter1, indvar_flatten_reg_216, ap_CS_fsm_pp0_stage0, add_ln241_reg_1605, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_220_p4 <= add_ln241_reg_1605;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_220_p4 <= indvar_flatten_reg_216;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_231_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1601_pp0_iter1_reg, icmp_ln212_reg_1910, icmp_ln216_reg_1919, select_ln222_reg_1923, ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227)
    begin
        if (((icmp_ln212_reg_1910 = ap_const_lv1_1) and (icmp_ln216_reg_1919 = ap_const_lv1_0) and (icmp_ln241_reg_1601_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_storemerge_i_i_phi_fu_231_p4 <= select_ln222_reg_1923;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_231_p4 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_227;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_227 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1601)
    begin
        if (((icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1601)
    begin
        if (((icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1601)
    begin
        if (((icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1601)
    begin
        if (((icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_4_V_blk_n_assign_proc : process(data_V_data_4_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1601)
    begin
        if (((icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_4_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_5_V_blk_n_assign_proc : process(data_V_data_5_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1601)
    begin
        if (((icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_5_V_blk_n <= data_V_data_5_V_empty_n;
        else 
            data_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_5_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_5_V_read <= ap_const_logic_1;
        else 
            data_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_6_V_blk_n_assign_proc : process(data_V_data_6_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1601)
    begin
        if (((icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_6_V_blk_n <= data_V_data_6_V_empty_n;
        else 
            data_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_6_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_6_V_read <= ap_const_logic_1;
        else 
            data_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_7_V_blk_n_assign_proc : process(data_V_data_7_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_1601)
    begin
        if (((icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_7_V_blk_n <= data_V_data_7_V_empty_n;
        else 
            data_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_7_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_7_V_read <= ap_const_logic_1;
        else 
            data_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_10_fu_714_p2 <= "1" when (unsigned(select_ln65_4_fu_684_p3) < unsigned(select_ln65_6_fu_706_p3)) else "0";
    icmp_ln1496_11_fu_762_p2 <= "1" when (unsigned(pool_window_0_V_4_fu_732_p3) < unsigned(pool_window_1_V_4_fu_740_p3)) else "0";
    icmp_ln1496_12_fu_776_p2 <= "1" when (unsigned(pool_window_2_V_4_fu_747_p3) < unsigned(pool_window_3_V_4_fu_755_p3)) else "0";
    icmp_ln1496_13_fu_798_p2 <= "1" when (unsigned(select_ln65_8_fu_768_p3) < unsigned(select_ln65_10_fu_790_p3)) else "0";
    icmp_ln1496_14_fu_860_p2 <= "1" when (unsigned(pool_window_2_V_6_fu_831_p3) < unsigned(pool_window_3_V_6_fu_839_p3)) else "0";
    icmp_ln1496_15_fu_882_p2 <= "1" when (unsigned(select_ln65_12_fu_852_p3) < unsigned(select_ln65_14_fu_874_p3)) else "0";
    icmp_ln1496_16_fu_944_p2 <= "1" when (unsigned(pool_window_2_V_8_fu_915_p3) < unsigned(pool_window_3_V_8_fu_923_p3)) else "0";
    icmp_ln1496_17_fu_966_p2 <= "1" when (unsigned(select_ln65_16_fu_936_p3) < unsigned(select_ln65_18_fu_958_p3)) else "0";
    icmp_ln1496_18_fu_1028_p2 <= "1" when (unsigned(pool_window_2_V_10_fu_999_p3) < unsigned(pool_window_3_V_10_fu_1007_p3)) else "0";
    icmp_ln1496_19_fu_1050_p2 <= "1" when (unsigned(select_ln65_20_fu_1020_p3) < unsigned(select_ln65_22_fu_1042_p3)) else "0";
    icmp_ln1496_1_fu_608_p2 <= "1" when (unsigned(pool_window_2_V_fu_579_p3) < unsigned(pool_window_3_V_fu_587_p3)) else "0";
    icmp_ln1496_20_fu_1112_p2 <= "1" when (unsigned(pool_window_2_V_12_fu_1083_p3) < unsigned(pool_window_3_V_12_fu_1091_p3)) else "0";
    icmp_ln1496_21_fu_1134_p2 <= "1" when (unsigned(select_ln65_24_fu_1104_p3) < unsigned(select_ln65_26_fu_1126_p3)) else "0";
    icmp_ln1496_22_fu_1196_p2 <= "1" when (unsigned(pool_window_2_V_14_fu_1167_p3) < unsigned(pool_window_3_V_14_fu_1175_p3)) else "0";
    icmp_ln1496_23_fu_1218_p2 <= "1" when (unsigned(select_ln65_28_fu_1188_p3) < unsigned(select_ln65_30_fu_1210_p3)) else "0";
    icmp_ln1496_2_fu_630_p2 <= "1" when (unsigned(select_ln65_fu_600_p3) < unsigned(select_ln65_2_fu_622_p3)) else "0";
    icmp_ln1496_3_fu_846_p2 <= "1" when (unsigned(pool_window_0_V_6_fu_816_p3) < unsigned(pool_window_1_V_6_fu_824_p3)) else "0";
    icmp_ln1496_4_fu_930_p2 <= "1" when (unsigned(pool_window_0_V_8_fu_900_p3) < unsigned(pool_window_1_V_8_fu_908_p3)) else "0";
    icmp_ln1496_5_fu_1014_p2 <= "1" when (unsigned(pool_window_0_V_10_fu_984_p3) < unsigned(pool_window_1_V_10_fu_992_p3)) else "0";
    icmp_ln1496_6_fu_1098_p2 <= "1" when (unsigned(pool_window_0_V_12_fu_1068_p3) < unsigned(pool_window_1_V_12_fu_1076_p3)) else "0";
    icmp_ln1496_7_fu_1182_p2 <= "1" when (unsigned(pool_window_0_V_14_fu_1152_p3) < unsigned(pool_window_1_V_14_fu_1160_p3)) else "0";
    icmp_ln1496_8_fu_678_p2 <= "1" when (unsigned(pool_window_0_V_2_fu_648_p3) < unsigned(pool_window_1_V_2_fu_656_p3)) else "0";
    icmp_ln1496_9_fu_692_p2 <= "1" when (unsigned(pool_window_2_V_2_fu_663_p3) < unsigned(pool_window_3_V_2_fu_671_p3)) else "0";
    icmp_ln1496_fu_594_p2 <= "1" when (unsigned(pool_window_0_V_fu_564_p3) < unsigned(pool_window_1_V_fu_572_p3)) else "0";
    icmp_ln191_1_fu_520_p2 <= "1" when (sY = ap_const_lv32_1) else "0";
    icmp_ln191_2_fu_530_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_3_fu_540_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_510_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln212_fu_1236_p2 <= "1" when (pX = ap_const_lv32_A) else "0";
    icmp_ln216_fu_1280_p2 <= "1" when (pY = ap_const_lv32_A) else "0";
    icmp_ln241_fu_238_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_220_p4 = ap_const_lv7_79) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op256 <= (res_V_data_7_V_full_n and res_V_data_6_V_full_n and res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op28 <= (data_V_data_7_V_empty_n and data_V_data_6_V_empty_n and data_V_data_5_V_empty_n and data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_3_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_4_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_4_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_5_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_6_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_6_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_7_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_1601, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_1601 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            line_buffer_Array_V_3_0_7_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_window_0_V_10_fu_984_p3 <= (kernel_data_V_3_13 & ap_const_lv2_0);
    pool_window_0_V_12_fu_1068_p3 <= (kernel_data_V_3_14 & ap_const_lv2_0);
    pool_window_0_V_14_fu_1152_p3 <= (kernel_data_V_3_15 & ap_const_lv2_0);
    pool_window_0_V_2_fu_648_p3 <= (kernel_data_V_3_9 & ap_const_lv2_0);
    pool_window_0_V_4_fu_732_p3 <= (kernel_data_V_3_10 & ap_const_lv2_0);
    pool_window_0_V_6_fu_816_p3 <= (kernel_data_V_3_11 & ap_const_lv2_0);
    pool_window_0_V_8_fu_900_p3 <= (kernel_data_V_3_12 & ap_const_lv2_0);
    pool_window_0_V_fu_564_p3 <= (kernel_data_V_3_8 & ap_const_lv2_0);
    pool_window_1_V_10_fu_992_p3 <= (DataOut_V_76_reg_1688 & ap_const_lv2_0);
    pool_window_1_V_12_fu_1076_p3 <= (DataOut_V_77_reg_1694 & ap_const_lv2_0);
    pool_window_1_V_14_fu_1160_p3 <= (DataOut_V_reg_1700 & ap_const_lv2_0);
    pool_window_1_V_2_fu_656_p3 <= (DataOut_V_72_reg_1664 & ap_const_lv2_0);
    pool_window_1_V_4_fu_740_p3 <= (DataOut_V_73_reg_1670 & ap_const_lv2_0);
    pool_window_1_V_6_fu_824_p3 <= (DataOut_V_74_reg_1676 & ap_const_lv2_0);
    pool_window_1_V_8_fu_908_p3 <= (DataOut_V_75_reg_1682 & ap_const_lv2_0);
    pool_window_1_V_fu_572_p3 <= (DataOut_V_71_reg_1658 & ap_const_lv2_0);
    pool_window_2_V_10_fu_999_p3 <= (kernel_data_V_3_29 & ap_const_lv2_0);
    pool_window_2_V_12_fu_1083_p3 <= (kernel_data_V_3_30 & ap_const_lv2_0);
    pool_window_2_V_14_fu_1167_p3 <= (kernel_data_V_3_31 & ap_const_lv2_0);
    pool_window_2_V_2_fu_663_p3 <= (kernel_data_V_3_25 & ap_const_lv2_0);
    pool_window_2_V_4_fu_747_p3 <= (kernel_data_V_3_26 & ap_const_lv2_0);
    pool_window_2_V_6_fu_831_p3 <= (kernel_data_V_3_27 & ap_const_lv2_0);
    pool_window_2_V_8_fu_915_p3 <= (kernel_data_V_3_28 & ap_const_lv2_0);
    pool_window_2_V_fu_579_p3 <= (kernel_data_V_3_24 & ap_const_lv2_0);
    pool_window_3_V_10_fu_1007_p3 <= (shift_buffer_1_5_V_reg_1640 & ap_const_lv2_0);
    pool_window_3_V_12_fu_1091_p3 <= (shift_buffer_1_6_V_reg_1646 & ap_const_lv2_0);
    pool_window_3_V_14_fu_1175_p3 <= (shift_buffer_1_7_V_reg_1652 & ap_const_lv2_0);
    pool_window_3_V_2_fu_671_p3 <= (shift_buffer_1_1_V_reg_1616 & ap_const_lv2_0);
    pool_window_3_V_4_fu_755_p3 <= (shift_buffer_1_2_V_reg_1622 & ap_const_lv2_0);
    pool_window_3_V_6_fu_839_p3 <= (shift_buffer_1_3_V_reg_1628 & ap_const_lv2_0);
    pool_window_3_V_8_fu_923_p3 <= (shift_buffer_1_4_V_reg_1634 & ap_const_lv2_0);
    pool_window_3_V_fu_587_p3 <= (shift_buffer_1_0_V_reg_1610 & ap_const_lv2_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= (tmp_21_fu_1330_p6 & ap_const_lv6_0);

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= (tmp_22_fu_1364_p6 & ap_const_lv6_0);

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= (tmp_23_fu_1398_p6 & ap_const_lv6_0);

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= (tmp_24_fu_1432_p6 & ap_const_lv6_0);

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(res_V_data_4_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= (tmp_25_fu_1466_p6 & ap_const_lv6_0);

    res_V_data_4_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_blk_n_assign_proc : process(res_V_data_5_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_din <= (tmp_26_fu_1500_p6 & ap_const_lv6_0);

    res_V_data_5_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_blk_n_assign_proc : process(res_V_data_6_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_6_V_blk_n <= res_V_data_6_V_full_n;
        else 
            res_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_6_V_din <= (tmp_27_fu_1534_p6 & ap_const_lv6_0);

    res_V_data_6_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_blk_n_assign_proc : process(res_V_data_7_V_full_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706)
    begin
        if (((ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_V_data_7_V_blk_n <= res_V_data_7_V_full_n;
        else 
            res_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_7_V_din <= (tmp_28_fu_1568_p6 & ap_const_lv6_0);

    res_V_data_7_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, and_ln191_2_reg_1706, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1706) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_1304_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_1_fu_520_p2(0) = '1') else 
        add_ln222_fu_1298_p2;
    select_ln227_fu_1260_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_510_p2(0) = '1') else 
        add_ln227_fu_1254_p2;
    select_ln65_10_fu_790_p3 <= 
        pool_window_3_V_4_fu_755_p3 when (icmp_ln1496_12_fu_776_p2(0) = '1') else 
        pool_window_2_V_4_fu_747_p3;
    select_ln65_11_fu_640_p3 <= 
        select_ln65_9_fu_614_p3 when (icmp_ln1496_2_fu_630_p2(0) = '1') else 
        zext_ln65_fu_636_p1;
    select_ln65_12_fu_852_p3 <= 
        pool_window_1_V_6_fu_824_p3 when (icmp_ln1496_3_fu_846_p2(0) = '1') else 
        pool_window_0_V_6_fu_816_p3;
    select_ln65_13_fu_698_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_9_fu_692_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_14_fu_874_p3 <= 
        pool_window_3_V_6_fu_839_p3 when (icmp_ln1496_14_fu_860_p2(0) = '1') else 
        pool_window_2_V_6_fu_831_p3;
    select_ln65_15_fu_724_p3 <= 
        select_ln65_13_fu_698_p3 when (icmp_ln1496_10_fu_714_p2(0) = '1') else 
        zext_ln65_1_fu_720_p1;
    select_ln65_16_fu_936_p3 <= 
        pool_window_1_V_8_fu_908_p3 when (icmp_ln1496_4_fu_930_p2(0) = '1') else 
        pool_window_0_V_8_fu_900_p3;
    select_ln65_17_fu_782_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_12_fu_776_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_18_fu_958_p3 <= 
        pool_window_3_V_8_fu_923_p3 when (icmp_ln1496_16_fu_944_p2(0) = '1') else 
        pool_window_2_V_8_fu_915_p3;
    select_ln65_19_fu_808_p3 <= 
        select_ln65_17_fu_782_p3 when (icmp_ln1496_13_fu_798_p2(0) = '1') else 
        zext_ln65_2_fu_804_p1;
    select_ln65_20_fu_1020_p3 <= 
        pool_window_1_V_10_fu_992_p3 when (icmp_ln1496_5_fu_1014_p2(0) = '1') else 
        pool_window_0_V_10_fu_984_p3;
    select_ln65_21_fu_866_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_14_fu_860_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_22_fu_1042_p3 <= 
        pool_window_3_V_10_fu_1007_p3 when (icmp_ln1496_18_fu_1028_p2(0) = '1') else 
        pool_window_2_V_10_fu_999_p3;
    select_ln65_23_fu_892_p3 <= 
        select_ln65_21_fu_866_p3 when (icmp_ln1496_15_fu_882_p2(0) = '1') else 
        zext_ln65_3_fu_888_p1;
    select_ln65_24_fu_1104_p3 <= 
        pool_window_1_V_12_fu_1076_p3 when (icmp_ln1496_6_fu_1098_p2(0) = '1') else 
        pool_window_0_V_12_fu_1068_p3;
    select_ln65_25_fu_950_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_16_fu_944_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_26_fu_1126_p3 <= 
        pool_window_3_V_12_fu_1091_p3 when (icmp_ln1496_20_fu_1112_p2(0) = '1') else 
        pool_window_2_V_12_fu_1083_p3;
    select_ln65_27_fu_976_p3 <= 
        select_ln65_25_fu_950_p3 when (icmp_ln1496_17_fu_966_p2(0) = '1') else 
        zext_ln65_4_fu_972_p1;
    select_ln65_28_fu_1188_p3 <= 
        pool_window_1_V_14_fu_1160_p3 when (icmp_ln1496_7_fu_1182_p2(0) = '1') else 
        pool_window_0_V_14_fu_1152_p3;
    select_ln65_29_fu_1034_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_18_fu_1028_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_2_fu_622_p3 <= 
        pool_window_3_V_fu_587_p3 when (icmp_ln1496_1_fu_608_p2(0) = '1') else 
        pool_window_2_V_fu_579_p3;
    select_ln65_30_fu_1210_p3 <= 
        pool_window_3_V_14_fu_1175_p3 when (icmp_ln1496_22_fu_1196_p2(0) = '1') else 
        pool_window_2_V_14_fu_1167_p3;
    select_ln65_31_fu_1060_p3 <= 
        select_ln65_29_fu_1034_p3 when (icmp_ln1496_19_fu_1050_p2(0) = '1') else 
        zext_ln65_5_fu_1056_p1;
    select_ln65_32_fu_1118_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_20_fu_1112_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_33_fu_1144_p3 <= 
        select_ln65_32_fu_1118_p3 when (icmp_ln1496_21_fu_1134_p2(0) = '1') else 
        zext_ln65_6_fu_1140_p1;
    select_ln65_34_fu_1202_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_22_fu_1196_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_35_fu_1228_p3 <= 
        select_ln65_34_fu_1202_p3 when (icmp_ln1496_23_fu_1218_p2(0) = '1') else 
        zext_ln65_7_fu_1224_p1;
    select_ln65_4_fu_684_p3 <= 
        pool_window_1_V_2_fu_656_p3 when (icmp_ln1496_8_fu_678_p2(0) = '1') else 
        pool_window_0_V_2_fu_648_p3;
    select_ln65_6_fu_706_p3 <= 
        pool_window_3_V_2_fu_671_p3 when (icmp_ln1496_9_fu_692_p2(0) = '1') else 
        pool_window_2_V_2_fu_663_p3;
    select_ln65_8_fu_768_p3 <= 
        pool_window_1_V_4_fu_740_p3 when (icmp_ln1496_11_fu_762_p2(0) = '1') else 
        pool_window_0_V_4_fu_732_p3;
    select_ln65_9_fu_614_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_1_fu_608_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_fu_600_p3 <= 
        pool_window_1_V_fu_572_p3 when (icmp_ln1496_fu_594_p2(0) = '1') else 
        pool_window_0_V_fu_564_p3;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_21_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_reg_1710),10));
    tmp_21_fu_1330_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_reg_1715),10));
    tmp_21_fu_1330_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_reg_1720),10));
    tmp_21_fu_1330_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_reg_1725),10));
    tmp_22_fu_1364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_2_reg_1735),10));
    tmp_22_fu_1364_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_2_reg_1740),10));
    tmp_22_fu_1364_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_2_reg_1745),10));
    tmp_22_fu_1364_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_2_reg_1750),10));
    tmp_23_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_4_reg_1760),10));
    tmp_23_fu_1398_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_4_reg_1765),10));
    tmp_23_fu_1398_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_4_reg_1770),10));
    tmp_23_fu_1398_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_4_reg_1775),10));
    tmp_24_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_6_reg_1785),10));
    tmp_24_fu_1432_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_6_reg_1790),10));
    tmp_24_fu_1432_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_6_reg_1795),10));
    tmp_24_fu_1432_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_6_reg_1800),10));
    tmp_25_fu_1466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_8_reg_1810),10));
    tmp_25_fu_1466_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_8_reg_1815),10));
    tmp_25_fu_1466_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_8_reg_1820),10));
    tmp_25_fu_1466_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_8_reg_1825),10));
    tmp_26_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_10_reg_1835),10));
    tmp_26_fu_1500_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_10_reg_1840),10));
    tmp_26_fu_1500_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_10_reg_1845),10));
    tmp_26_fu_1500_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_10_reg_1850),10));
    tmp_27_fu_1534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_12_reg_1860),10));
    tmp_27_fu_1534_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_12_reg_1865),10));
    tmp_27_fu_1534_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_12_reg_1870),10));
    tmp_27_fu_1534_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_12_reg_1875),10));
    tmp_28_fu_1568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_14_reg_1885),10));
    tmp_28_fu_1568_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_14_reg_1890),10));
    tmp_28_fu_1568_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_14_reg_1895),10));
    tmp_28_fu_1568_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_14_reg_1900),10));
    zext_ln65_1_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_8_fu_678_p2),2));
    zext_ln65_2_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_11_fu_762_p2),2));
    zext_ln65_3_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_3_fu_846_p2),2));
    zext_ln65_4_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_4_fu_930_p2),2));
    zext_ln65_5_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_5_fu_1014_p2),2));
    zext_ln65_6_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_6_fu_1098_p2),2));
    zext_ln65_7_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_7_fu_1182_p2),2));
    zext_ln65_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_fu_594_p2),2));
end behav;
