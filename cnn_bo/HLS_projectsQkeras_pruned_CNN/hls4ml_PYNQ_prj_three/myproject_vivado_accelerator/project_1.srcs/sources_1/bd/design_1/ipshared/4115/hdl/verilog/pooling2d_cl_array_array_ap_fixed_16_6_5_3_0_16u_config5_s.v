// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [2:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [2:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [2:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [2:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [2:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [2:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [2:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [2:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [2:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [2:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [2:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [2:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [2:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [2:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [2:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [2:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [15:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [15:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [15:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [15:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [15:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [15:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg   [2:0] kernel_data_V_2_16;
reg   [2:0] kernel_data_V_2_17;
reg   [2:0] kernel_data_V_2_18;
reg   [2:0] kernel_data_V_2_19;
reg   [2:0] kernel_data_V_2_20;
reg   [2:0] kernel_data_V_2_21;
reg   [2:0] kernel_data_V_2_22;
reg   [2:0] kernel_data_V_2_23;
reg   [2:0] kernel_data_V_2_24;
reg   [2:0] kernel_data_V_2_25;
reg   [2:0] kernel_data_V_2_26;
reg   [2:0] kernel_data_V_2_27;
reg   [2:0] kernel_data_V_2_28;
reg   [2:0] kernel_data_V_2_29;
reg   [2:0] kernel_data_V_2_30;
reg   [2:0] kernel_data_V_2_31;
reg   [2:0] kernel_data_V_2_48;
reg   [2:0] kernel_data_V_2_49;
reg   [2:0] kernel_data_V_2_50;
reg   [2:0] kernel_data_V_2_51;
reg   [2:0] kernel_data_V_2_52;
reg   [2:0] kernel_data_V_2_53;
reg   [2:0] kernel_data_V_2_54;
reg   [2:0] kernel_data_V_2_55;
reg   [2:0] kernel_data_V_2_56;
reg   [2:0] kernel_data_V_2_57;
reg   [2:0] kernel_data_V_2_58;
reg   [2:0] kernel_data_V_2_59;
reg   [2:0] kernel_data_V_2_60;
reg   [2:0] kernel_data_V_2_61;
reg   [2:0] kernel_data_V_2_62;
reg   [2:0] kernel_data_V_2_63;
reg    line_buffer_Array_V_2_0_0_ce0;
reg    line_buffer_Array_V_2_0_0_we0;
wire   [2:0] line_buffer_Array_V_2_0_0_q0;
reg    line_buffer_Array_V_2_0_1_ce0;
reg    line_buffer_Array_V_2_0_1_we0;
wire   [2:0] line_buffer_Array_V_2_0_1_q0;
reg    line_buffer_Array_V_2_0_2_ce0;
reg    line_buffer_Array_V_2_0_2_we0;
wire   [2:0] line_buffer_Array_V_2_0_2_q0;
reg    line_buffer_Array_V_2_0_3_ce0;
reg    line_buffer_Array_V_2_0_3_we0;
wire   [2:0] line_buffer_Array_V_2_0_3_q0;
reg    line_buffer_Array_V_2_0_4_ce0;
reg    line_buffer_Array_V_2_0_4_we0;
wire   [2:0] line_buffer_Array_V_2_0_4_q0;
reg    line_buffer_Array_V_2_0_5_ce0;
reg    line_buffer_Array_V_2_0_5_we0;
wire   [2:0] line_buffer_Array_V_2_0_5_q0;
reg    line_buffer_Array_V_2_0_6_ce0;
reg    line_buffer_Array_V_2_0_6_we0;
wire   [2:0] line_buffer_Array_V_2_0_6_q0;
reg    line_buffer_Array_V_2_0_7_ce0;
reg    line_buffer_Array_V_2_0_7_we0;
wire   [2:0] line_buffer_Array_V_2_0_7_q0;
reg    line_buffer_Array_V_2_0_8_ce0;
reg    line_buffer_Array_V_2_0_8_we0;
wire   [2:0] line_buffer_Array_V_2_0_8_q0;
reg    line_buffer_Array_V_2_0_9_ce0;
reg    line_buffer_Array_V_2_0_9_we0;
wire   [2:0] line_buffer_Array_V_2_0_9_q0;
reg    line_buffer_Array_V_2_0_10_ce0;
reg    line_buffer_Array_V_2_0_10_we0;
wire   [2:0] line_buffer_Array_V_2_0_10_q0;
reg    line_buffer_Array_V_2_0_11_ce0;
reg    line_buffer_Array_V_2_0_11_we0;
wire   [2:0] line_buffer_Array_V_2_0_11_q0;
reg    line_buffer_Array_V_2_0_12_ce0;
reg    line_buffer_Array_V_2_0_12_we0;
wire   [2:0] line_buffer_Array_V_2_0_12_q0;
reg    line_buffer_Array_V_2_0_13_ce0;
reg    line_buffer_Array_V_2_0_13_we0;
wire   [2:0] line_buffer_Array_V_2_0_13_q0;
reg    line_buffer_Array_V_2_0_14_ce0;
reg    line_buffer_Array_V_2_0_14_we0;
wire   [2:0] line_buffer_Array_V_2_0_14_q0;
reg    line_buffer_Array_V_2_0_15_ce0;
reg    line_buffer_Array_V_2_0_15_we0;
wire   [2:0] line_buffer_Array_V_2_0_15_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln241_reg_2937;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] and_ln191_4_reg_2946;
reg   [0:0] and_ln191_4_reg_2946_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [9:0] indvar_flatten_reg_352;
wire   [0:0] icmp_ln241_fu_374_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln241_fu_380_p2;
reg   [9:0] add_ln241_reg_2941;
wire   [0:0] and_ln191_4_fu_438_p2;
wire   [0:0] icmp_ln212_fu_444_p2;
reg   [0:0] icmp_ln212_reg_2950;
wire   [31:0] select_ln227_fu_468_p3;
reg   [31:0] select_ln227_reg_2954;
wire   [0:0] icmp_ln216_fu_488_p2;
reg   [0:0] icmp_ln216_reg_2959;
wire   [31:0] select_ln222_fu_512_p3;
reg   [31:0] select_ln222_reg_2963;
reg   [2:0] shift_buffer_1_0_V_reg_2968;
wire    io_acc_block_signal_op75;
reg    ap_block_state3_pp0_stage1_iter0;
wire    io_acc_block_signal_op470;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [2:0] shift_buffer_1_1_V_reg_2974;
reg   [2:0] shift_buffer_1_2_V_reg_2980;
reg   [2:0] shift_buffer_1_3_V_reg_2986;
reg   [2:0] shift_buffer_1_4_V_reg_2992;
reg   [2:0] shift_buffer_1_5_V_reg_2998;
reg   [2:0] shift_buffer_1_6_V_reg_3004;
reg   [2:0] shift_buffer_1_7_V_reg_3010;
reg   [2:0] shift_buffer_1_8_V_reg_3016;
reg   [2:0] shift_buffer_1_9_V_reg_3022;
reg   [2:0] shift_buffer_1_10_V_reg_3028;
reg   [2:0] shift_buffer_1_11_V_reg_3034;
reg   [2:0] shift_buffer_1_12_V_reg_3040;
reg   [2:0] shift_buffer_1_13_V_reg_3046;
reg   [2:0] shift_buffer_1_14_V_reg_3052;
reg   [2:0] shift_buffer_1_15_V_reg_3058;
reg   [2:0] DataOut_V_93_reg_3064;
reg   [2:0] DataOut_V_94_reg_3070;
reg   [2:0] DataOut_V_95_reg_3076;
reg   [2:0] DataOut_V_96_reg_3082;
reg   [2:0] DataOut_V_97_reg_3088;
reg   [2:0] DataOut_V_98_reg_3094;
reg   [2:0] DataOut_V_99_reg_3100;
reg   [2:0] DataOut_V_100_reg_3106;
reg   [2:0] DataOut_V_101_reg_3112;
reg   [2:0] DataOut_V_102_reg_3118;
reg   [2:0] DataOut_V_103_reg_3124;
reg   [2:0] DataOut_V_104_reg_3130;
reg   [2:0] DataOut_V_105_reg_3136;
reg   [2:0] DataOut_V_106_reg_3142;
reg   [2:0] DataOut_V_107_reg_3148;
reg   [2:0] DataOut_V_reg_3154;
wire   [4:0] pool_window_0_V_fu_1049_p3;
reg   [4:0] pool_window_0_V_reg_3160;
wire   [4:0] pool_window_1_V_fu_1057_p3;
reg   [4:0] pool_window_1_V_reg_3165;
wire   [4:0] pool_window_2_V_fu_1064_p3;
reg   [4:0] pool_window_2_V_reg_3170;
wire   [4:0] pool_window_3_V_fu_1072_p3;
reg   [4:0] pool_window_3_V_reg_3175;
wire   [1:0] select_ln65_38_fu_1125_p3;
reg   [1:0] select_ln65_38_reg_3180;
wire   [4:0] pool_window_0_V_17_fu_1133_p3;
reg   [4:0] pool_window_0_V_17_reg_3185;
wire   [4:0] pool_window_1_V_17_fu_1141_p3;
reg   [4:0] pool_window_1_V_17_reg_3190;
wire   [4:0] pool_window_2_V_17_fu_1148_p3;
reg   [4:0] pool_window_2_V_17_reg_3195;
wire   [4:0] pool_window_3_V_17_fu_1156_p3;
reg   [4:0] pool_window_3_V_17_reg_3200;
wire   [1:0] select_ln65_42_fu_1209_p3;
reg   [1:0] select_ln65_42_reg_3205;
wire   [4:0] pool_window_0_V_19_fu_1217_p3;
reg   [4:0] pool_window_0_V_19_reg_3210;
wire   [4:0] pool_window_1_V_19_fu_1225_p3;
reg   [4:0] pool_window_1_V_19_reg_3215;
wire   [4:0] pool_window_2_V_19_fu_1232_p3;
reg   [4:0] pool_window_2_V_19_reg_3220;
wire   [4:0] pool_window_3_V_19_fu_1240_p3;
reg   [4:0] pool_window_3_V_19_reg_3225;
wire   [1:0] select_ln65_46_fu_1293_p3;
reg   [1:0] select_ln65_46_reg_3230;
wire   [4:0] pool_window_0_V_21_fu_1301_p3;
reg   [4:0] pool_window_0_V_21_reg_3235;
wire   [4:0] pool_window_1_V_21_fu_1309_p3;
reg   [4:0] pool_window_1_V_21_reg_3240;
wire   [4:0] pool_window_2_V_21_fu_1316_p3;
reg   [4:0] pool_window_2_V_21_reg_3245;
wire   [4:0] pool_window_3_V_21_fu_1324_p3;
reg   [4:0] pool_window_3_V_21_reg_3250;
wire   [1:0] select_ln65_50_fu_1377_p3;
reg   [1:0] select_ln65_50_reg_3255;
wire   [4:0] pool_window_0_V_23_fu_1385_p3;
reg   [4:0] pool_window_0_V_23_reg_3260;
wire   [4:0] pool_window_1_V_23_fu_1393_p3;
reg   [4:0] pool_window_1_V_23_reg_3265;
wire   [4:0] pool_window_2_V_23_fu_1400_p3;
reg   [4:0] pool_window_2_V_23_reg_3270;
wire   [4:0] pool_window_3_V_23_fu_1408_p3;
reg   [4:0] pool_window_3_V_23_reg_3275;
wire   [1:0] select_ln65_54_fu_1461_p3;
reg   [1:0] select_ln65_54_reg_3280;
wire   [4:0] pool_window_0_V_25_fu_1469_p3;
reg   [4:0] pool_window_0_V_25_reg_3285;
wire   [4:0] pool_window_1_V_25_fu_1477_p3;
reg   [4:0] pool_window_1_V_25_reg_3290;
wire   [4:0] pool_window_2_V_25_fu_1484_p3;
reg   [4:0] pool_window_2_V_25_reg_3295;
wire   [4:0] pool_window_3_V_25_fu_1492_p3;
reg   [4:0] pool_window_3_V_25_reg_3300;
wire   [1:0] select_ln65_58_fu_1545_p3;
reg   [1:0] select_ln65_58_reg_3305;
wire   [4:0] pool_window_0_V_27_fu_1553_p3;
reg   [4:0] pool_window_0_V_27_reg_3310;
wire   [4:0] pool_window_1_V_27_fu_1561_p3;
reg   [4:0] pool_window_1_V_27_reg_3315;
wire   [4:0] pool_window_2_V_27_fu_1568_p3;
reg   [4:0] pool_window_2_V_27_reg_3320;
wire   [4:0] pool_window_3_V_27_fu_1576_p3;
reg   [4:0] pool_window_3_V_27_reg_3325;
wire   [1:0] select_ln65_62_fu_1629_p3;
reg   [1:0] select_ln65_62_reg_3330;
wire   [4:0] pool_window_0_V_29_fu_1637_p3;
reg   [4:0] pool_window_0_V_29_reg_3335;
wire   [4:0] pool_window_1_V_29_fu_1645_p3;
reg   [4:0] pool_window_1_V_29_reg_3340;
wire   [4:0] pool_window_2_V_29_fu_1652_p3;
reg   [4:0] pool_window_2_V_29_reg_3345;
wire   [4:0] pool_window_3_V_29_fu_1660_p3;
reg   [4:0] pool_window_3_V_29_reg_3350;
wire   [1:0] select_ln65_66_fu_1713_p3;
reg   [1:0] select_ln65_66_reg_3355;
wire   [4:0] pool_window_0_V_31_fu_1721_p3;
reg   [4:0] pool_window_0_V_31_reg_3360;
wire   [4:0] pool_window_1_V_31_fu_1729_p3;
reg   [4:0] pool_window_1_V_31_reg_3365;
wire   [4:0] pool_window_2_V_31_fu_1736_p3;
reg   [4:0] pool_window_2_V_31_reg_3370;
wire   [4:0] pool_window_3_V_31_fu_1744_p3;
reg   [4:0] pool_window_3_V_31_reg_3375;
wire   [1:0] select_ln65_70_fu_1797_p3;
reg   [1:0] select_ln65_70_reg_3380;
wire   [4:0] pool_window_0_V_33_fu_1805_p3;
reg   [4:0] pool_window_0_V_33_reg_3385;
wire   [4:0] pool_window_1_V_33_fu_1813_p3;
reg   [4:0] pool_window_1_V_33_reg_3390;
wire   [4:0] pool_window_2_V_33_fu_1820_p3;
reg   [4:0] pool_window_2_V_33_reg_3395;
wire   [4:0] pool_window_3_V_33_fu_1828_p3;
reg   [4:0] pool_window_3_V_33_reg_3400;
wire   [1:0] select_ln65_74_fu_1881_p3;
reg   [1:0] select_ln65_74_reg_3405;
wire   [4:0] pool_window_0_V_35_fu_1889_p3;
reg   [4:0] pool_window_0_V_35_reg_3410;
wire   [4:0] pool_window_1_V_35_fu_1897_p3;
reg   [4:0] pool_window_1_V_35_reg_3415;
wire   [4:0] pool_window_2_V_35_fu_1904_p3;
reg   [4:0] pool_window_2_V_35_reg_3420;
wire   [4:0] pool_window_3_V_35_fu_1912_p3;
reg   [4:0] pool_window_3_V_35_reg_3425;
wire   [1:0] select_ln65_78_fu_1965_p3;
reg   [1:0] select_ln65_78_reg_3430;
wire   [4:0] pool_window_0_V_37_fu_1973_p3;
reg   [4:0] pool_window_0_V_37_reg_3435;
wire   [4:0] pool_window_1_V_37_fu_1981_p3;
reg   [4:0] pool_window_1_V_37_reg_3440;
wire   [4:0] pool_window_2_V_37_fu_1988_p3;
reg   [4:0] pool_window_2_V_37_reg_3445;
wire   [4:0] pool_window_3_V_37_fu_1996_p3;
reg   [4:0] pool_window_3_V_37_reg_3450;
wire   [1:0] select_ln65_82_fu_2049_p3;
reg   [1:0] select_ln65_82_reg_3455;
wire   [4:0] pool_window_0_V_39_fu_2057_p3;
reg   [4:0] pool_window_0_V_39_reg_3460;
wire   [4:0] pool_window_1_V_39_fu_2065_p3;
reg   [4:0] pool_window_1_V_39_reg_3465;
wire   [4:0] pool_window_2_V_39_fu_2072_p3;
reg   [4:0] pool_window_2_V_39_reg_3470;
wire   [4:0] pool_window_3_V_39_fu_2080_p3;
reg   [4:0] pool_window_3_V_39_reg_3475;
wire   [1:0] select_ln65_86_fu_2133_p3;
reg   [1:0] select_ln65_86_reg_3480;
wire   [4:0] pool_window_0_V_41_fu_2141_p3;
reg   [4:0] pool_window_0_V_41_reg_3485;
wire   [4:0] pool_window_1_V_41_fu_2149_p3;
reg   [4:0] pool_window_1_V_41_reg_3490;
wire   [4:0] pool_window_2_V_41_fu_2156_p3;
reg   [4:0] pool_window_2_V_41_reg_3495;
wire   [4:0] pool_window_3_V_41_fu_2164_p3;
reg   [4:0] pool_window_3_V_41_reg_3500;
wire   [1:0] select_ln65_90_fu_2217_p3;
reg   [1:0] select_ln65_90_reg_3505;
wire   [4:0] pool_window_0_V_43_fu_2225_p3;
reg   [4:0] pool_window_0_V_43_reg_3510;
wire   [4:0] pool_window_1_V_43_fu_2233_p3;
reg   [4:0] pool_window_1_V_43_reg_3515;
wire   [4:0] pool_window_2_V_43_fu_2240_p3;
reg   [4:0] pool_window_2_V_43_reg_3520;
wire   [4:0] pool_window_3_V_43_fu_2248_p3;
reg   [4:0] pool_window_3_V_43_reg_3525;
wire   [1:0] select_ln65_94_fu_2301_p3;
reg   [1:0] select_ln65_94_reg_3530;
wire   [4:0] pool_window_0_V_45_fu_2309_p3;
reg   [4:0] pool_window_0_V_45_reg_3535;
wire   [4:0] pool_window_1_V_45_fu_2317_p3;
reg   [4:0] pool_window_1_V_45_reg_3540;
wire   [4:0] pool_window_2_V_45_fu_2324_p3;
reg   [4:0] pool_window_2_V_45_reg_3545;
wire   [4:0] pool_window_3_V_45_fu_2332_p3;
reg   [4:0] pool_window_3_V_45_reg_3550;
wire   [1:0] select_ln65_96_fu_2385_p3;
reg   [1:0] select_ln65_96_reg_3555;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_356_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_367_p4;
wire   [31:0] add_ln225_fu_450_p2;
wire   [31:0] add_ln220_fu_494_p2;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln191_fu_390_p2;
wire   [0:0] icmp_ln191_4_fu_400_p2;
wire   [0:0] icmp_ln191_5_fu_410_p2;
wire   [0:0] icmp_ln191_6_fu_420_p2;
wire   [0:0] and_ln191_3_fu_432_p2;
wire   [0:0] and_ln191_fu_426_p2;
wire   [31:0] add_ln227_fu_462_p2;
wire   [31:0] add_ln222_fu_506_p2;
wire   [0:0] icmp_ln1496_fu_1079_p2;
wire   [0:0] icmp_ln1496_24_fu_1093_p2;
wire   [4:0] select_ln65_fu_1085_p3;
wire   [4:0] select_ln65_33_fu_1107_p3;
wire   [0:0] icmp_ln1496_25_fu_1115_p2;
wire   [1:0] select_ln65_36_fu_1099_p3;
wire   [1:0] zext_ln65_fu_1121_p1;
wire   [0:0] icmp_ln1496_1_fu_1163_p2;
wire   [0:0] icmp_ln1496_26_fu_1177_p2;
wire   [4:0] select_ln65_35_fu_1169_p3;
wire   [4:0] select_ln65_37_fu_1191_p3;
wire   [0:0] icmp_ln1496_27_fu_1199_p2;
wire   [1:0] select_ln65_40_fu_1183_p3;
wire   [1:0] zext_ln65_8_fu_1205_p1;
wire   [0:0] icmp_ln1496_2_fu_1247_p2;
wire   [0:0] icmp_ln1496_28_fu_1261_p2;
wire   [4:0] select_ln65_39_fu_1253_p3;
wire   [4:0] select_ln65_41_fu_1275_p3;
wire   [0:0] icmp_ln1496_29_fu_1283_p2;
wire   [1:0] select_ln65_44_fu_1267_p3;
wire   [1:0] zext_ln65_9_fu_1289_p1;
wire   [0:0] icmp_ln1496_30_fu_1331_p2;
wire   [0:0] icmp_ln1496_31_fu_1345_p2;
wire   [4:0] select_ln65_43_fu_1337_p3;
wire   [4:0] select_ln65_45_fu_1359_p3;
wire   [0:0] icmp_ln1496_32_fu_1367_p2;
wire   [1:0] select_ln65_48_fu_1351_p3;
wire   [1:0] zext_ln65_10_fu_1373_p1;
wire   [0:0] icmp_ln1496_33_fu_1415_p2;
wire   [0:0] icmp_ln1496_34_fu_1429_p2;
wire   [4:0] select_ln65_47_fu_1421_p3;
wire   [4:0] select_ln65_49_fu_1443_p3;
wire   [0:0] icmp_ln1496_35_fu_1451_p2;
wire   [1:0] select_ln65_52_fu_1435_p3;
wire   [1:0] zext_ln65_11_fu_1457_p1;
wire   [0:0] icmp_ln1496_5_fu_1499_p2;
wire   [0:0] icmp_ln1496_36_fu_1513_p2;
wire   [4:0] select_ln65_51_fu_1505_p3;
wire   [4:0] select_ln65_53_fu_1527_p3;
wire   [0:0] icmp_ln1496_37_fu_1535_p2;
wire   [1:0] select_ln65_56_fu_1519_p3;
wire   [1:0] zext_ln65_12_fu_1541_p1;
wire   [0:0] icmp_ln1496_6_fu_1583_p2;
wire   [0:0] icmp_ln1496_38_fu_1597_p2;
wire   [4:0] select_ln65_55_fu_1589_p3;
wire   [4:0] select_ln65_57_fu_1611_p3;
wire   [0:0] icmp_ln1496_39_fu_1619_p2;
wire   [1:0] select_ln65_60_fu_1603_p3;
wire   [1:0] zext_ln65_13_fu_1625_p1;
wire   [0:0] icmp_ln1496_7_fu_1667_p2;
wire   [0:0] icmp_ln1496_40_fu_1681_p2;
wire   [4:0] select_ln65_59_fu_1673_p3;
wire   [4:0] select_ln65_61_fu_1695_p3;
wire   [0:0] icmp_ln1496_41_fu_1703_p2;
wire   [1:0] select_ln65_64_fu_1687_p3;
wire   [1:0] zext_ln65_14_fu_1709_p1;
wire   [0:0] icmp_ln1496_8_fu_1751_p2;
wire   [0:0] icmp_ln1496_42_fu_1765_p2;
wire   [4:0] select_ln65_63_fu_1757_p3;
wire   [4:0] select_ln65_65_fu_1779_p3;
wire   [0:0] icmp_ln1496_43_fu_1787_p2;
wire   [1:0] select_ln65_68_fu_1771_p3;
wire   [1:0] zext_ln65_15_fu_1793_p1;
wire   [0:0] icmp_ln1496_9_fu_1835_p2;
wire   [0:0] icmp_ln1496_44_fu_1849_p2;
wire   [4:0] select_ln65_67_fu_1841_p3;
wire   [4:0] select_ln65_69_fu_1863_p3;
wire   [0:0] icmp_ln1496_45_fu_1871_p2;
wire   [1:0] select_ln65_72_fu_1855_p3;
wire   [1:0] zext_ln65_16_fu_1877_p1;
wire   [0:0] icmp_ln1496_10_fu_1919_p2;
wire   [0:0] icmp_ln1496_46_fu_1933_p2;
wire   [4:0] select_ln65_71_fu_1925_p3;
wire   [4:0] select_ln65_73_fu_1947_p3;
wire   [0:0] icmp_ln1496_47_fu_1955_p2;
wire   [1:0] select_ln65_76_fu_1939_p3;
wire   [1:0] zext_ln65_17_fu_1961_p1;
wire   [0:0] icmp_ln1496_11_fu_2003_p2;
wire   [0:0] icmp_ln1496_48_fu_2017_p2;
wire   [4:0] select_ln65_75_fu_2009_p3;
wire   [4:0] select_ln65_77_fu_2031_p3;
wire   [0:0] icmp_ln1496_49_fu_2039_p2;
wire   [1:0] select_ln65_80_fu_2023_p3;
wire   [1:0] zext_ln65_18_fu_2045_p1;
wire   [0:0] icmp_ln1496_12_fu_2087_p2;
wire   [0:0] icmp_ln1496_50_fu_2101_p2;
wire   [4:0] select_ln65_79_fu_2093_p3;
wire   [4:0] select_ln65_81_fu_2115_p3;
wire   [0:0] icmp_ln1496_51_fu_2123_p2;
wire   [1:0] select_ln65_84_fu_2107_p3;
wire   [1:0] zext_ln65_19_fu_2129_p1;
wire   [0:0] icmp_ln1496_13_fu_2171_p2;
wire   [0:0] icmp_ln1496_52_fu_2185_p2;
wire   [4:0] select_ln65_83_fu_2177_p3;
wire   [4:0] select_ln65_85_fu_2199_p3;
wire   [0:0] icmp_ln1496_53_fu_2207_p2;
wire   [1:0] select_ln65_88_fu_2191_p3;
wire   [1:0] zext_ln65_20_fu_2213_p1;
wire   [0:0] icmp_ln1496_14_fu_2255_p2;
wire   [0:0] icmp_ln1496_54_fu_2269_p2;
wire   [4:0] select_ln65_87_fu_2261_p3;
wire   [4:0] select_ln65_89_fu_2283_p3;
wire   [0:0] icmp_ln1496_55_fu_2291_p2;
wire   [1:0] select_ln65_92_fu_2275_p3;
wire   [1:0] zext_ln65_21_fu_2297_p1;
wire   [0:0] icmp_ln1496_15_fu_2339_p2;
wire   [0:0] icmp_ln1496_56_fu_2353_p2;
wire   [4:0] select_ln65_91_fu_2345_p3;
wire   [4:0] select_ln65_93_fu_2367_p3;
wire   [0:0] icmp_ln1496_57_fu_2375_p2;
wire   [1:0] select_ln65_95_fu_2359_p3;
wire   [1:0] zext_ln65_22_fu_2381_p1;
wire   [9:0] tmp_29_fu_2405_p1;
wire   [9:0] tmp_29_fu_2405_p2;
wire   [9:0] tmp_29_fu_2405_p3;
wire   [9:0] tmp_29_fu_2405_p4;
wire   [9:0] tmp_29_fu_2405_p6;
wire   [9:0] tmp_30_fu_2439_p1;
wire   [9:0] tmp_30_fu_2439_p2;
wire   [9:0] tmp_30_fu_2439_p3;
wire   [9:0] tmp_30_fu_2439_p4;
wire   [9:0] tmp_30_fu_2439_p6;
wire   [9:0] tmp_31_fu_2473_p1;
wire   [9:0] tmp_31_fu_2473_p2;
wire   [9:0] tmp_31_fu_2473_p3;
wire   [9:0] tmp_31_fu_2473_p4;
wire   [9:0] tmp_31_fu_2473_p6;
wire   [9:0] tmp_32_fu_2507_p1;
wire   [9:0] tmp_32_fu_2507_p2;
wire   [9:0] tmp_32_fu_2507_p3;
wire   [9:0] tmp_32_fu_2507_p4;
wire   [9:0] tmp_32_fu_2507_p6;
wire   [9:0] tmp_33_fu_2541_p1;
wire   [9:0] tmp_33_fu_2541_p2;
wire   [9:0] tmp_33_fu_2541_p3;
wire   [9:0] tmp_33_fu_2541_p4;
wire   [9:0] tmp_33_fu_2541_p6;
wire   [9:0] tmp_34_fu_2575_p1;
wire   [9:0] tmp_34_fu_2575_p2;
wire   [9:0] tmp_34_fu_2575_p3;
wire   [9:0] tmp_34_fu_2575_p4;
wire   [9:0] tmp_34_fu_2575_p6;
wire   [9:0] tmp_35_fu_2609_p1;
wire   [9:0] tmp_35_fu_2609_p2;
wire   [9:0] tmp_35_fu_2609_p3;
wire   [9:0] tmp_35_fu_2609_p4;
wire   [9:0] tmp_35_fu_2609_p6;
wire   [9:0] tmp_36_fu_2643_p1;
wire   [9:0] tmp_36_fu_2643_p2;
wire   [9:0] tmp_36_fu_2643_p3;
wire   [9:0] tmp_36_fu_2643_p4;
wire   [9:0] tmp_36_fu_2643_p6;
wire   [9:0] tmp_37_fu_2677_p1;
wire   [9:0] tmp_37_fu_2677_p2;
wire   [9:0] tmp_37_fu_2677_p3;
wire   [9:0] tmp_37_fu_2677_p4;
wire   [9:0] tmp_37_fu_2677_p6;
wire   [9:0] tmp_38_fu_2711_p1;
wire   [9:0] tmp_38_fu_2711_p2;
wire   [9:0] tmp_38_fu_2711_p3;
wire   [9:0] tmp_38_fu_2711_p4;
wire   [9:0] tmp_38_fu_2711_p6;
wire   [9:0] tmp_39_fu_2745_p1;
wire   [9:0] tmp_39_fu_2745_p2;
wire   [9:0] tmp_39_fu_2745_p3;
wire   [9:0] tmp_39_fu_2745_p4;
wire   [9:0] tmp_39_fu_2745_p6;
wire   [9:0] tmp_40_fu_2779_p1;
wire   [9:0] tmp_40_fu_2779_p2;
wire   [9:0] tmp_40_fu_2779_p3;
wire   [9:0] tmp_40_fu_2779_p4;
wire   [9:0] tmp_40_fu_2779_p6;
wire   [9:0] tmp_41_fu_2813_p1;
wire   [9:0] tmp_41_fu_2813_p2;
wire   [9:0] tmp_41_fu_2813_p3;
wire   [9:0] tmp_41_fu_2813_p4;
wire   [9:0] tmp_41_fu_2813_p6;
wire   [9:0] tmp_42_fu_2847_p1;
wire   [9:0] tmp_42_fu_2847_p2;
wire   [9:0] tmp_42_fu_2847_p3;
wire   [9:0] tmp_42_fu_2847_p4;
wire   [9:0] tmp_42_fu_2847_p6;
wire   [9:0] tmp_43_fu_2881_p1;
wire   [9:0] tmp_43_fu_2881_p2;
wire   [9:0] tmp_43_fu_2881_p3;
wire   [9:0] tmp_43_fu_2881_p4;
wire   [9:0] tmp_43_fu_2881_p6;
wire   [9:0] tmp_44_fu_2915_p1;
wire   [9:0] tmp_44_fu_2915_p2;
wire   [9:0] tmp_44_fu_2915_p3;
wire   [9:0] tmp_44_fu_2915_p4;
wire   [9:0] tmp_44_fu_2915_p6;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_2022;
reg    ap_condition_725;
reg    ap_condition_431;
reg    ap_condition_2368;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 kernel_data_V_2_16 = 3'd0;
#0 kernel_data_V_2_17 = 3'd0;
#0 kernel_data_V_2_18 = 3'd0;
#0 kernel_data_V_2_19 = 3'd0;
#0 kernel_data_V_2_20 = 3'd0;
#0 kernel_data_V_2_21 = 3'd0;
#0 kernel_data_V_2_22 = 3'd0;
#0 kernel_data_V_2_23 = 3'd0;
#0 kernel_data_V_2_24 = 3'd0;
#0 kernel_data_V_2_25 = 3'd0;
#0 kernel_data_V_2_26 = 3'd0;
#0 kernel_data_V_2_27 = 3'd0;
#0 kernel_data_V_2_28 = 3'd0;
#0 kernel_data_V_2_29 = 3'd0;
#0 kernel_data_V_2_30 = 3'd0;
#0 kernel_data_V_2_31 = 3'd0;
#0 kernel_data_V_2_48 = 3'd0;
#0 kernel_data_V_2_49 = 3'd0;
#0 kernel_data_V_2_50 = 3'd0;
#0 kernel_data_V_2_51 = 3'd0;
#0 kernel_data_V_2_52 = 3'd0;
#0 kernel_data_V_2_53 = 3'd0;
#0 kernel_data_V_2_54 = 3'd0;
#0 kernel_data_V_2_55 = 3'd0;
#0 kernel_data_V_2_56 = 3'd0;
#0 kernel_data_V_2_57 = 3'd0;
#0 kernel_data_V_2_58 = 3'd0;
#0 kernel_data_V_2_59 = 3'd0;
#0 kernel_data_V_2_60 = 3'd0;
#0 kernel_data_V_2_61 = 3'd0;
#0 kernel_data_V_2_62 = 3'd0;
#0 kernel_data_V_2_63 = 3'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_0_ce0),
    .we0(line_buffer_Array_V_2_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_2_0_0_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_1_ce0),
    .we0(line_buffer_Array_V_2_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_2_0_1_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_2_ce0),
    .we0(line_buffer_Array_V_2_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_2_0_2_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_3_ce0),
    .we0(line_buffer_Array_V_2_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_2_0_3_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_4_ce0),
    .we0(line_buffer_Array_V_2_0_4_we0),
    .d0(data_V_data_4_V_dout),
    .q0(line_buffer_Array_V_2_0_4_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_5_ce0),
    .we0(line_buffer_Array_V_2_0_5_we0),
    .d0(data_V_data_5_V_dout),
    .q0(line_buffer_Array_V_2_0_5_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_6_ce0),
    .we0(line_buffer_Array_V_2_0_6_we0),
    .d0(data_V_data_6_V_dout),
    .q0(line_buffer_Array_V_2_0_6_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_7_ce0),
    .we0(line_buffer_Array_V_2_0_7_we0),
    .d0(data_V_data_7_V_dout),
    .q0(line_buffer_Array_V_2_0_7_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_8_ce0),
    .we0(line_buffer_Array_V_2_0_8_we0),
    .d0(data_V_data_8_V_dout),
    .q0(line_buffer_Array_V_2_0_8_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_9_ce0),
    .we0(line_buffer_Array_V_2_0_9_we0),
    .d0(data_V_data_9_V_dout),
    .q0(line_buffer_Array_V_2_0_9_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_10_ce0),
    .we0(line_buffer_Array_V_2_0_10_we0),
    .d0(data_V_data_10_V_dout),
    .q0(line_buffer_Array_V_2_0_10_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_11_ce0),
    .we0(line_buffer_Array_V_2_0_11_we0),
    .d0(data_V_data_11_V_dout),
    .q0(line_buffer_Array_V_2_0_11_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_12_ce0),
    .we0(line_buffer_Array_V_2_0_12_we0),
    .d0(data_V_data_12_V_dout),
    .q0(line_buffer_Array_V_2_0_12_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_13_ce0),
    .we0(line_buffer_Array_V_2_0_13_we0),
    .d0(data_V_data_13_V_dout),
    .q0(line_buffer_Array_V_2_0_13_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_14_ce0),
    .we0(line_buffer_Array_V_2_0_14_we0),
    .d0(data_V_data_14_V_dout),
    .q0(line_buffer_Array_V_2_0_14_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_dEe #(
    .DataWidth( 3 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_2_0_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd25),
    .ce0(line_buffer_Array_V_2_0_15_ce0),
    .we0(line_buffer_Array_V_2_0_15_we0),
    .d0(data_V_data_15_V_dout),
    .q0(line_buffer_Array_V_2_0_15_q0)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U92(
    .din0(tmp_29_fu_2405_p1),
    .din1(tmp_29_fu_2405_p2),
    .din2(tmp_29_fu_2405_p3),
    .din3(tmp_29_fu_2405_p4),
    .din4(select_ln65_38_reg_3180),
    .dout(tmp_29_fu_2405_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U93(
    .din0(tmp_30_fu_2439_p1),
    .din1(tmp_30_fu_2439_p2),
    .din2(tmp_30_fu_2439_p3),
    .din3(tmp_30_fu_2439_p4),
    .din4(select_ln65_42_reg_3205),
    .dout(tmp_30_fu_2439_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U94(
    .din0(tmp_31_fu_2473_p1),
    .din1(tmp_31_fu_2473_p2),
    .din2(tmp_31_fu_2473_p3),
    .din3(tmp_31_fu_2473_p4),
    .din4(select_ln65_46_reg_3230),
    .dout(tmp_31_fu_2473_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U95(
    .din0(tmp_32_fu_2507_p1),
    .din1(tmp_32_fu_2507_p2),
    .din2(tmp_32_fu_2507_p3),
    .din3(tmp_32_fu_2507_p4),
    .din4(select_ln65_50_reg_3255),
    .dout(tmp_32_fu_2507_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U96(
    .din0(tmp_33_fu_2541_p1),
    .din1(tmp_33_fu_2541_p2),
    .din2(tmp_33_fu_2541_p3),
    .din3(tmp_33_fu_2541_p4),
    .din4(select_ln65_54_reg_3280),
    .dout(tmp_33_fu_2541_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U97(
    .din0(tmp_34_fu_2575_p1),
    .din1(tmp_34_fu_2575_p2),
    .din2(tmp_34_fu_2575_p3),
    .din3(tmp_34_fu_2575_p4),
    .din4(select_ln65_58_reg_3305),
    .dout(tmp_34_fu_2575_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U98(
    .din0(tmp_35_fu_2609_p1),
    .din1(tmp_35_fu_2609_p2),
    .din2(tmp_35_fu_2609_p3),
    .din3(tmp_35_fu_2609_p4),
    .din4(select_ln65_62_reg_3330),
    .dout(tmp_35_fu_2609_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U99(
    .din0(tmp_36_fu_2643_p1),
    .din1(tmp_36_fu_2643_p2),
    .din2(tmp_36_fu_2643_p3),
    .din3(tmp_36_fu_2643_p4),
    .din4(select_ln65_66_reg_3355),
    .dout(tmp_36_fu_2643_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U100(
    .din0(tmp_37_fu_2677_p1),
    .din1(tmp_37_fu_2677_p2),
    .din2(tmp_37_fu_2677_p3),
    .din3(tmp_37_fu_2677_p4),
    .din4(select_ln65_70_reg_3380),
    .dout(tmp_37_fu_2677_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U101(
    .din0(tmp_38_fu_2711_p1),
    .din1(tmp_38_fu_2711_p2),
    .din2(tmp_38_fu_2711_p3),
    .din3(tmp_38_fu_2711_p4),
    .din4(select_ln65_74_reg_3405),
    .dout(tmp_38_fu_2711_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U102(
    .din0(tmp_39_fu_2745_p1),
    .din1(tmp_39_fu_2745_p2),
    .din2(tmp_39_fu_2745_p3),
    .din3(tmp_39_fu_2745_p4),
    .din4(select_ln65_78_reg_3430),
    .dout(tmp_39_fu_2745_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U103(
    .din0(tmp_40_fu_2779_p1),
    .din1(tmp_40_fu_2779_p2),
    .din2(tmp_40_fu_2779_p3),
    .din3(tmp_40_fu_2779_p4),
    .din4(select_ln65_82_reg_3455),
    .dout(tmp_40_fu_2779_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U104(
    .din0(tmp_41_fu_2813_p1),
    .din1(tmp_41_fu_2813_p2),
    .din2(tmp_41_fu_2813_p3),
    .din3(tmp_41_fu_2813_p4),
    .din4(select_ln65_86_reg_3480),
    .dout(tmp_41_fu_2813_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U105(
    .din0(tmp_42_fu_2847_p1),
    .din1(tmp_42_fu_2847_p2),
    .din2(tmp_42_fu_2847_p3),
    .din3(tmp_42_fu_2847_p4),
    .din4(select_ln65_90_reg_3505),
    .dout(tmp_42_fu_2847_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U106(
    .din0(tmp_43_fu_2881_p1),
    .din1(tmp_43_fu_2881_p2),
    .din2(tmp_43_fu_2881_p3),
    .din3(tmp_43_fu_2881_p4),
    .din4(select_ln65_94_reg_3530),
    .dout(tmp_43_fu_2881_p6)
);

myproject_axi_mux_42_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
myproject_axi_mux_42_10_1_1_U107(
    .din0(tmp_44_fu_2915_p1),
    .din1(tmp_44_fu_2915_p2),
    .din2(tmp_44_fu_2915_p3),
    .din3(tmp_44_fu_2915_p4),
    .din4(select_ln65_96_reg_3555),
    .dout(tmp_44_fu_2915_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_352 <= add_ln241_reg_2941;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_352 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2022)) begin
        if ((icmp_ln212_fu_444_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_444_p2 == 1'd0)) begin
            pX_1 <= add_ln225_fu_450_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_725)) begin
        if ((icmp_ln216_fu_488_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln216_fu_488_p2 == 1'd0)) begin
            pY_1 <= add_ln220_fu_494_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_2368)) begin
            sX_1 <= select_ln227_reg_2954;
        end else if ((1'b1 == ap_condition_431)) begin
            sX_1 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        DataOut_V_100_reg_3106 <= line_buffer_Array_V_2_0_7_q0;
        DataOut_V_101_reg_3112 <= line_buffer_Array_V_2_0_8_q0;
        DataOut_V_102_reg_3118 <= line_buffer_Array_V_2_0_9_q0;
        DataOut_V_103_reg_3124 <= line_buffer_Array_V_2_0_10_q0;
        DataOut_V_104_reg_3130 <= line_buffer_Array_V_2_0_11_q0;
        DataOut_V_105_reg_3136 <= line_buffer_Array_V_2_0_12_q0;
        DataOut_V_106_reg_3142 <= line_buffer_Array_V_2_0_13_q0;
        DataOut_V_107_reg_3148 <= line_buffer_Array_V_2_0_14_q0;
        DataOut_V_93_reg_3064 <= line_buffer_Array_V_2_0_0_q0;
        DataOut_V_94_reg_3070 <= line_buffer_Array_V_2_0_1_q0;
        DataOut_V_95_reg_3076 <= line_buffer_Array_V_2_0_2_q0;
        DataOut_V_96_reg_3082 <= line_buffer_Array_V_2_0_3_q0;
        DataOut_V_97_reg_3088 <= line_buffer_Array_V_2_0_4_q0;
        DataOut_V_98_reg_3094 <= line_buffer_Array_V_2_0_5_q0;
        DataOut_V_99_reg_3100 <= line_buffer_Array_V_2_0_6_q0;
        DataOut_V_reg_3154 <= line_buffer_Array_V_2_0_15_q0;
        shift_buffer_1_0_V_reg_2968 <= data_V_data_0_V_dout;
        shift_buffer_1_10_V_reg_3028 <= data_V_data_10_V_dout;
        shift_buffer_1_11_V_reg_3034 <= data_V_data_11_V_dout;
        shift_buffer_1_12_V_reg_3040 <= data_V_data_12_V_dout;
        shift_buffer_1_13_V_reg_3046 <= data_V_data_13_V_dout;
        shift_buffer_1_14_V_reg_3052 <= data_V_data_14_V_dout;
        shift_buffer_1_15_V_reg_3058 <= data_V_data_15_V_dout;
        shift_buffer_1_1_V_reg_2974 <= data_V_data_1_V_dout;
        shift_buffer_1_2_V_reg_2980 <= data_V_data_2_V_dout;
        shift_buffer_1_3_V_reg_2986 <= data_V_data_3_V_dout;
        shift_buffer_1_4_V_reg_2992 <= data_V_data_4_V_dout;
        shift_buffer_1_5_V_reg_2998 <= data_V_data_5_V_dout;
        shift_buffer_1_6_V_reg_3004 <= data_V_data_6_V_dout;
        shift_buffer_1_7_V_reg_3010 <= data_V_data_7_V_dout;
        shift_buffer_1_8_V_reg_3016 <= data_V_data_8_V_dout;
        shift_buffer_1_9_V_reg_3022 <= data_V_data_9_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln241_reg_2941 <= add_ln241_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_2946 <= and_ln191_4_fu_438_p2;
        icmp_ln212_reg_2950 <= icmp_ln212_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_2946_pp0_iter1_reg <= and_ln191_4_reg_2946;
        icmp_ln241_reg_2937 <= icmp_ln241_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd1) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln216_reg_2959 <= icmp_ln216_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_data_V_2_16 <= DataOut_V_93_reg_3064;
        kernel_data_V_2_17 <= DataOut_V_94_reg_3070;
        kernel_data_V_2_18 <= DataOut_V_95_reg_3076;
        kernel_data_V_2_19 <= DataOut_V_96_reg_3082;
        kernel_data_V_2_20 <= DataOut_V_97_reg_3088;
        kernel_data_V_2_21 <= DataOut_V_98_reg_3094;
        kernel_data_V_2_22 <= DataOut_V_99_reg_3100;
        kernel_data_V_2_23 <= DataOut_V_100_reg_3106;
        kernel_data_V_2_24 <= DataOut_V_101_reg_3112;
        kernel_data_V_2_25 <= DataOut_V_102_reg_3118;
        kernel_data_V_2_26 <= DataOut_V_103_reg_3124;
        kernel_data_V_2_27 <= DataOut_V_104_reg_3130;
        kernel_data_V_2_28 <= DataOut_V_105_reg_3136;
        kernel_data_V_2_29 <= DataOut_V_106_reg_3142;
        kernel_data_V_2_30 <= DataOut_V_107_reg_3148;
        kernel_data_V_2_31 <= DataOut_V_reg_3154;
        kernel_data_V_2_48 <= shift_buffer_1_0_V_reg_2968;
        kernel_data_V_2_49 <= shift_buffer_1_1_V_reg_2974;
        kernel_data_V_2_50 <= shift_buffer_1_2_V_reg_2980;
        kernel_data_V_2_51 <= shift_buffer_1_3_V_reg_2986;
        kernel_data_V_2_52 <= shift_buffer_1_4_V_reg_2992;
        kernel_data_V_2_53 <= shift_buffer_1_5_V_reg_2998;
        kernel_data_V_2_54 <= shift_buffer_1_6_V_reg_3004;
        kernel_data_V_2_55 <= shift_buffer_1_7_V_reg_3010;
        kernel_data_V_2_56 <= shift_buffer_1_8_V_reg_3016;
        kernel_data_V_2_57 <= shift_buffer_1_9_V_reg_3022;
        kernel_data_V_2_58 <= shift_buffer_1_10_V_reg_3028;
        kernel_data_V_2_59 <= shift_buffer_1_11_V_reg_3034;
        kernel_data_V_2_60 <= shift_buffer_1_12_V_reg_3040;
        kernel_data_V_2_61 <= shift_buffer_1_13_V_reg_3046;
        kernel_data_V_2_62 <= shift_buffer_1_14_V_reg_3052;
        kernel_data_V_2_63 <= shift_buffer_1_15_V_reg_3058;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_2946) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_window_0_V_17_reg_3185[4 : 2] <= pool_window_0_V_17_fu_1133_p3[4 : 2];
        pool_window_0_V_19_reg_3210[4 : 2] <= pool_window_0_V_19_fu_1217_p3[4 : 2];
        pool_window_0_V_21_reg_3235[4 : 2] <= pool_window_0_V_21_fu_1301_p3[4 : 2];
        pool_window_0_V_23_reg_3260[4 : 2] <= pool_window_0_V_23_fu_1385_p3[4 : 2];
        pool_window_0_V_25_reg_3285[4 : 2] <= pool_window_0_V_25_fu_1469_p3[4 : 2];
        pool_window_0_V_27_reg_3310[4 : 2] <= pool_window_0_V_27_fu_1553_p3[4 : 2];
        pool_window_0_V_29_reg_3335[4 : 2] <= pool_window_0_V_29_fu_1637_p3[4 : 2];
        pool_window_0_V_31_reg_3360[4 : 2] <= pool_window_0_V_31_fu_1721_p3[4 : 2];
        pool_window_0_V_33_reg_3385[4 : 2] <= pool_window_0_V_33_fu_1805_p3[4 : 2];
        pool_window_0_V_35_reg_3410[4 : 2] <= pool_window_0_V_35_fu_1889_p3[4 : 2];
        pool_window_0_V_37_reg_3435[4 : 2] <= pool_window_0_V_37_fu_1973_p3[4 : 2];
        pool_window_0_V_39_reg_3460[4 : 2] <= pool_window_0_V_39_fu_2057_p3[4 : 2];
        pool_window_0_V_41_reg_3485[4 : 2] <= pool_window_0_V_41_fu_2141_p3[4 : 2];
        pool_window_0_V_43_reg_3510[4 : 2] <= pool_window_0_V_43_fu_2225_p3[4 : 2];
        pool_window_0_V_45_reg_3535[4 : 2] <= pool_window_0_V_45_fu_2309_p3[4 : 2];
        pool_window_0_V_reg_3160[4 : 2] <= pool_window_0_V_fu_1049_p3[4 : 2];
        pool_window_1_V_17_reg_3190[4 : 2] <= pool_window_1_V_17_fu_1141_p3[4 : 2];
        pool_window_1_V_19_reg_3215[4 : 2] <= pool_window_1_V_19_fu_1225_p3[4 : 2];
        pool_window_1_V_21_reg_3240[4 : 2] <= pool_window_1_V_21_fu_1309_p3[4 : 2];
        pool_window_1_V_23_reg_3265[4 : 2] <= pool_window_1_V_23_fu_1393_p3[4 : 2];
        pool_window_1_V_25_reg_3290[4 : 2] <= pool_window_1_V_25_fu_1477_p3[4 : 2];
        pool_window_1_V_27_reg_3315[4 : 2] <= pool_window_1_V_27_fu_1561_p3[4 : 2];
        pool_window_1_V_29_reg_3340[4 : 2] <= pool_window_1_V_29_fu_1645_p3[4 : 2];
        pool_window_1_V_31_reg_3365[4 : 2] <= pool_window_1_V_31_fu_1729_p3[4 : 2];
        pool_window_1_V_33_reg_3390[4 : 2] <= pool_window_1_V_33_fu_1813_p3[4 : 2];
        pool_window_1_V_35_reg_3415[4 : 2] <= pool_window_1_V_35_fu_1897_p3[4 : 2];
        pool_window_1_V_37_reg_3440[4 : 2] <= pool_window_1_V_37_fu_1981_p3[4 : 2];
        pool_window_1_V_39_reg_3465[4 : 2] <= pool_window_1_V_39_fu_2065_p3[4 : 2];
        pool_window_1_V_41_reg_3490[4 : 2] <= pool_window_1_V_41_fu_2149_p3[4 : 2];
        pool_window_1_V_43_reg_3515[4 : 2] <= pool_window_1_V_43_fu_2233_p3[4 : 2];
        pool_window_1_V_45_reg_3540[4 : 2] <= pool_window_1_V_45_fu_2317_p3[4 : 2];
        pool_window_1_V_reg_3165[4 : 2] <= pool_window_1_V_fu_1057_p3[4 : 2];
        pool_window_2_V_17_reg_3195[4 : 2] <= pool_window_2_V_17_fu_1148_p3[4 : 2];
        pool_window_2_V_19_reg_3220[4 : 2] <= pool_window_2_V_19_fu_1232_p3[4 : 2];
        pool_window_2_V_21_reg_3245[4 : 2] <= pool_window_2_V_21_fu_1316_p3[4 : 2];
        pool_window_2_V_23_reg_3270[4 : 2] <= pool_window_2_V_23_fu_1400_p3[4 : 2];
        pool_window_2_V_25_reg_3295[4 : 2] <= pool_window_2_V_25_fu_1484_p3[4 : 2];
        pool_window_2_V_27_reg_3320[4 : 2] <= pool_window_2_V_27_fu_1568_p3[4 : 2];
        pool_window_2_V_29_reg_3345[4 : 2] <= pool_window_2_V_29_fu_1652_p3[4 : 2];
        pool_window_2_V_31_reg_3370[4 : 2] <= pool_window_2_V_31_fu_1736_p3[4 : 2];
        pool_window_2_V_33_reg_3395[4 : 2] <= pool_window_2_V_33_fu_1820_p3[4 : 2];
        pool_window_2_V_35_reg_3420[4 : 2] <= pool_window_2_V_35_fu_1904_p3[4 : 2];
        pool_window_2_V_37_reg_3445[4 : 2] <= pool_window_2_V_37_fu_1988_p3[4 : 2];
        pool_window_2_V_39_reg_3470[4 : 2] <= pool_window_2_V_39_fu_2072_p3[4 : 2];
        pool_window_2_V_41_reg_3495[4 : 2] <= pool_window_2_V_41_fu_2156_p3[4 : 2];
        pool_window_2_V_43_reg_3520[4 : 2] <= pool_window_2_V_43_fu_2240_p3[4 : 2];
        pool_window_2_V_45_reg_3545[4 : 2] <= pool_window_2_V_45_fu_2324_p3[4 : 2];
        pool_window_2_V_reg_3170[4 : 2] <= pool_window_2_V_fu_1064_p3[4 : 2];
        pool_window_3_V_17_reg_3200[4 : 2] <= pool_window_3_V_17_fu_1156_p3[4 : 2];
        pool_window_3_V_19_reg_3225[4 : 2] <= pool_window_3_V_19_fu_1240_p3[4 : 2];
        pool_window_3_V_21_reg_3250[4 : 2] <= pool_window_3_V_21_fu_1324_p3[4 : 2];
        pool_window_3_V_23_reg_3275[4 : 2] <= pool_window_3_V_23_fu_1408_p3[4 : 2];
        pool_window_3_V_25_reg_3300[4 : 2] <= pool_window_3_V_25_fu_1492_p3[4 : 2];
        pool_window_3_V_27_reg_3325[4 : 2] <= pool_window_3_V_27_fu_1576_p3[4 : 2];
        pool_window_3_V_29_reg_3350[4 : 2] <= pool_window_3_V_29_fu_1660_p3[4 : 2];
        pool_window_3_V_31_reg_3375[4 : 2] <= pool_window_3_V_31_fu_1744_p3[4 : 2];
        pool_window_3_V_33_reg_3400[4 : 2] <= pool_window_3_V_33_fu_1828_p3[4 : 2];
        pool_window_3_V_35_reg_3425[4 : 2] <= pool_window_3_V_35_fu_1912_p3[4 : 2];
        pool_window_3_V_37_reg_3450[4 : 2] <= pool_window_3_V_37_fu_1996_p3[4 : 2];
        pool_window_3_V_39_reg_3475[4 : 2] <= pool_window_3_V_39_fu_2080_p3[4 : 2];
        pool_window_3_V_41_reg_3500[4 : 2] <= pool_window_3_V_41_fu_2164_p3[4 : 2];
        pool_window_3_V_43_reg_3525[4 : 2] <= pool_window_3_V_43_fu_2248_p3[4 : 2];
        pool_window_3_V_45_reg_3550[4 : 2] <= pool_window_3_V_45_fu_2332_p3[4 : 2];
        pool_window_3_V_reg_3175[4 : 2] <= pool_window_3_V_fu_1072_p3[4 : 2];
        select_ln65_38_reg_3180 <= select_ln65_38_fu_1125_p3;
        select_ln65_42_reg_3205 <= select_ln65_42_fu_1209_p3;
        select_ln65_46_reg_3230 <= select_ln65_46_fu_1293_p3;
        select_ln65_50_reg_3255 <= select_ln65_50_fu_1377_p3;
        select_ln65_54_reg_3280 <= select_ln65_54_fu_1461_p3;
        select_ln65_58_reg_3305 <= select_ln65_58_fu_1545_p3;
        select_ln65_62_reg_3330 <= select_ln65_62_fu_1629_p3;
        select_ln65_66_reg_3355 <= select_ln65_66_fu_1713_p3;
        select_ln65_70_reg_3380 <= select_ln65_70_fu_1797_p3;
        select_ln65_74_reg_3405 <= select_ln65_74_fu_1881_p3;
        select_ln65_78_reg_3430 <= select_ln65_78_fu_1965_p3;
        select_ln65_82_reg_3455 <= select_ln65_82_fu_2049_p3;
        select_ln65_86_reg_3480 <= select_ln65_86_fu_2133_p3;
        select_ln65_90_reg_3505 <= select_ln65_90_fu_2217_p3;
        select_ln65_94_reg_3530 <= select_ln65_94_fu_2301_p3;
        select_ln65_96_reg_3555 <= select_ln65_96_fu_2385_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_2950 == 1'd1) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sY_1 <= ap_phi_mux_storemerge_i_i_phi_fu_367_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd1) & (icmp_ln216_fu_488_p2 == 1'd0) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln222_reg_2963 <= select_ln222_fu_512_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd0) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln227_reg_2954 <= select_ln227_fu_468_p3;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_374_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_356_p4 = add_ln241_reg_2941;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_356_p4 = indvar_flatten_reg_352;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_2950 == 1'd1) & (icmp_ln216_reg_2959 == 1'd0) & (icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_367_p4 = select_ln222_reg_2963;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_367_p4 = 32'd0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2937 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_10_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_10_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_11_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_11_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_12_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_12_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_13_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_13_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_14_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_14_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_15_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_15_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_6_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_6_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_7_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_7_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_8_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_8_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_9_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2937 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_2_0_9_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_374_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_374_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_494_p2 = (pY_1 + 32'd1);

assign add_ln222_fu_506_p2 = (sY_1 + 32'd1);

assign add_ln225_fu_450_p2 = (pX_1 + 32'd1);

assign add_ln227_fu_462_p2 = (sX_1 + 32'd1);

assign add_ln241_fu_380_p2 = (ap_phi_mux_indvar_flatten_phi_fu_356_p4 + 10'd1);

assign and_ln191_3_fu_432_p2 = (icmp_ln191_6_fu_420_p2 & icmp_ln191_5_fu_410_p2);

assign and_ln191_4_fu_438_p2 = (and_ln191_fu_426_p2 & and_ln191_3_fu_432_p2);

assign and_ln191_fu_426_p2 = (icmp_ln191_fu_390_p2 & icmp_ln191_4_fu_400_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (io_acc_block_signal_op470 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln241_reg_2937 == 1'd0) & (io_acc_block_signal_op75 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (io_acc_block_signal_op470 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln241_reg_2937 == 1'd0) & (io_acc_block_signal_op75 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (io_acc_block_signal_op470 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln241_reg_2937 == 1'd0) & (io_acc_block_signal_op75 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln241_reg_2937 == 1'd0) & (io_acc_block_signal_op75 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((1'd1 == and_ln191_4_reg_2946_pp0_iter1_reg) & (io_acc_block_signal_op470 == 1'b0));
end

always @ (*) begin
    ap_condition_2022 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_2368 = ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_2950 == 1'd0) & (icmp_ln241_reg_2937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_431 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd1) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_725 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_444_p2 == 1'd1) & (icmp_ln241_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_10_fu_1919_p2 = ((pool_window_0_V_35_fu_1889_p3 < pool_window_1_V_35_fu_1897_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_2003_p2 = ((pool_window_0_V_37_fu_1973_p3 < pool_window_1_V_37_fu_1981_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_2087_p2 = ((pool_window_0_V_39_fu_2057_p3 < pool_window_1_V_39_fu_2065_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_2171_p2 = ((pool_window_0_V_41_fu_2141_p3 < pool_window_1_V_41_fu_2149_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_2255_p2 = ((pool_window_0_V_43_fu_2225_p3 < pool_window_1_V_43_fu_2233_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_2339_p2 = ((pool_window_0_V_45_fu_2309_p3 < pool_window_1_V_45_fu_2317_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_1163_p2 = ((pool_window_0_V_17_fu_1133_p3 < pool_window_1_V_17_fu_1141_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_24_fu_1093_p2 = ((pool_window_2_V_fu_1064_p3 < pool_window_3_V_fu_1072_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_25_fu_1115_p2 = ((select_ln65_fu_1085_p3 < select_ln65_33_fu_1107_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_26_fu_1177_p2 = ((pool_window_2_V_17_fu_1148_p3 < pool_window_3_V_17_fu_1156_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_27_fu_1199_p2 = ((select_ln65_35_fu_1169_p3 < select_ln65_37_fu_1191_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_28_fu_1261_p2 = ((pool_window_2_V_19_fu_1232_p3 < pool_window_3_V_19_fu_1240_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_29_fu_1283_p2 = ((select_ln65_39_fu_1253_p3 < select_ln65_41_fu_1275_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_1247_p2 = ((pool_window_0_V_19_fu_1217_p3 < pool_window_1_V_19_fu_1225_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_30_fu_1331_p2 = ((pool_window_0_V_21_fu_1301_p3 < pool_window_1_V_21_fu_1309_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_31_fu_1345_p2 = ((pool_window_2_V_21_fu_1316_p3 < pool_window_3_V_21_fu_1324_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_32_fu_1367_p2 = ((select_ln65_43_fu_1337_p3 < select_ln65_45_fu_1359_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_33_fu_1415_p2 = ((pool_window_0_V_23_fu_1385_p3 < pool_window_1_V_23_fu_1393_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_34_fu_1429_p2 = ((pool_window_2_V_23_fu_1400_p3 < pool_window_3_V_23_fu_1408_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_35_fu_1451_p2 = ((select_ln65_47_fu_1421_p3 < select_ln65_49_fu_1443_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_36_fu_1513_p2 = ((pool_window_2_V_25_fu_1484_p3 < pool_window_3_V_25_fu_1492_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_37_fu_1535_p2 = ((select_ln65_51_fu_1505_p3 < select_ln65_53_fu_1527_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_38_fu_1597_p2 = ((pool_window_2_V_27_fu_1568_p3 < pool_window_3_V_27_fu_1576_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_39_fu_1619_p2 = ((select_ln65_55_fu_1589_p3 < select_ln65_57_fu_1611_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_40_fu_1681_p2 = ((pool_window_2_V_29_fu_1652_p3 < pool_window_3_V_29_fu_1660_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_41_fu_1703_p2 = ((select_ln65_59_fu_1673_p3 < select_ln65_61_fu_1695_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_42_fu_1765_p2 = ((pool_window_2_V_31_fu_1736_p3 < pool_window_3_V_31_fu_1744_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_43_fu_1787_p2 = ((select_ln65_63_fu_1757_p3 < select_ln65_65_fu_1779_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_44_fu_1849_p2 = ((pool_window_2_V_33_fu_1820_p3 < pool_window_3_V_33_fu_1828_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_45_fu_1871_p2 = ((select_ln65_67_fu_1841_p3 < select_ln65_69_fu_1863_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_46_fu_1933_p2 = ((pool_window_2_V_35_fu_1904_p3 < pool_window_3_V_35_fu_1912_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_47_fu_1955_p2 = ((select_ln65_71_fu_1925_p3 < select_ln65_73_fu_1947_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_48_fu_2017_p2 = ((pool_window_2_V_37_fu_1988_p3 < pool_window_3_V_37_fu_1996_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_49_fu_2039_p2 = ((select_ln65_75_fu_2009_p3 < select_ln65_77_fu_2031_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_50_fu_2101_p2 = ((pool_window_2_V_39_fu_2072_p3 < pool_window_3_V_39_fu_2080_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_51_fu_2123_p2 = ((select_ln65_79_fu_2093_p3 < select_ln65_81_fu_2115_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_52_fu_2185_p2 = ((pool_window_2_V_41_fu_2156_p3 < pool_window_3_V_41_fu_2164_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_53_fu_2207_p2 = ((select_ln65_83_fu_2177_p3 < select_ln65_85_fu_2199_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_54_fu_2269_p2 = ((pool_window_2_V_43_fu_2240_p3 < pool_window_3_V_43_fu_2248_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_55_fu_2291_p2 = ((select_ln65_87_fu_2261_p3 < select_ln65_89_fu_2283_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_56_fu_2353_p2 = ((pool_window_2_V_45_fu_2324_p3 < pool_window_3_V_45_fu_2332_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_57_fu_2375_p2 = ((select_ln65_91_fu_2345_p3 < select_ln65_93_fu_2367_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_1499_p2 = ((pool_window_0_V_25_fu_1469_p3 < pool_window_1_V_25_fu_1477_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_1583_p2 = ((pool_window_0_V_27_fu_1553_p3 < pool_window_1_V_27_fu_1561_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_1667_p2 = ((pool_window_0_V_29_fu_1637_p3 < pool_window_1_V_29_fu_1645_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_1751_p2 = ((pool_window_0_V_31_fu_1721_p3 < pool_window_1_V_31_fu_1729_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_1835_p2 = ((pool_window_0_V_33_fu_1805_p3 < pool_window_1_V_33_fu_1813_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_1079_p2 = ((pool_window_0_V_fu_1049_p3 < pool_window_1_V_fu_1057_p3) ? 1'b1 : 1'b0);

assign icmp_ln191_4_fu_400_p2 = ((sY_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_5_fu_410_p2 = (($signed(pY_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_6_fu_420_p2 = (($signed(pX_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_390_p2 = ((sX_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_444_p2 = ((pX_1 == 32'd25) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_488_p2 = ((pY_1 == 32'd25) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_374_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_356_p4 == 10'd676) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op470 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op75 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign pool_window_0_V_17_fu_1133_p3 = {{kernel_data_V_2_17}, {2'd0}};

assign pool_window_0_V_19_fu_1217_p3 = {{kernel_data_V_2_18}, {2'd0}};

assign pool_window_0_V_21_fu_1301_p3 = {{kernel_data_V_2_19}, {2'd0}};

assign pool_window_0_V_23_fu_1385_p3 = {{kernel_data_V_2_20}, {2'd0}};

assign pool_window_0_V_25_fu_1469_p3 = {{kernel_data_V_2_21}, {2'd0}};

assign pool_window_0_V_27_fu_1553_p3 = {{kernel_data_V_2_22}, {2'd0}};

assign pool_window_0_V_29_fu_1637_p3 = {{kernel_data_V_2_23}, {2'd0}};

assign pool_window_0_V_31_fu_1721_p3 = {{kernel_data_V_2_24}, {2'd0}};

assign pool_window_0_V_33_fu_1805_p3 = {{kernel_data_V_2_25}, {2'd0}};

assign pool_window_0_V_35_fu_1889_p3 = {{kernel_data_V_2_26}, {2'd0}};

assign pool_window_0_V_37_fu_1973_p3 = {{kernel_data_V_2_27}, {2'd0}};

assign pool_window_0_V_39_fu_2057_p3 = {{kernel_data_V_2_28}, {2'd0}};

assign pool_window_0_V_41_fu_2141_p3 = {{kernel_data_V_2_29}, {2'd0}};

assign pool_window_0_V_43_fu_2225_p3 = {{kernel_data_V_2_30}, {2'd0}};

assign pool_window_0_V_45_fu_2309_p3 = {{kernel_data_V_2_31}, {2'd0}};

assign pool_window_0_V_fu_1049_p3 = {{kernel_data_V_2_16}, {2'd0}};

assign pool_window_1_V_17_fu_1141_p3 = {{DataOut_V_94_reg_3070}, {2'd0}};

assign pool_window_1_V_19_fu_1225_p3 = {{DataOut_V_95_reg_3076}, {2'd0}};

assign pool_window_1_V_21_fu_1309_p3 = {{DataOut_V_96_reg_3082}, {2'd0}};

assign pool_window_1_V_23_fu_1393_p3 = {{DataOut_V_97_reg_3088}, {2'd0}};

assign pool_window_1_V_25_fu_1477_p3 = {{DataOut_V_98_reg_3094}, {2'd0}};

assign pool_window_1_V_27_fu_1561_p3 = {{DataOut_V_99_reg_3100}, {2'd0}};

assign pool_window_1_V_29_fu_1645_p3 = {{DataOut_V_100_reg_3106}, {2'd0}};

assign pool_window_1_V_31_fu_1729_p3 = {{DataOut_V_101_reg_3112}, {2'd0}};

assign pool_window_1_V_33_fu_1813_p3 = {{DataOut_V_102_reg_3118}, {2'd0}};

assign pool_window_1_V_35_fu_1897_p3 = {{DataOut_V_103_reg_3124}, {2'd0}};

assign pool_window_1_V_37_fu_1981_p3 = {{DataOut_V_104_reg_3130}, {2'd0}};

assign pool_window_1_V_39_fu_2065_p3 = {{DataOut_V_105_reg_3136}, {2'd0}};

assign pool_window_1_V_41_fu_2149_p3 = {{DataOut_V_106_reg_3142}, {2'd0}};

assign pool_window_1_V_43_fu_2233_p3 = {{DataOut_V_107_reg_3148}, {2'd0}};

assign pool_window_1_V_45_fu_2317_p3 = {{DataOut_V_reg_3154}, {2'd0}};

assign pool_window_1_V_fu_1057_p3 = {{DataOut_V_93_reg_3064}, {2'd0}};

assign pool_window_2_V_17_fu_1148_p3 = {{kernel_data_V_2_49}, {2'd0}};

assign pool_window_2_V_19_fu_1232_p3 = {{kernel_data_V_2_50}, {2'd0}};

assign pool_window_2_V_21_fu_1316_p3 = {{kernel_data_V_2_51}, {2'd0}};

assign pool_window_2_V_23_fu_1400_p3 = {{kernel_data_V_2_52}, {2'd0}};

assign pool_window_2_V_25_fu_1484_p3 = {{kernel_data_V_2_53}, {2'd0}};

assign pool_window_2_V_27_fu_1568_p3 = {{kernel_data_V_2_54}, {2'd0}};

assign pool_window_2_V_29_fu_1652_p3 = {{kernel_data_V_2_55}, {2'd0}};

assign pool_window_2_V_31_fu_1736_p3 = {{kernel_data_V_2_56}, {2'd0}};

assign pool_window_2_V_33_fu_1820_p3 = {{kernel_data_V_2_57}, {2'd0}};

assign pool_window_2_V_35_fu_1904_p3 = {{kernel_data_V_2_58}, {2'd0}};

assign pool_window_2_V_37_fu_1988_p3 = {{kernel_data_V_2_59}, {2'd0}};

assign pool_window_2_V_39_fu_2072_p3 = {{kernel_data_V_2_60}, {2'd0}};

assign pool_window_2_V_41_fu_2156_p3 = {{kernel_data_V_2_61}, {2'd0}};

assign pool_window_2_V_43_fu_2240_p3 = {{kernel_data_V_2_62}, {2'd0}};

assign pool_window_2_V_45_fu_2324_p3 = {{kernel_data_V_2_63}, {2'd0}};

assign pool_window_2_V_fu_1064_p3 = {{kernel_data_V_2_48}, {2'd0}};

assign pool_window_3_V_17_fu_1156_p3 = {{shift_buffer_1_1_V_reg_2974}, {2'd0}};

assign pool_window_3_V_19_fu_1240_p3 = {{shift_buffer_1_2_V_reg_2980}, {2'd0}};

assign pool_window_3_V_21_fu_1324_p3 = {{shift_buffer_1_3_V_reg_2986}, {2'd0}};

assign pool_window_3_V_23_fu_1408_p3 = {{shift_buffer_1_4_V_reg_2992}, {2'd0}};

assign pool_window_3_V_25_fu_1492_p3 = {{shift_buffer_1_5_V_reg_2998}, {2'd0}};

assign pool_window_3_V_27_fu_1576_p3 = {{shift_buffer_1_6_V_reg_3004}, {2'd0}};

assign pool_window_3_V_29_fu_1660_p3 = {{shift_buffer_1_7_V_reg_3010}, {2'd0}};

assign pool_window_3_V_31_fu_1744_p3 = {{shift_buffer_1_8_V_reg_3016}, {2'd0}};

assign pool_window_3_V_33_fu_1828_p3 = {{shift_buffer_1_9_V_reg_3022}, {2'd0}};

assign pool_window_3_V_35_fu_1912_p3 = {{shift_buffer_1_10_V_reg_3028}, {2'd0}};

assign pool_window_3_V_37_fu_1996_p3 = {{shift_buffer_1_11_V_reg_3034}, {2'd0}};

assign pool_window_3_V_39_fu_2080_p3 = {{shift_buffer_1_12_V_reg_3040}, {2'd0}};

assign pool_window_3_V_41_fu_2164_p3 = {{shift_buffer_1_13_V_reg_3046}, {2'd0}};

assign pool_window_3_V_43_fu_2248_p3 = {{shift_buffer_1_14_V_reg_3052}, {2'd0}};

assign pool_window_3_V_45_fu_2332_p3 = {{shift_buffer_1_15_V_reg_3058}, {2'd0}};

assign pool_window_3_V_fu_1072_p3 = {{shift_buffer_1_0_V_reg_2968}, {2'd0}};

assign res_V_data_0_V_din = {{tmp_29_fu_2405_p6}, {6'd0}};

assign res_V_data_10_V_din = {{tmp_39_fu_2745_p6}, {6'd0}};

assign res_V_data_11_V_din = {{tmp_40_fu_2779_p6}, {6'd0}};

assign res_V_data_12_V_din = {{tmp_41_fu_2813_p6}, {6'd0}};

assign res_V_data_13_V_din = {{tmp_42_fu_2847_p6}, {6'd0}};

assign res_V_data_14_V_din = {{tmp_43_fu_2881_p6}, {6'd0}};

assign res_V_data_15_V_din = {{tmp_44_fu_2915_p6}, {6'd0}};

assign res_V_data_1_V_din = {{tmp_30_fu_2439_p6}, {6'd0}};

assign res_V_data_2_V_din = {{tmp_31_fu_2473_p6}, {6'd0}};

assign res_V_data_3_V_din = {{tmp_32_fu_2507_p6}, {6'd0}};

assign res_V_data_4_V_din = {{tmp_33_fu_2541_p6}, {6'd0}};

assign res_V_data_5_V_din = {{tmp_34_fu_2575_p6}, {6'd0}};

assign res_V_data_6_V_din = {{tmp_35_fu_2609_p6}, {6'd0}};

assign res_V_data_7_V_din = {{tmp_36_fu_2643_p6}, {6'd0}};

assign res_V_data_8_V_din = {{tmp_37_fu_2677_p6}, {6'd0}};

assign res_V_data_9_V_din = {{tmp_38_fu_2711_p6}, {6'd0}};

assign select_ln222_fu_512_p3 = ((icmp_ln191_4_fu_400_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_506_p2);

assign select_ln227_fu_468_p3 = ((icmp_ln191_fu_390_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_462_p2);

assign select_ln65_33_fu_1107_p3 = ((icmp_ln1496_24_fu_1093_p2[0:0] === 1'b1) ? pool_window_3_V_fu_1072_p3 : pool_window_2_V_fu_1064_p3);

assign select_ln65_35_fu_1169_p3 = ((icmp_ln1496_1_fu_1163_p2[0:0] === 1'b1) ? pool_window_1_V_17_fu_1141_p3 : pool_window_0_V_17_fu_1133_p3);

assign select_ln65_36_fu_1099_p3 = ((icmp_ln1496_24_fu_1093_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_37_fu_1191_p3 = ((icmp_ln1496_26_fu_1177_p2[0:0] === 1'b1) ? pool_window_3_V_17_fu_1156_p3 : pool_window_2_V_17_fu_1148_p3);

assign select_ln65_38_fu_1125_p3 = ((icmp_ln1496_25_fu_1115_p2[0:0] === 1'b1) ? select_ln65_36_fu_1099_p3 : zext_ln65_fu_1121_p1);

assign select_ln65_39_fu_1253_p3 = ((icmp_ln1496_2_fu_1247_p2[0:0] === 1'b1) ? pool_window_1_V_19_fu_1225_p3 : pool_window_0_V_19_fu_1217_p3);

assign select_ln65_40_fu_1183_p3 = ((icmp_ln1496_26_fu_1177_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_41_fu_1275_p3 = ((icmp_ln1496_28_fu_1261_p2[0:0] === 1'b1) ? pool_window_3_V_19_fu_1240_p3 : pool_window_2_V_19_fu_1232_p3);

assign select_ln65_42_fu_1209_p3 = ((icmp_ln1496_27_fu_1199_p2[0:0] === 1'b1) ? select_ln65_40_fu_1183_p3 : zext_ln65_8_fu_1205_p1);

assign select_ln65_43_fu_1337_p3 = ((icmp_ln1496_30_fu_1331_p2[0:0] === 1'b1) ? pool_window_1_V_21_fu_1309_p3 : pool_window_0_V_21_fu_1301_p3);

assign select_ln65_44_fu_1267_p3 = ((icmp_ln1496_28_fu_1261_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_45_fu_1359_p3 = ((icmp_ln1496_31_fu_1345_p2[0:0] === 1'b1) ? pool_window_3_V_21_fu_1324_p3 : pool_window_2_V_21_fu_1316_p3);

assign select_ln65_46_fu_1293_p3 = ((icmp_ln1496_29_fu_1283_p2[0:0] === 1'b1) ? select_ln65_44_fu_1267_p3 : zext_ln65_9_fu_1289_p1);

assign select_ln65_47_fu_1421_p3 = ((icmp_ln1496_33_fu_1415_p2[0:0] === 1'b1) ? pool_window_1_V_23_fu_1393_p3 : pool_window_0_V_23_fu_1385_p3);

assign select_ln65_48_fu_1351_p3 = ((icmp_ln1496_31_fu_1345_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_49_fu_1443_p3 = ((icmp_ln1496_34_fu_1429_p2[0:0] === 1'b1) ? pool_window_3_V_23_fu_1408_p3 : pool_window_2_V_23_fu_1400_p3);

assign select_ln65_50_fu_1377_p3 = ((icmp_ln1496_32_fu_1367_p2[0:0] === 1'b1) ? select_ln65_48_fu_1351_p3 : zext_ln65_10_fu_1373_p1);

assign select_ln65_51_fu_1505_p3 = ((icmp_ln1496_5_fu_1499_p2[0:0] === 1'b1) ? pool_window_1_V_25_fu_1477_p3 : pool_window_0_V_25_fu_1469_p3);

assign select_ln65_52_fu_1435_p3 = ((icmp_ln1496_34_fu_1429_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_53_fu_1527_p3 = ((icmp_ln1496_36_fu_1513_p2[0:0] === 1'b1) ? pool_window_3_V_25_fu_1492_p3 : pool_window_2_V_25_fu_1484_p3);

assign select_ln65_54_fu_1461_p3 = ((icmp_ln1496_35_fu_1451_p2[0:0] === 1'b1) ? select_ln65_52_fu_1435_p3 : zext_ln65_11_fu_1457_p1);

assign select_ln65_55_fu_1589_p3 = ((icmp_ln1496_6_fu_1583_p2[0:0] === 1'b1) ? pool_window_1_V_27_fu_1561_p3 : pool_window_0_V_27_fu_1553_p3);

assign select_ln65_56_fu_1519_p3 = ((icmp_ln1496_36_fu_1513_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_57_fu_1611_p3 = ((icmp_ln1496_38_fu_1597_p2[0:0] === 1'b1) ? pool_window_3_V_27_fu_1576_p3 : pool_window_2_V_27_fu_1568_p3);

assign select_ln65_58_fu_1545_p3 = ((icmp_ln1496_37_fu_1535_p2[0:0] === 1'b1) ? select_ln65_56_fu_1519_p3 : zext_ln65_12_fu_1541_p1);

assign select_ln65_59_fu_1673_p3 = ((icmp_ln1496_7_fu_1667_p2[0:0] === 1'b1) ? pool_window_1_V_29_fu_1645_p3 : pool_window_0_V_29_fu_1637_p3);

assign select_ln65_60_fu_1603_p3 = ((icmp_ln1496_38_fu_1597_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_61_fu_1695_p3 = ((icmp_ln1496_40_fu_1681_p2[0:0] === 1'b1) ? pool_window_3_V_29_fu_1660_p3 : pool_window_2_V_29_fu_1652_p3);

assign select_ln65_62_fu_1629_p3 = ((icmp_ln1496_39_fu_1619_p2[0:0] === 1'b1) ? select_ln65_60_fu_1603_p3 : zext_ln65_13_fu_1625_p1);

assign select_ln65_63_fu_1757_p3 = ((icmp_ln1496_8_fu_1751_p2[0:0] === 1'b1) ? pool_window_1_V_31_fu_1729_p3 : pool_window_0_V_31_fu_1721_p3);

assign select_ln65_64_fu_1687_p3 = ((icmp_ln1496_40_fu_1681_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_65_fu_1779_p3 = ((icmp_ln1496_42_fu_1765_p2[0:0] === 1'b1) ? pool_window_3_V_31_fu_1744_p3 : pool_window_2_V_31_fu_1736_p3);

assign select_ln65_66_fu_1713_p3 = ((icmp_ln1496_41_fu_1703_p2[0:0] === 1'b1) ? select_ln65_64_fu_1687_p3 : zext_ln65_14_fu_1709_p1);

assign select_ln65_67_fu_1841_p3 = ((icmp_ln1496_9_fu_1835_p2[0:0] === 1'b1) ? pool_window_1_V_33_fu_1813_p3 : pool_window_0_V_33_fu_1805_p3);

assign select_ln65_68_fu_1771_p3 = ((icmp_ln1496_42_fu_1765_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_69_fu_1863_p3 = ((icmp_ln1496_44_fu_1849_p2[0:0] === 1'b1) ? pool_window_3_V_33_fu_1828_p3 : pool_window_2_V_33_fu_1820_p3);

assign select_ln65_70_fu_1797_p3 = ((icmp_ln1496_43_fu_1787_p2[0:0] === 1'b1) ? select_ln65_68_fu_1771_p3 : zext_ln65_15_fu_1793_p1);

assign select_ln65_71_fu_1925_p3 = ((icmp_ln1496_10_fu_1919_p2[0:0] === 1'b1) ? pool_window_1_V_35_fu_1897_p3 : pool_window_0_V_35_fu_1889_p3);

assign select_ln65_72_fu_1855_p3 = ((icmp_ln1496_44_fu_1849_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_73_fu_1947_p3 = ((icmp_ln1496_46_fu_1933_p2[0:0] === 1'b1) ? pool_window_3_V_35_fu_1912_p3 : pool_window_2_V_35_fu_1904_p3);

assign select_ln65_74_fu_1881_p3 = ((icmp_ln1496_45_fu_1871_p2[0:0] === 1'b1) ? select_ln65_72_fu_1855_p3 : zext_ln65_16_fu_1877_p1);

assign select_ln65_75_fu_2009_p3 = ((icmp_ln1496_11_fu_2003_p2[0:0] === 1'b1) ? pool_window_1_V_37_fu_1981_p3 : pool_window_0_V_37_fu_1973_p3);

assign select_ln65_76_fu_1939_p3 = ((icmp_ln1496_46_fu_1933_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_77_fu_2031_p3 = ((icmp_ln1496_48_fu_2017_p2[0:0] === 1'b1) ? pool_window_3_V_37_fu_1996_p3 : pool_window_2_V_37_fu_1988_p3);

assign select_ln65_78_fu_1965_p3 = ((icmp_ln1496_47_fu_1955_p2[0:0] === 1'b1) ? select_ln65_76_fu_1939_p3 : zext_ln65_17_fu_1961_p1);

assign select_ln65_79_fu_2093_p3 = ((icmp_ln1496_12_fu_2087_p2[0:0] === 1'b1) ? pool_window_1_V_39_fu_2065_p3 : pool_window_0_V_39_fu_2057_p3);

assign select_ln65_80_fu_2023_p3 = ((icmp_ln1496_48_fu_2017_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_81_fu_2115_p3 = ((icmp_ln1496_50_fu_2101_p2[0:0] === 1'b1) ? pool_window_3_V_39_fu_2080_p3 : pool_window_2_V_39_fu_2072_p3);

assign select_ln65_82_fu_2049_p3 = ((icmp_ln1496_49_fu_2039_p2[0:0] === 1'b1) ? select_ln65_80_fu_2023_p3 : zext_ln65_18_fu_2045_p1);

assign select_ln65_83_fu_2177_p3 = ((icmp_ln1496_13_fu_2171_p2[0:0] === 1'b1) ? pool_window_1_V_41_fu_2149_p3 : pool_window_0_V_41_fu_2141_p3);

assign select_ln65_84_fu_2107_p3 = ((icmp_ln1496_50_fu_2101_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_85_fu_2199_p3 = ((icmp_ln1496_52_fu_2185_p2[0:0] === 1'b1) ? pool_window_3_V_41_fu_2164_p3 : pool_window_2_V_41_fu_2156_p3);

assign select_ln65_86_fu_2133_p3 = ((icmp_ln1496_51_fu_2123_p2[0:0] === 1'b1) ? select_ln65_84_fu_2107_p3 : zext_ln65_19_fu_2129_p1);

assign select_ln65_87_fu_2261_p3 = ((icmp_ln1496_14_fu_2255_p2[0:0] === 1'b1) ? pool_window_1_V_43_fu_2233_p3 : pool_window_0_V_43_fu_2225_p3);

assign select_ln65_88_fu_2191_p3 = ((icmp_ln1496_52_fu_2185_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_89_fu_2283_p3 = ((icmp_ln1496_54_fu_2269_p2[0:0] === 1'b1) ? pool_window_3_V_43_fu_2248_p3 : pool_window_2_V_43_fu_2240_p3);

assign select_ln65_90_fu_2217_p3 = ((icmp_ln1496_53_fu_2207_p2[0:0] === 1'b1) ? select_ln65_88_fu_2191_p3 : zext_ln65_20_fu_2213_p1);

assign select_ln65_91_fu_2345_p3 = ((icmp_ln1496_15_fu_2339_p2[0:0] === 1'b1) ? pool_window_1_V_45_fu_2317_p3 : pool_window_0_V_45_fu_2309_p3);

assign select_ln65_92_fu_2275_p3 = ((icmp_ln1496_54_fu_2269_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_93_fu_2367_p3 = ((icmp_ln1496_56_fu_2353_p2[0:0] === 1'b1) ? pool_window_3_V_45_fu_2332_p3 : pool_window_2_V_45_fu_2324_p3);

assign select_ln65_94_fu_2301_p3 = ((icmp_ln1496_55_fu_2291_p2[0:0] === 1'b1) ? select_ln65_92_fu_2275_p3 : zext_ln65_21_fu_2297_p1);

assign select_ln65_95_fu_2359_p3 = ((icmp_ln1496_56_fu_2353_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_96_fu_2385_p3 = ((icmp_ln1496_57_fu_2375_p2[0:0] === 1'b1) ? select_ln65_95_fu_2359_p3 : zext_ln65_22_fu_2381_p1);

assign select_ln65_fu_1085_p3 = ((icmp_ln1496_fu_1079_p2[0:0] === 1'b1) ? pool_window_1_V_fu_1057_p3 : pool_window_0_V_fu_1049_p3);

assign start_out = real_start;

assign tmp_29_fu_2405_p1 = pool_window_0_V_reg_3160;

assign tmp_29_fu_2405_p2 = pool_window_1_V_reg_3165;

assign tmp_29_fu_2405_p3 = pool_window_2_V_reg_3170;

assign tmp_29_fu_2405_p4 = pool_window_3_V_reg_3175;

assign tmp_30_fu_2439_p1 = pool_window_0_V_17_reg_3185;

assign tmp_30_fu_2439_p2 = pool_window_1_V_17_reg_3190;

assign tmp_30_fu_2439_p3 = pool_window_2_V_17_reg_3195;

assign tmp_30_fu_2439_p4 = pool_window_3_V_17_reg_3200;

assign tmp_31_fu_2473_p1 = pool_window_0_V_19_reg_3210;

assign tmp_31_fu_2473_p2 = pool_window_1_V_19_reg_3215;

assign tmp_31_fu_2473_p3 = pool_window_2_V_19_reg_3220;

assign tmp_31_fu_2473_p4 = pool_window_3_V_19_reg_3225;

assign tmp_32_fu_2507_p1 = pool_window_0_V_21_reg_3235;

assign tmp_32_fu_2507_p2 = pool_window_1_V_21_reg_3240;

assign tmp_32_fu_2507_p3 = pool_window_2_V_21_reg_3245;

assign tmp_32_fu_2507_p4 = pool_window_3_V_21_reg_3250;

assign tmp_33_fu_2541_p1 = pool_window_0_V_23_reg_3260;

assign tmp_33_fu_2541_p2 = pool_window_1_V_23_reg_3265;

assign tmp_33_fu_2541_p3 = pool_window_2_V_23_reg_3270;

assign tmp_33_fu_2541_p4 = pool_window_3_V_23_reg_3275;

assign tmp_34_fu_2575_p1 = pool_window_0_V_25_reg_3285;

assign tmp_34_fu_2575_p2 = pool_window_1_V_25_reg_3290;

assign tmp_34_fu_2575_p3 = pool_window_2_V_25_reg_3295;

assign tmp_34_fu_2575_p4 = pool_window_3_V_25_reg_3300;

assign tmp_35_fu_2609_p1 = pool_window_0_V_27_reg_3310;

assign tmp_35_fu_2609_p2 = pool_window_1_V_27_reg_3315;

assign tmp_35_fu_2609_p3 = pool_window_2_V_27_reg_3320;

assign tmp_35_fu_2609_p4 = pool_window_3_V_27_reg_3325;

assign tmp_36_fu_2643_p1 = pool_window_0_V_29_reg_3335;

assign tmp_36_fu_2643_p2 = pool_window_1_V_29_reg_3340;

assign tmp_36_fu_2643_p3 = pool_window_2_V_29_reg_3345;

assign tmp_36_fu_2643_p4 = pool_window_3_V_29_reg_3350;

assign tmp_37_fu_2677_p1 = pool_window_0_V_31_reg_3360;

assign tmp_37_fu_2677_p2 = pool_window_1_V_31_reg_3365;

assign tmp_37_fu_2677_p3 = pool_window_2_V_31_reg_3370;

assign tmp_37_fu_2677_p4 = pool_window_3_V_31_reg_3375;

assign tmp_38_fu_2711_p1 = pool_window_0_V_33_reg_3385;

assign tmp_38_fu_2711_p2 = pool_window_1_V_33_reg_3390;

assign tmp_38_fu_2711_p3 = pool_window_2_V_33_reg_3395;

assign tmp_38_fu_2711_p4 = pool_window_3_V_33_reg_3400;

assign tmp_39_fu_2745_p1 = pool_window_0_V_35_reg_3410;

assign tmp_39_fu_2745_p2 = pool_window_1_V_35_reg_3415;

assign tmp_39_fu_2745_p3 = pool_window_2_V_35_reg_3420;

assign tmp_39_fu_2745_p4 = pool_window_3_V_35_reg_3425;

assign tmp_40_fu_2779_p1 = pool_window_0_V_37_reg_3435;

assign tmp_40_fu_2779_p2 = pool_window_1_V_37_reg_3440;

assign tmp_40_fu_2779_p3 = pool_window_2_V_37_reg_3445;

assign tmp_40_fu_2779_p4 = pool_window_3_V_37_reg_3450;

assign tmp_41_fu_2813_p1 = pool_window_0_V_39_reg_3460;

assign tmp_41_fu_2813_p2 = pool_window_1_V_39_reg_3465;

assign tmp_41_fu_2813_p3 = pool_window_2_V_39_reg_3470;

assign tmp_41_fu_2813_p4 = pool_window_3_V_39_reg_3475;

assign tmp_42_fu_2847_p1 = pool_window_0_V_41_reg_3485;

assign tmp_42_fu_2847_p2 = pool_window_1_V_41_reg_3490;

assign tmp_42_fu_2847_p3 = pool_window_2_V_41_reg_3495;

assign tmp_42_fu_2847_p4 = pool_window_3_V_41_reg_3500;

assign tmp_43_fu_2881_p1 = pool_window_0_V_43_reg_3510;

assign tmp_43_fu_2881_p2 = pool_window_1_V_43_reg_3515;

assign tmp_43_fu_2881_p3 = pool_window_2_V_43_reg_3520;

assign tmp_43_fu_2881_p4 = pool_window_3_V_43_reg_3525;

assign tmp_44_fu_2915_p1 = pool_window_0_V_45_reg_3535;

assign tmp_44_fu_2915_p2 = pool_window_1_V_45_reg_3540;

assign tmp_44_fu_2915_p3 = pool_window_2_V_45_reg_3545;

assign tmp_44_fu_2915_p4 = pool_window_3_V_45_reg_3550;

assign zext_ln65_10_fu_1373_p1 = icmp_ln1496_30_fu_1331_p2;

assign zext_ln65_11_fu_1457_p1 = icmp_ln1496_33_fu_1415_p2;

assign zext_ln65_12_fu_1541_p1 = icmp_ln1496_5_fu_1499_p2;

assign zext_ln65_13_fu_1625_p1 = icmp_ln1496_6_fu_1583_p2;

assign zext_ln65_14_fu_1709_p1 = icmp_ln1496_7_fu_1667_p2;

assign zext_ln65_15_fu_1793_p1 = icmp_ln1496_8_fu_1751_p2;

assign zext_ln65_16_fu_1877_p1 = icmp_ln1496_9_fu_1835_p2;

assign zext_ln65_17_fu_1961_p1 = icmp_ln1496_10_fu_1919_p2;

assign zext_ln65_18_fu_2045_p1 = icmp_ln1496_11_fu_2003_p2;

assign zext_ln65_19_fu_2129_p1 = icmp_ln1496_12_fu_2087_p2;

assign zext_ln65_20_fu_2213_p1 = icmp_ln1496_13_fu_2171_p2;

assign zext_ln65_21_fu_2297_p1 = icmp_ln1496_14_fu_2255_p2;

assign zext_ln65_22_fu_2381_p1 = icmp_ln1496_15_fu_2339_p2;

assign zext_ln65_8_fu_1205_p1 = icmp_ln1496_1_fu_1163_p2;

assign zext_ln65_9_fu_1289_p1 = icmp_ln1496_2_fu_1247_p2;

assign zext_ln65_fu_1121_p1 = icmp_ln1496_fu_1079_p2;

always @ (posedge ap_clk) begin
    pool_window_0_V_reg_3160[1:0] <= 2'b00;
    pool_window_1_V_reg_3165[1:0] <= 2'b00;
    pool_window_2_V_reg_3170[1:0] <= 2'b00;
    pool_window_3_V_reg_3175[1:0] <= 2'b00;
    pool_window_0_V_17_reg_3185[1:0] <= 2'b00;
    pool_window_1_V_17_reg_3190[1:0] <= 2'b00;
    pool_window_2_V_17_reg_3195[1:0] <= 2'b00;
    pool_window_3_V_17_reg_3200[1:0] <= 2'b00;
    pool_window_0_V_19_reg_3210[1:0] <= 2'b00;
    pool_window_1_V_19_reg_3215[1:0] <= 2'b00;
    pool_window_2_V_19_reg_3220[1:0] <= 2'b00;
    pool_window_3_V_19_reg_3225[1:0] <= 2'b00;
    pool_window_0_V_21_reg_3235[1:0] <= 2'b00;
    pool_window_1_V_21_reg_3240[1:0] <= 2'b00;
    pool_window_2_V_21_reg_3245[1:0] <= 2'b00;
    pool_window_3_V_21_reg_3250[1:0] <= 2'b00;
    pool_window_0_V_23_reg_3260[1:0] <= 2'b00;
    pool_window_1_V_23_reg_3265[1:0] <= 2'b00;
    pool_window_2_V_23_reg_3270[1:0] <= 2'b00;
    pool_window_3_V_23_reg_3275[1:0] <= 2'b00;
    pool_window_0_V_25_reg_3285[1:0] <= 2'b00;
    pool_window_1_V_25_reg_3290[1:0] <= 2'b00;
    pool_window_2_V_25_reg_3295[1:0] <= 2'b00;
    pool_window_3_V_25_reg_3300[1:0] <= 2'b00;
    pool_window_0_V_27_reg_3310[1:0] <= 2'b00;
    pool_window_1_V_27_reg_3315[1:0] <= 2'b00;
    pool_window_2_V_27_reg_3320[1:0] <= 2'b00;
    pool_window_3_V_27_reg_3325[1:0] <= 2'b00;
    pool_window_0_V_29_reg_3335[1:0] <= 2'b00;
    pool_window_1_V_29_reg_3340[1:0] <= 2'b00;
    pool_window_2_V_29_reg_3345[1:0] <= 2'b00;
    pool_window_3_V_29_reg_3350[1:0] <= 2'b00;
    pool_window_0_V_31_reg_3360[1:0] <= 2'b00;
    pool_window_1_V_31_reg_3365[1:0] <= 2'b00;
    pool_window_2_V_31_reg_3370[1:0] <= 2'b00;
    pool_window_3_V_31_reg_3375[1:0] <= 2'b00;
    pool_window_0_V_33_reg_3385[1:0] <= 2'b00;
    pool_window_1_V_33_reg_3390[1:0] <= 2'b00;
    pool_window_2_V_33_reg_3395[1:0] <= 2'b00;
    pool_window_3_V_33_reg_3400[1:0] <= 2'b00;
    pool_window_0_V_35_reg_3410[1:0] <= 2'b00;
    pool_window_1_V_35_reg_3415[1:0] <= 2'b00;
    pool_window_2_V_35_reg_3420[1:0] <= 2'b00;
    pool_window_3_V_35_reg_3425[1:0] <= 2'b00;
    pool_window_0_V_37_reg_3435[1:0] <= 2'b00;
    pool_window_1_V_37_reg_3440[1:0] <= 2'b00;
    pool_window_2_V_37_reg_3445[1:0] <= 2'b00;
    pool_window_3_V_37_reg_3450[1:0] <= 2'b00;
    pool_window_0_V_39_reg_3460[1:0] <= 2'b00;
    pool_window_1_V_39_reg_3465[1:0] <= 2'b00;
    pool_window_2_V_39_reg_3470[1:0] <= 2'b00;
    pool_window_3_V_39_reg_3475[1:0] <= 2'b00;
    pool_window_0_V_41_reg_3485[1:0] <= 2'b00;
    pool_window_1_V_41_reg_3490[1:0] <= 2'b00;
    pool_window_2_V_41_reg_3495[1:0] <= 2'b00;
    pool_window_3_V_41_reg_3500[1:0] <= 2'b00;
    pool_window_0_V_43_reg_3510[1:0] <= 2'b00;
    pool_window_1_V_43_reg_3515[1:0] <= 2'b00;
    pool_window_2_V_43_reg_3520[1:0] <= 2'b00;
    pool_window_3_V_43_reg_3525[1:0] <= 2'b00;
    pool_window_0_V_45_reg_3535[1:0] <= 2'b00;
    pool_window_1_V_45_reg_3540[1:0] <= 2'b00;
    pool_window_2_V_45_reg_3545[1:0] <= 2'b00;
    pool_window_3_V_45_reg_3550[1:0] <= 2'b00;
end

endmodule //pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s
