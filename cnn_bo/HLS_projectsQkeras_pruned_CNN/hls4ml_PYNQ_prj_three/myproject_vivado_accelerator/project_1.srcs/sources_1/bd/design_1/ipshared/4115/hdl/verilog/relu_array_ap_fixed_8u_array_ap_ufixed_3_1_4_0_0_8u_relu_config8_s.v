// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_ap_fixed_8u_array_ap_ufixed_3_1_4_0_0_8u_relu_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [2:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [2:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [2:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [2:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [2:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [2:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [2:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [2:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln41_reg_1247;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln41_reg_1247_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [6:0] i_0_reg_152;
wire   [0:0] icmp_ln41_fu_163_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op29;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op201;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln41_reg_1247_pp0_iter1_reg;
wire   [6:0] i_fu_169_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_data_V_4_0_reg_1256;
reg   [15:0] tmp_data_V_4_1_reg_1265;
reg   [15:0] tmp_data_V_4_2_reg_1274;
reg   [15:0] tmp_data_V_4_3_reg_1283;
reg   [15:0] tmp_data_V_4_4_reg_1292;
reg   [15:0] tmp_data_V_4_5_reg_1301;
reg   [15:0] tmp_data_V_4_6_reg_1310;
reg   [15:0] tmp_data_V_4_7_reg_1319;
wire   [0:0] icmp_ln718_fu_211_p2;
reg   [0:0] icmp_ln718_reg_1328;
wire   [0:0] icmp_ln879_fu_227_p2;
reg   [0:0] icmp_ln879_reg_1333;
wire   [0:0] icmp_ln768_fu_233_p2;
reg   [0:0] icmp_ln768_reg_1338;
wire   [0:0] icmp_ln718_1_fu_243_p2;
reg   [0:0] icmp_ln718_1_reg_1343;
wire   [0:0] icmp_ln879_1_fu_259_p2;
reg   [0:0] icmp_ln879_1_reg_1348;
wire   [0:0] icmp_ln768_1_fu_265_p2;
reg   [0:0] icmp_ln768_1_reg_1353;
wire   [0:0] icmp_ln718_2_fu_275_p2;
reg   [0:0] icmp_ln718_2_reg_1358;
wire   [0:0] icmp_ln879_2_fu_291_p2;
reg   [0:0] icmp_ln879_2_reg_1363;
wire   [0:0] icmp_ln768_2_fu_297_p2;
reg   [0:0] icmp_ln768_2_reg_1368;
wire   [0:0] icmp_ln718_3_fu_307_p2;
reg   [0:0] icmp_ln718_3_reg_1373;
wire   [0:0] icmp_ln879_3_fu_323_p2;
reg   [0:0] icmp_ln879_3_reg_1378;
wire   [0:0] icmp_ln768_3_fu_329_p2;
reg   [0:0] icmp_ln768_3_reg_1383;
wire   [0:0] icmp_ln718_4_fu_339_p2;
reg   [0:0] icmp_ln718_4_reg_1388;
wire   [0:0] icmp_ln879_4_fu_355_p2;
reg   [0:0] icmp_ln879_4_reg_1393;
wire   [0:0] icmp_ln768_4_fu_361_p2;
reg   [0:0] icmp_ln768_4_reg_1398;
wire   [0:0] icmp_ln718_5_fu_371_p2;
reg   [0:0] icmp_ln718_5_reg_1403;
wire   [0:0] icmp_ln879_5_fu_387_p2;
reg   [0:0] icmp_ln879_5_reg_1408;
wire   [0:0] icmp_ln768_5_fu_393_p2;
reg   [0:0] icmp_ln768_5_reg_1413;
wire   [0:0] icmp_ln718_6_fu_403_p2;
reg   [0:0] icmp_ln718_6_reg_1418;
wire   [0:0] icmp_ln879_6_fu_419_p2;
reg   [0:0] icmp_ln879_6_reg_1423;
wire   [0:0] icmp_ln768_6_fu_425_p2;
reg   [0:0] icmp_ln768_6_reg_1428;
wire   [0:0] icmp_ln718_7_fu_435_p2;
reg   [0:0] icmp_ln718_7_reg_1433;
wire   [0:0] icmp_ln879_7_fu_451_p2;
reg   [0:0] icmp_ln879_7_reg_1438;
wire   [0:0] icmp_ln768_7_fu_457_p2;
reg   [0:0] icmp_ln768_7_reg_1443;
wire   [2:0] tmp_data_0_V_fu_553_p3;
reg   [2:0] tmp_data_0_V_reg_1448;
wire   [2:0] tmp_data_1_V_fu_651_p3;
reg   [2:0] tmp_data_1_V_reg_1453;
wire   [2:0] tmp_data_2_V_fu_749_p3;
reg   [2:0] tmp_data_2_V_reg_1458;
wire   [2:0] tmp_data_3_V_fu_847_p3;
reg   [2:0] tmp_data_3_V_reg_1463;
wire   [2:0] tmp_data_4_V_fu_945_p3;
reg   [2:0] tmp_data_4_V_reg_1468;
wire   [2:0] tmp_data_5_V_fu_1043_p3;
reg   [2:0] tmp_data_5_V_reg_1473;
wire   [2:0] tmp_data_6_V_fu_1141_p3;
reg   [2:0] tmp_data_6_V_reg_1478;
wire   [2:0] tmp_data_7_V_fu_1239_p3;
reg   [2:0] tmp_data_7_V_reg_1483;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [6:0] trunc_ln718_fu_207_p1;
wire   [4:0] p_Result_s_fu_217_p4;
wire   [6:0] trunc_ln718_1_fu_239_p1;
wire   [4:0] p_Result_10_1_fu_249_p4;
wire   [6:0] trunc_ln718_2_fu_271_p1;
wire   [4:0] p_Result_10_2_fu_281_p4;
wire   [6:0] trunc_ln718_3_fu_303_p1;
wire   [4:0] p_Result_10_3_fu_313_p4;
wire   [6:0] trunc_ln718_4_fu_335_p1;
wire   [4:0] p_Result_10_4_fu_345_p4;
wire   [6:0] trunc_ln718_5_fu_367_p1;
wire   [4:0] p_Result_10_5_fu_377_p4;
wire   [6:0] trunc_ln718_6_fu_399_p1;
wire   [4:0] p_Result_10_6_fu_409_p4;
wire   [6:0] trunc_ln718_7_fu_431_p1;
wire   [4:0] p_Result_10_7_fu_441_p4;
wire   [0:0] tmp_46_fu_477_p3;
wire   [0:0] or_ln412_fu_491_p2;
wire   [0:0] tmp_48_fu_496_p3;
wire   [0:0] and_ln415_fu_503_p2;
wire   [2:0] zext_ln415_fu_509_p1;
wire   [2:0] trunc_ln_fu_468_p4;
wire   [2:0] add_ln415_fu_513_p2;
wire   [0:0] tmp_49_fu_519_p3;
wire   [0:0] tmp_47_fu_484_p3;
wire   [0:0] xor_ln416_fu_527_p2;
wire   [0:0] and_ln416_fu_533_p2;
wire   [0:0] select_ln777_fu_539_p3;
wire   [0:0] icmp_ln1494_fu_463_p2;
wire   [2:0] select_ln340_fu_545_p3;
wire   [0:0] tmp_50_fu_575_p3;
wire   [0:0] or_ln412_1_fu_589_p2;
wire   [0:0] tmp_52_fu_594_p3;
wire   [0:0] and_ln415_1_fu_601_p2;
wire   [2:0] zext_ln415_1_fu_607_p1;
wire   [2:0] trunc_ln708_s_fu_566_p4;
wire   [2:0] add_ln415_1_fu_611_p2;
wire   [0:0] tmp_53_fu_617_p3;
wire   [0:0] tmp_51_fu_582_p3;
wire   [0:0] xor_ln416_1_fu_625_p2;
wire   [0:0] and_ln416_1_fu_631_p2;
wire   [0:0] select_ln777_1_fu_637_p3;
wire   [0:0] icmp_ln1494_1_fu_561_p2;
wire   [2:0] select_ln340_1_fu_643_p3;
wire   [0:0] tmp_54_fu_673_p3;
wire   [0:0] or_ln412_2_fu_687_p2;
wire   [0:0] tmp_56_fu_692_p3;
wire   [0:0] and_ln415_2_fu_699_p2;
wire   [2:0] zext_ln415_2_fu_705_p1;
wire   [2:0] trunc_ln708_1_fu_664_p4;
wire   [2:0] add_ln415_2_fu_709_p2;
wire   [0:0] tmp_57_fu_715_p3;
wire   [0:0] tmp_55_fu_680_p3;
wire   [0:0] xor_ln416_2_fu_723_p2;
wire   [0:0] and_ln416_2_fu_729_p2;
wire   [0:0] select_ln777_2_fu_735_p3;
wire   [0:0] icmp_ln1494_2_fu_659_p2;
wire   [2:0] select_ln340_2_fu_741_p3;
wire   [0:0] tmp_58_fu_771_p3;
wire   [0:0] or_ln412_3_fu_785_p2;
wire   [0:0] tmp_60_fu_790_p3;
wire   [0:0] and_ln415_3_fu_797_p2;
wire   [2:0] zext_ln415_3_fu_803_p1;
wire   [2:0] trunc_ln708_2_fu_762_p4;
wire   [2:0] add_ln415_3_fu_807_p2;
wire   [0:0] tmp_61_fu_813_p3;
wire   [0:0] tmp_59_fu_778_p3;
wire   [0:0] xor_ln416_3_fu_821_p2;
wire   [0:0] and_ln416_3_fu_827_p2;
wire   [0:0] select_ln777_3_fu_833_p3;
wire   [0:0] icmp_ln1494_3_fu_757_p2;
wire   [2:0] select_ln340_3_fu_839_p3;
wire   [0:0] tmp_62_fu_869_p3;
wire   [0:0] or_ln412_4_fu_883_p2;
wire   [0:0] tmp_64_fu_888_p3;
wire   [0:0] and_ln415_4_fu_895_p2;
wire   [2:0] zext_ln415_4_fu_901_p1;
wire   [2:0] trunc_ln708_3_fu_860_p4;
wire   [2:0] add_ln415_4_fu_905_p2;
wire   [0:0] tmp_65_fu_911_p3;
wire   [0:0] tmp_63_fu_876_p3;
wire   [0:0] xor_ln416_4_fu_919_p2;
wire   [0:0] and_ln416_4_fu_925_p2;
wire   [0:0] select_ln777_4_fu_931_p3;
wire   [0:0] icmp_ln1494_4_fu_855_p2;
wire   [2:0] select_ln340_4_fu_937_p3;
wire   [0:0] tmp_66_fu_967_p3;
wire   [0:0] or_ln412_5_fu_981_p2;
wire   [0:0] tmp_68_fu_986_p3;
wire   [0:0] and_ln415_5_fu_993_p2;
wire   [2:0] zext_ln415_5_fu_999_p1;
wire   [2:0] trunc_ln708_4_fu_958_p4;
wire   [2:0] add_ln415_5_fu_1003_p2;
wire   [0:0] tmp_69_fu_1009_p3;
wire   [0:0] tmp_67_fu_974_p3;
wire   [0:0] xor_ln416_5_fu_1017_p2;
wire   [0:0] and_ln416_5_fu_1023_p2;
wire   [0:0] select_ln777_5_fu_1029_p3;
wire   [0:0] icmp_ln1494_5_fu_953_p2;
wire   [2:0] select_ln340_5_fu_1035_p3;
wire   [0:0] tmp_70_fu_1065_p3;
wire   [0:0] or_ln412_6_fu_1079_p2;
wire   [0:0] tmp_72_fu_1084_p3;
wire   [0:0] and_ln415_6_fu_1091_p2;
wire   [2:0] zext_ln415_6_fu_1097_p1;
wire   [2:0] trunc_ln708_5_fu_1056_p4;
wire   [2:0] add_ln415_6_fu_1101_p2;
wire   [0:0] tmp_73_fu_1107_p3;
wire   [0:0] tmp_71_fu_1072_p3;
wire   [0:0] xor_ln416_6_fu_1115_p2;
wire   [0:0] and_ln416_6_fu_1121_p2;
wire   [0:0] select_ln777_6_fu_1127_p3;
wire   [0:0] icmp_ln1494_6_fu_1051_p2;
wire   [2:0] select_ln340_6_fu_1133_p3;
wire   [0:0] tmp_74_fu_1163_p3;
wire   [0:0] or_ln412_7_fu_1177_p2;
wire   [0:0] tmp_76_fu_1182_p3;
wire   [0:0] and_ln415_7_fu_1189_p2;
wire   [2:0] zext_ln415_7_fu_1195_p1;
wire   [2:0] trunc_ln708_6_fu_1154_p4;
wire   [2:0] add_ln415_7_fu_1199_p2;
wire   [0:0] tmp_77_fu_1205_p3;
wire   [0:0] tmp_75_fu_1170_p3;
wire   [0:0] xor_ln416_7_fu_1213_p2;
wire   [0:0] and_ln416_7_fu_1219_p2;
wire   [0:0] select_ln777_7_fu_1225_p3;
wire   [0:0] icmp_ln1494_7_fu_1149_p2;
wire   [2:0] select_ln340_7_fu_1231_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_fu_163_p2 == 1'd0))) begin
        i_0_reg_152 <= i_fu_169_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_152 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln41_reg_1247 <= icmp_ln41_fu_163_p2;
        icmp_ln41_reg_1247_pp0_iter1_reg <= icmp_ln41_reg_1247;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln41_reg_1247_pp0_iter2_reg <= icmp_ln41_reg_1247_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        icmp_ln718_1_reg_1343 <= icmp_ln718_1_fu_243_p2;
        icmp_ln718_2_reg_1358 <= icmp_ln718_2_fu_275_p2;
        icmp_ln718_3_reg_1373 <= icmp_ln718_3_fu_307_p2;
        icmp_ln718_4_reg_1388 <= icmp_ln718_4_fu_339_p2;
        icmp_ln718_5_reg_1403 <= icmp_ln718_5_fu_371_p2;
        icmp_ln718_6_reg_1418 <= icmp_ln718_6_fu_403_p2;
        icmp_ln718_7_reg_1433 <= icmp_ln718_7_fu_435_p2;
        icmp_ln718_reg_1328 <= icmp_ln718_fu_211_p2;
        icmp_ln768_1_reg_1353 <= icmp_ln768_1_fu_265_p2;
        icmp_ln768_2_reg_1368 <= icmp_ln768_2_fu_297_p2;
        icmp_ln768_3_reg_1383 <= icmp_ln768_3_fu_329_p2;
        icmp_ln768_4_reg_1398 <= icmp_ln768_4_fu_361_p2;
        icmp_ln768_5_reg_1413 <= icmp_ln768_5_fu_393_p2;
        icmp_ln768_6_reg_1428 <= icmp_ln768_6_fu_425_p2;
        icmp_ln768_7_reg_1443 <= icmp_ln768_7_fu_457_p2;
        icmp_ln768_reg_1338 <= icmp_ln768_fu_233_p2;
        icmp_ln879_1_reg_1348 <= icmp_ln879_1_fu_259_p2;
        icmp_ln879_2_reg_1363 <= icmp_ln879_2_fu_291_p2;
        icmp_ln879_3_reg_1378 <= icmp_ln879_3_fu_323_p2;
        icmp_ln879_4_reg_1393 <= icmp_ln879_4_fu_355_p2;
        icmp_ln879_5_reg_1408 <= icmp_ln879_5_fu_387_p2;
        icmp_ln879_6_reg_1423 <= icmp_ln879_6_fu_419_p2;
        icmp_ln879_7_reg_1438 <= icmp_ln879_7_fu_451_p2;
        icmp_ln879_reg_1333 <= icmp_ln879_fu_227_p2;
        tmp_data_V_4_0_reg_1256 <= data_V_data_0_V_dout;
        tmp_data_V_4_1_reg_1265 <= data_V_data_1_V_dout;
        tmp_data_V_4_2_reg_1274 <= data_V_data_2_V_dout;
        tmp_data_V_4_3_reg_1283 <= data_V_data_3_V_dout;
        tmp_data_V_4_4_reg_1292 <= data_V_data_4_V_dout;
        tmp_data_V_4_5_reg_1301 <= data_V_data_5_V_dout;
        tmp_data_V_4_6_reg_1310 <= data_V_data_6_V_dout;
        tmp_data_V_4_7_reg_1319 <= data_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter1_reg == 1'd0))) begin
        tmp_data_0_V_reg_1448 <= tmp_data_0_V_fu_553_p3;
        tmp_data_1_V_reg_1453 <= tmp_data_1_V_fu_651_p3;
        tmp_data_2_V_reg_1458 <= tmp_data_2_V_fu_749_p3;
        tmp_data_3_V_reg_1463 <= tmp_data_3_V_fu_847_p3;
        tmp_data_4_V_reg_1468 <= tmp_data_4_V_fu_945_p3;
        tmp_data_5_V_reg_1473 <= tmp_data_5_V_fu_1043_p3;
        tmp_data_6_V_reg_1478 <= tmp_data_6_V_fu_1141_p3;
        tmp_data_7_V_reg_1483 <= tmp_data_7_V_fu_1239_p3;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_163_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1247 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1247 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1247 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1247 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1247 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1247 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1247 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_1247 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln41_fu_163_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln41_fu_163_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_1_fu_611_p2 = (zext_ln415_1_fu_607_p1 + trunc_ln708_s_fu_566_p4);

assign add_ln415_2_fu_709_p2 = (zext_ln415_2_fu_705_p1 + trunc_ln708_1_fu_664_p4);

assign add_ln415_3_fu_807_p2 = (zext_ln415_3_fu_803_p1 + trunc_ln708_2_fu_762_p4);

assign add_ln415_4_fu_905_p2 = (zext_ln415_4_fu_901_p1 + trunc_ln708_3_fu_860_p4);

assign add_ln415_5_fu_1003_p2 = (zext_ln415_5_fu_999_p1 + trunc_ln708_4_fu_958_p4);

assign add_ln415_6_fu_1101_p2 = (zext_ln415_6_fu_1097_p1 + trunc_ln708_5_fu_1056_p4);

assign add_ln415_7_fu_1199_p2 = (zext_ln415_7_fu_1195_p1 + trunc_ln708_6_fu_1154_p4);

assign add_ln415_fu_513_p2 = (zext_ln415_fu_509_p1 + trunc_ln_fu_468_p4);

assign and_ln415_1_fu_601_p2 = (tmp_52_fu_594_p3 & or_ln412_1_fu_589_p2);

assign and_ln415_2_fu_699_p2 = (tmp_56_fu_692_p3 & or_ln412_2_fu_687_p2);

assign and_ln415_3_fu_797_p2 = (tmp_60_fu_790_p3 & or_ln412_3_fu_785_p2);

assign and_ln415_4_fu_895_p2 = (tmp_64_fu_888_p3 & or_ln412_4_fu_883_p2);

assign and_ln415_5_fu_993_p2 = (tmp_68_fu_986_p3 & or_ln412_5_fu_981_p2);

assign and_ln415_6_fu_1091_p2 = (tmp_72_fu_1084_p3 & or_ln412_6_fu_1079_p2);

assign and_ln415_7_fu_1189_p2 = (tmp_76_fu_1182_p3 & or_ln412_7_fu_1177_p2);

assign and_ln415_fu_503_p2 = (tmp_48_fu_496_p3 & or_ln412_fu_491_p2);

assign and_ln416_1_fu_631_p2 = (xor_ln416_1_fu_625_p2 & tmp_51_fu_582_p3);

assign and_ln416_2_fu_729_p2 = (xor_ln416_2_fu_723_p2 & tmp_55_fu_680_p3);

assign and_ln416_3_fu_827_p2 = (xor_ln416_3_fu_821_p2 & tmp_59_fu_778_p3);

assign and_ln416_4_fu_925_p2 = (xor_ln416_4_fu_919_p2 & tmp_63_fu_876_p3);

assign and_ln416_5_fu_1023_p2 = (xor_ln416_5_fu_1017_p2 & tmp_67_fu_974_p3);

assign and_ln416_6_fu_1121_p2 = (xor_ln416_6_fu_1115_p2 & tmp_71_fu_1072_p3);

assign and_ln416_7_fu_1219_p2 = (xor_ln416_7_fu_1213_p2 & tmp_75_fu_1170_p3);

assign and_ln416_fu_533_p2 = (xor_ln416_fu_527_p2 & tmp_47_fu_484_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op201 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_1247 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op201 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_1247 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op201 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0)) | ((io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_1247 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op29 == 1'b0) & (icmp_ln41_reg_1247 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((io_acc_block_signal_op201 == 1'b0) & (icmp_ln41_reg_1247_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_169_p2 = (i_0_reg_152 + 7'd1);

assign icmp_ln1494_1_fu_561_p2 = (($signed(tmp_data_V_4_1_reg_1265) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_659_p2 = (($signed(tmp_data_V_4_2_reg_1274) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_757_p2 = (($signed(tmp_data_V_4_3_reg_1283) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_855_p2 = (($signed(tmp_data_V_4_4_reg_1292) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_953_p2 = (($signed(tmp_data_V_4_5_reg_1301) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1051_p2 = (($signed(tmp_data_V_4_6_reg_1310) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1149_p2 = (($signed(tmp_data_V_4_7_reg_1319) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_463_p2 = (($signed(tmp_data_V_4_0_reg_1256) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_163_p2 = ((i_0_reg_152 == 7'd121) ? 1'b1 : 1'b0);

assign icmp_ln718_1_fu_243_p2 = ((trunc_ln718_1_fu_239_p1 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_2_fu_275_p2 = ((trunc_ln718_2_fu_271_p1 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_3_fu_307_p2 = ((trunc_ln718_3_fu_303_p1 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_4_fu_339_p2 = ((trunc_ln718_4_fu_335_p1 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_5_fu_371_p2 = ((trunc_ln718_5_fu_367_p1 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_6_fu_403_p2 = ((trunc_ln718_6_fu_399_p1 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_7_fu_435_p2 = ((trunc_ln718_7_fu_431_p1 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_fu_211_p2 = ((trunc_ln718_fu_207_p1 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_265_p2 = ((p_Result_10_1_fu_249_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_297_p2 = ((p_Result_10_2_fu_281_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_329_p2 = ((p_Result_10_3_fu_313_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_4_fu_361_p2 = ((p_Result_10_4_fu_345_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_5_fu_393_p2 = ((p_Result_10_5_fu_377_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_6_fu_425_p2 = ((p_Result_10_6_fu_409_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_7_fu_457_p2 = ((p_Result_10_7_fu_441_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_233_p2 = ((p_Result_s_fu_217_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_259_p2 = ((p_Result_10_1_fu_249_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_291_p2 = ((p_Result_10_2_fu_281_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_323_p2 = ((p_Result_10_3_fu_313_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_355_p2 = ((p_Result_10_4_fu_345_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_387_p2 = ((p_Result_10_5_fu_377_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_419_p2 = ((p_Result_10_6_fu_409_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_451_p2 = ((p_Result_10_7_fu_441_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_227_p2 = ((p_Result_s_fu_217_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op201 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op29 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln412_1_fu_589_p2 = (tmp_50_fu_575_p3 | icmp_ln718_1_reg_1343);

assign or_ln412_2_fu_687_p2 = (tmp_54_fu_673_p3 | icmp_ln718_2_reg_1358);

assign or_ln412_3_fu_785_p2 = (tmp_58_fu_771_p3 | icmp_ln718_3_reg_1373);

assign or_ln412_4_fu_883_p2 = (tmp_62_fu_869_p3 | icmp_ln718_4_reg_1388);

assign or_ln412_5_fu_981_p2 = (tmp_66_fu_967_p3 | icmp_ln718_5_reg_1403);

assign or_ln412_6_fu_1079_p2 = (tmp_70_fu_1065_p3 | icmp_ln718_6_reg_1418);

assign or_ln412_7_fu_1177_p2 = (tmp_74_fu_1163_p3 | icmp_ln718_7_reg_1433);

assign or_ln412_fu_491_p2 = (tmp_46_fu_477_p3 | icmp_ln718_reg_1328);

assign p_Result_10_1_fu_249_p4 = {{data_V_data_1_V_dout[15:11]}};

assign p_Result_10_2_fu_281_p4 = {{data_V_data_2_V_dout[15:11]}};

assign p_Result_10_3_fu_313_p4 = {{data_V_data_3_V_dout[15:11]}};

assign p_Result_10_4_fu_345_p4 = {{data_V_data_4_V_dout[15:11]}};

assign p_Result_10_5_fu_377_p4 = {{data_V_data_5_V_dout[15:11]}};

assign p_Result_10_6_fu_409_p4 = {{data_V_data_6_V_dout[15:11]}};

assign p_Result_10_7_fu_441_p4 = {{data_V_data_7_V_dout[15:11]}};

assign p_Result_s_fu_217_p4 = {{data_V_data_0_V_dout[15:11]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_1448;

assign res_V_data_1_V_din = tmp_data_1_V_reg_1453;

assign res_V_data_2_V_din = tmp_data_2_V_reg_1458;

assign res_V_data_3_V_din = tmp_data_3_V_reg_1463;

assign res_V_data_4_V_din = tmp_data_4_V_reg_1468;

assign res_V_data_5_V_din = tmp_data_5_V_reg_1473;

assign res_V_data_6_V_din = tmp_data_6_V_reg_1478;

assign res_V_data_7_V_din = tmp_data_7_V_reg_1483;

assign select_ln340_1_fu_643_p3 = ((select_ln777_1_fu_637_p3[0:0] === 1'b1) ? add_ln415_1_fu_611_p2 : 3'd7);

assign select_ln340_2_fu_741_p3 = ((select_ln777_2_fu_735_p3[0:0] === 1'b1) ? add_ln415_2_fu_709_p2 : 3'd7);

assign select_ln340_3_fu_839_p3 = ((select_ln777_3_fu_833_p3[0:0] === 1'b1) ? add_ln415_3_fu_807_p2 : 3'd7);

assign select_ln340_4_fu_937_p3 = ((select_ln777_4_fu_931_p3[0:0] === 1'b1) ? add_ln415_4_fu_905_p2 : 3'd7);

assign select_ln340_5_fu_1035_p3 = ((select_ln777_5_fu_1029_p3[0:0] === 1'b1) ? add_ln415_5_fu_1003_p2 : 3'd7);

assign select_ln340_6_fu_1133_p3 = ((select_ln777_6_fu_1127_p3[0:0] === 1'b1) ? add_ln415_6_fu_1101_p2 : 3'd7);

assign select_ln340_7_fu_1231_p3 = ((select_ln777_7_fu_1225_p3[0:0] === 1'b1) ? add_ln415_7_fu_1199_p2 : 3'd7);

assign select_ln340_fu_545_p3 = ((select_ln777_fu_539_p3[0:0] === 1'b1) ? add_ln415_fu_513_p2 : 3'd7);

assign select_ln777_1_fu_637_p3 = ((and_ln416_1_fu_631_p2[0:0] === 1'b1) ? icmp_ln879_1_reg_1348 : icmp_ln768_1_reg_1353);

assign select_ln777_2_fu_735_p3 = ((and_ln416_2_fu_729_p2[0:0] === 1'b1) ? icmp_ln879_2_reg_1363 : icmp_ln768_2_reg_1368);

assign select_ln777_3_fu_833_p3 = ((and_ln416_3_fu_827_p2[0:0] === 1'b1) ? icmp_ln879_3_reg_1378 : icmp_ln768_3_reg_1383);

assign select_ln777_4_fu_931_p3 = ((and_ln416_4_fu_925_p2[0:0] === 1'b1) ? icmp_ln879_4_reg_1393 : icmp_ln768_4_reg_1398);

assign select_ln777_5_fu_1029_p3 = ((and_ln416_5_fu_1023_p2[0:0] === 1'b1) ? icmp_ln879_5_reg_1408 : icmp_ln768_5_reg_1413);

assign select_ln777_6_fu_1127_p3 = ((and_ln416_6_fu_1121_p2[0:0] === 1'b1) ? icmp_ln879_6_reg_1423 : icmp_ln768_6_reg_1428);

assign select_ln777_7_fu_1225_p3 = ((and_ln416_7_fu_1219_p2[0:0] === 1'b1) ? icmp_ln879_7_reg_1438 : icmp_ln768_7_reg_1443);

assign select_ln777_fu_539_p3 = ((and_ln416_fu_533_p2[0:0] === 1'b1) ? icmp_ln879_reg_1333 : icmp_ln768_reg_1338);

assign start_out = real_start;

assign tmp_46_fu_477_p3 = tmp_data_V_4_0_reg_1256[32'd8];

assign tmp_47_fu_484_p3 = tmp_data_V_4_0_reg_1256[32'd10];

assign tmp_48_fu_496_p3 = tmp_data_V_4_0_reg_1256[32'd7];

assign tmp_49_fu_519_p3 = add_ln415_fu_513_p2[32'd2];

assign tmp_50_fu_575_p3 = tmp_data_V_4_1_reg_1265[32'd8];

assign tmp_51_fu_582_p3 = tmp_data_V_4_1_reg_1265[32'd10];

assign tmp_52_fu_594_p3 = tmp_data_V_4_1_reg_1265[32'd7];

assign tmp_53_fu_617_p3 = add_ln415_1_fu_611_p2[32'd2];

assign tmp_54_fu_673_p3 = tmp_data_V_4_2_reg_1274[32'd8];

assign tmp_55_fu_680_p3 = tmp_data_V_4_2_reg_1274[32'd10];

assign tmp_56_fu_692_p3 = tmp_data_V_4_2_reg_1274[32'd7];

assign tmp_57_fu_715_p3 = add_ln415_2_fu_709_p2[32'd2];

assign tmp_58_fu_771_p3 = tmp_data_V_4_3_reg_1283[32'd8];

assign tmp_59_fu_778_p3 = tmp_data_V_4_3_reg_1283[32'd10];

assign tmp_60_fu_790_p3 = tmp_data_V_4_3_reg_1283[32'd7];

assign tmp_61_fu_813_p3 = add_ln415_3_fu_807_p2[32'd2];

assign tmp_62_fu_869_p3 = tmp_data_V_4_4_reg_1292[32'd8];

assign tmp_63_fu_876_p3 = tmp_data_V_4_4_reg_1292[32'd10];

assign tmp_64_fu_888_p3 = tmp_data_V_4_4_reg_1292[32'd7];

assign tmp_65_fu_911_p3 = add_ln415_4_fu_905_p2[32'd2];

assign tmp_66_fu_967_p3 = tmp_data_V_4_5_reg_1301[32'd8];

assign tmp_67_fu_974_p3 = tmp_data_V_4_5_reg_1301[32'd10];

assign tmp_68_fu_986_p3 = tmp_data_V_4_5_reg_1301[32'd7];

assign tmp_69_fu_1009_p3 = add_ln415_5_fu_1003_p2[32'd2];

assign tmp_70_fu_1065_p3 = tmp_data_V_4_6_reg_1310[32'd8];

assign tmp_71_fu_1072_p3 = tmp_data_V_4_6_reg_1310[32'd10];

assign tmp_72_fu_1084_p3 = tmp_data_V_4_6_reg_1310[32'd7];

assign tmp_73_fu_1107_p3 = add_ln415_6_fu_1101_p2[32'd2];

assign tmp_74_fu_1163_p3 = tmp_data_V_4_7_reg_1319[32'd8];

assign tmp_75_fu_1170_p3 = tmp_data_V_4_7_reg_1319[32'd10];

assign tmp_76_fu_1182_p3 = tmp_data_V_4_7_reg_1319[32'd7];

assign tmp_77_fu_1205_p3 = add_ln415_7_fu_1199_p2[32'd2];

assign tmp_data_0_V_fu_553_p3 = ((icmp_ln1494_fu_463_p2[0:0] === 1'b1) ? select_ln340_fu_545_p3 : 3'd0);

assign tmp_data_1_V_fu_651_p3 = ((icmp_ln1494_1_fu_561_p2[0:0] === 1'b1) ? select_ln340_1_fu_643_p3 : 3'd0);

assign tmp_data_2_V_fu_749_p3 = ((icmp_ln1494_2_fu_659_p2[0:0] === 1'b1) ? select_ln340_2_fu_741_p3 : 3'd0);

assign tmp_data_3_V_fu_847_p3 = ((icmp_ln1494_3_fu_757_p2[0:0] === 1'b1) ? select_ln340_3_fu_839_p3 : 3'd0);

assign tmp_data_4_V_fu_945_p3 = ((icmp_ln1494_4_fu_855_p2[0:0] === 1'b1) ? select_ln340_4_fu_937_p3 : 3'd0);

assign tmp_data_5_V_fu_1043_p3 = ((icmp_ln1494_5_fu_953_p2[0:0] === 1'b1) ? select_ln340_5_fu_1035_p3 : 3'd0);

assign tmp_data_6_V_fu_1141_p3 = ((icmp_ln1494_6_fu_1051_p2[0:0] === 1'b1) ? select_ln340_6_fu_1133_p3 : 3'd0);

assign tmp_data_7_V_fu_1239_p3 = ((icmp_ln1494_7_fu_1149_p2[0:0] === 1'b1) ? select_ln340_7_fu_1231_p3 : 3'd0);

assign trunc_ln708_1_fu_664_p4 = {{tmp_data_V_4_2_reg_1274[10:8]}};

assign trunc_ln708_2_fu_762_p4 = {{tmp_data_V_4_3_reg_1283[10:8]}};

assign trunc_ln708_3_fu_860_p4 = {{tmp_data_V_4_4_reg_1292[10:8]}};

assign trunc_ln708_4_fu_958_p4 = {{tmp_data_V_4_5_reg_1301[10:8]}};

assign trunc_ln708_5_fu_1056_p4 = {{tmp_data_V_4_6_reg_1310[10:8]}};

assign trunc_ln708_6_fu_1154_p4 = {{tmp_data_V_4_7_reg_1319[10:8]}};

assign trunc_ln708_s_fu_566_p4 = {{tmp_data_V_4_1_reg_1265[10:8]}};

assign trunc_ln718_1_fu_239_p1 = data_V_data_1_V_dout[6:0];

assign trunc_ln718_2_fu_271_p1 = data_V_data_2_V_dout[6:0];

assign trunc_ln718_3_fu_303_p1 = data_V_data_3_V_dout[6:0];

assign trunc_ln718_4_fu_335_p1 = data_V_data_4_V_dout[6:0];

assign trunc_ln718_5_fu_367_p1 = data_V_data_5_V_dout[6:0];

assign trunc_ln718_6_fu_399_p1 = data_V_data_6_V_dout[6:0];

assign trunc_ln718_7_fu_431_p1 = data_V_data_7_V_dout[6:0];

assign trunc_ln718_fu_207_p1 = data_V_data_0_V_dout[6:0];

assign trunc_ln_fu_468_p4 = {{tmp_data_V_4_0_reg_1256[10:8]}};

assign xor_ln416_1_fu_625_p2 = (tmp_53_fu_617_p3 ^ 1'd1);

assign xor_ln416_2_fu_723_p2 = (tmp_57_fu_715_p3 ^ 1'd1);

assign xor_ln416_3_fu_821_p2 = (tmp_61_fu_813_p3 ^ 1'd1);

assign xor_ln416_4_fu_919_p2 = (tmp_65_fu_911_p3 ^ 1'd1);

assign xor_ln416_5_fu_1017_p2 = (tmp_69_fu_1009_p3 ^ 1'd1);

assign xor_ln416_6_fu_1115_p2 = (tmp_73_fu_1107_p3 ^ 1'd1);

assign xor_ln416_7_fu_1213_p2 = (tmp_77_fu_1205_p3 ^ 1'd1);

assign xor_ln416_fu_527_p2 = (tmp_49_fu_519_p3 ^ 1'd1);

assign zext_ln415_1_fu_607_p1 = and_ln415_1_fu_601_p2;

assign zext_ln415_2_fu_705_p1 = and_ln415_2_fu_699_p2;

assign zext_ln415_3_fu_803_p1 = and_ln415_3_fu_797_p2;

assign zext_ln415_4_fu_901_p1 = and_ln415_4_fu_895_p2;

assign zext_ln415_5_fu_999_p1 = and_ln415_5_fu_993_p2;

assign zext_ln415_6_fu_1097_p1 = and_ln415_6_fu_1091_p2;

assign zext_ln415_7_fu_1195_p1 = and_ln415_7_fu_1189_p2;

assign zext_ln415_fu_509_p1 = and_ln415_fu_503_p2;

endmodule //relu_array_ap_fixed_8u_array_ap_ufixed_3_1_4_0_0_8u_relu_config8_s
